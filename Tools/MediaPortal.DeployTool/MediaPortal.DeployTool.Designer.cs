//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaPortal.DeployTool {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class MediaPortal_DeployTool {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MediaPortal_DeployTool() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MediaPortal.DeployTool.MediaPortal.DeployTool", typeof(MediaPortal_DeployTool).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows AERO is currently disabled.
        ///Please note that AERO is needed to avoid tearing and stuttering.
        ///Enabling AERO will also reduce CPU usage, thus making your HTPC run cooler and quieter..
        /// </summary>
        internal static string AeroThemeMissing {
            get {
                return ResourceManager.GetString("AeroThemeMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Advanced Installation.
        /// </summary>
        internal static string BaseInstallation_labelAdvancedCaption {
            get {
                return ResourceManager.GetString("BaseInstallation_labelAdvancedCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The advanced installation allows you to install Server/Client setups and to specify installation locations and other settings.
        /// </summary>
        internal static string BaseInstallation_labelAdvancedDesc {
            get {
                return ResourceManager.GetString("BaseInstallation_labelAdvancedDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One Click Installation.
        /// </summary>
        internal static string BaseInstallation_labelOneClickCaption {
            get {
                return ResourceManager.GetString("BaseInstallation_labelOneClickCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All required applications will be installed into their default locations using default settings. The database password is &quot;MediaPortal&quot;..
        /// </summary>
        internal static string BaseInstallation_labelOneClickDesc {
            get {
                return ResourceManager.GetString("BaseInstallation_labelOneClickDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Perform an advanced installation.
        /// </summary>
        internal static string BaseInstallation_rbAdvanced {
            get {
                return ResourceManager.GetString("BaseInstallation_rbAdvanced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Perform a One Click Installation.
        /// </summary>
        internal static string BaseInstallation_rbOneClick {
            get {
                return ResourceManager.GetString("BaseInstallation_rbOneClick", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The advanced installation allows you to specify installation locations and other settings.
        /// </summary>
        internal static string BaseInstallationNoTvEngine_labelAdvancedDesc {
            get {
                return ResourceManager.GetString("BaseInstallationNoTvEngine_labelAdvancedDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All required applications will be installed into their default locations and with the default settings..
        /// </summary>
        internal static string BaseInstallationNoTvEngine_labelOneClickDesc {
            get {
                return ResourceManager.GetString("BaseInstallationNoTvEngine_labelOneClickDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will only install MediaPortal. To watch TV it will connect to a dedicated TV-Server in your local area network..
        /// </summary>
        internal static string CustomInstallation_labelClient {
            get {
                return ResourceManager.GetString("CustomInstallation_labelClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will only install the MediaPortal TV-Server on this PC.
        ///The PC will then act as a dedicated TV-Server and provide other PC&apos;s in your LAN with TV. (database installation required).
        /// </summary>
        internal static string CustomInstallation_labelMaster {
            get {
                return ResourceManager.GetString("CustomInstallation_labelMaster", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please choose which setup you want to install:.
        /// </summary>
        internal static string CustomInstallation_labelSectionHeader {
            get {
                return ResourceManager.GetString("CustomInstallation_labelSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the right setup for you if the TV-Cards are installed in the same PC as you want to use MediaPortal and watch TV on MediaPortal..
        /// </summary>
        internal static string CustomInstallation_labelSingleSeat {
            get {
                return ResourceManager.GetString("CustomInstallation_labelSingleSeat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MediaPortal client.
        /// </summary>
        internal static string CustomInstallation_rbClient {
            get {
                return ResourceManager.GetString("CustomInstallation_rbClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Singleseat Installation.
        /// </summary>
        internal static string CustomInstallation_rbSingleSeat {
            get {
                return ResourceManager.GetString("CustomInstallation_rbSingleSeat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dedicated TV-Server (master).
        /// </summary>
        internal static string CustomInstallation_rbTvServerMaster {
            get {
                return ResourceManager.GetString("CustomInstallation_rbTvServerMaster", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configure Windows Firewall to allow external access to database server.
        /// </summary>
        internal static string DBMSSettings_checkBoxFirewall {
            get {
                return ResourceManager.GetString("DBMSSettings_checkBoxFirewall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have to supply a valid installation path for the SQL-Server..
        /// </summary>
        internal static string DBMSSettings_errInvalidInstallationPath {
            get {
                return ResourceManager.GetString("DBMSSettings_errInvalidInstallationPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have to supply a password for the admin SQL-Server user..
        /// </summary>
        internal static string DBMSSettings_errPasswordMissing {
            get {
                return ResourceManager.GetString("DBMSSettings_errPasswordMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please set the needed options for the SQL-Server installation:.
        /// </summary>
        internal static string DBMSSettings_labelHeading {
            get {
                return ResourceManager.GetString("DBMSSettings_labelHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation directory.
        /// </summary>
        internal static string DBMSSettings_labelInstDir {
            get {
                return ResourceManager.GetString("DBMSSettings_labelInstDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password for admin user of the SQL Server.
        /// </summary>
        internal static string DBMSSettings_labelPassword {
            get {
                return ResourceManager.GetString("DBMSSettings_labelPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the installation folder for the SQL-Server.
        /// </summary>
        internal static string DBMSSettings_msgSelectDir {
            get {
                return ResourceManager.GetString("DBMSSettings_msgSelectDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please select the SQL-Server you want to use:.
        /// </summary>
        internal static string DBMSType_labelHeading {
            get {
                return ResourceManager.GetString("DBMSType_labelHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (learn here why).
        /// </summary>
        internal static string DBMSType_lbMSSQL_disabled {
            get {
                return ResourceManager.GetString("DBMSType_lbMSSQL_disabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SQL server is already present and will be used for TV-Server.
        /// </summary>
        internal static string DBMSType_rbDBAlreadyInstalled {
            get {
                return ResourceManager.GetString("DBMSType_rbDBAlreadyInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft SQL-Server Express 2005.
        /// </summary>
        internal static string DBMSType_rbMSSQL {
            get {
                return ResourceManager.GetString("DBMSType_rbMSSQL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft SQL-Server Express 2005 is disabled.
        /// </summary>
        internal static string DBMSType_rbMSSQL_disabled {
            get {
                return ResourceManager.GetString("DBMSType_rbMSSQL_disabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MySQL.
        /// </summary>
        internal static string DBMSType_rbMySQL {
            get {
                return ResourceManager.GetString("DBMSType_rbMySQL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MariaDB.
        /// </summary>
        internal static string DBMSType_rbMariaDB {
            get {
                return ResourceManager.GetString("DBMSType_rbMariaDB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to delete deploy.xml\nDo you want to continue?\nSettings may not be upgraded correctly.
        /// </summary>
        internal static string DeployXmlDelete_Failed {
            get {
                return ResourceManager.GetString("DeployXmlDelete_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is not enough disk space left on the specified drive! For the installation of MediaPortal you need at least {0} MB of free disk space..
        /// </summary>
        internal static string DiskSpace_Error {
            get {
                return ResourceManager.GetString("DiskSpace_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current download settings: lang={0}, arch={1}.
        /// </summary>
        internal static string DownloadOnly_CurrentSettings {
            get {
                return ResourceManager.GetString("DownloadOnly_CurrentSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internet connection is required for the installation process.
        ///    
        ///Do you want to start with the installation process now or do
        ///you just want to download the required components in order
        ///to perform the installation later ?
        ///(maybe on a pc without an internet connection).
        /// </summary>
        internal static string DownloadOnly_labelSectionHeader {
            get {
                return ResourceManager.GetString("DownloadOnly_labelSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only download required components.
        /// </summary>
        internal static string DownloadOnly_no {
            get {
                return ResourceManager.GetString("DownloadOnly_no", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Internet connection found! To continue the installation an active connection is required..
        /// </summary>
        internal static string DownloadOnly_NoConnectionWarning {
            get {
                return ResourceManager.GetString("DownloadOnly_NoConnectionWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start with the installation now.
        /// </summary>
        internal static string DownloadOnly_yes {
            get {
                return ResourceManager.GetString("DownloadOnly_yes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download of settings file failed.
        ///Please review your Internet Explorer configuration and try once again.
        ///A corrupted config file, if found, will now be deleted..
        /// </summary>
        internal static string DownloadSettings_failed {
            get {
                return ResourceManager.GetString("DownloadSettings_failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please select the download settings:.
        /// </summary>
        internal static string DownloadSettings_labelSectionHeader {
            get {
                return ResourceManager.GetString("DownloadSettings_labelSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you really want to abort the installation of MediaPortal?.
        /// </summary>
        internal static string Exit_Installation {
            get {
                return ResourceManager.GetString("Exit_Installation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install LAV Filters to enable playback of many common audio and video formats.
        /// </summary>
        internal static string ExtensionChoice_LAV {
            get {
                return ResourceManager.GetString("ExtensionChoice_LAV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More Info.
        /// </summary>
        internal static string ExtensionChoice_MoreInfo {
            get {
                return ResourceManager.GetString("ExtensionChoice_MoreInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse other extensions.
        /// </summary>
        internal static string ExtensionChoice_OtherExtensions {
            get {
                return ResourceManager.GetString("ExtensionChoice_OtherExtensions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install extension that adds support for popular third party plugins in Titan skin.
        /// </summary>
        internal static string ExtensionChoice_Titan {
            get {
                return ResourceManager.GetString("ExtensionChoice_Titan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recommended Extensions.
        /// </summary>
        internal static string ExtensionChoice_Title {
            get {
                return ResourceManager.GetString("ExtensionChoice_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MediaPortal is completely FREE - you don&apos;t need to pay any money for it!.
        /// </summary>
        internal static string Finished_labelEbay {
            get {
                return ResourceManager.GetString("Finished_labelEbay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Congratulations!.
        /// </summary>
        internal static string Finished_labelHeading1 {
            get {
                return ResourceManager.GetString("Finished_labelHeading1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You successfully downloaded all MediaPortal components.
        /// </summary>
        internal static string Finished_labelHeading2_download {
            get {
                return ResourceManager.GetString("Finished_labelHeading2_download", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You successfully completed the setup of MediaPortal.
        /// </summary>
        internal static string Finished_labelHeading2_install {
            get {
                return ResourceManager.GetString("Finished_labelHeading2_install", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This application will now close and open the folder &quot;MediaPortal Installation&quot;. 
        ///Transfer this folder to your HTPC. Start installation by running &quot;MediaPortal.DeployTool.exe&quot;..
        /// </summary>
        internal static string Finished_labelHeading3_download {
            get {
                return ResourceManager.GetString("Finished_labelHeading3_download", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Below you can find some useful links that will help you getting started with MediaPortal..
        /// </summary>
        internal static string Finished_labelHeading3_install {
            get {
                return ResourceManager.GetString("Finished_labelHeading3_install", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MediaPortal Forum.
        /// </summary>
        internal static string Finished_linkForum {
            get {
                return ResourceManager.GetString("Finished_linkForum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MediaPortal Homepage.
        /// </summary>
        internal static string Finished_linkHomepage {
            get {
                return ResourceManager.GetString("Finished_linkHomepage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MediaPortal Wiki.
        /// </summary>
        internal static string Finished_linkWiki {
            get {
                return ResourceManager.GetString("Finished_linkWiki", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        internal static string HTTPDownload_buttonCancel {
            get {
                return ResourceManager.GetString("HTTPDownload_buttonCancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error downloading the requested file.
        /// </summary>
        internal static string HTTPDownload_errDownloadFailed {
            get {
                return ResourceManager.GetString("HTTPDownload_errDownloadFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download URL:.
        /// </summary>
        internal static string HTTPDownload_labelSourceURL {
            get {
                return ResourceManager.GetString("HTTPDownload_labelSourceURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target:.
        /// </summary>
        internal static string HTTPDownload_labelTargetFile {
            get {
                return ResourceManager.GetString("HTTPDownload_labelTargetFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download cancelled by user.
        /// </summary>
        internal static string HTTPDownload_msgCanceledByUser {
            get {
                return ResourceManager.GetString("HTTPDownload_msgCanceledByUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downloading file....
        /// </summary>
        internal static string HTTPDownload_Title {
            get {
                return ResourceManager.GetString("HTTPDownload_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configure.
        /// </summary>
        internal static string Install_actionConfigure {
            get {
                return ResourceManager.GetString("Install_actionConfigure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download.
        /// </summary>
        internal static string Install_actionDownload {
            get {
                return ResourceManager.GetString("Install_actionDownload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download-&gt;install.
        /// </summary>
        internal static string Install_actionDownloadInstall {
            get {
                return ResourceManager.GetString("Install_actionDownloadInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install.
        /// </summary>
        internal static string Install_actionInstall {
            get {
                return ResourceManager.GetString("Install_actionInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No action.
        /// </summary>
        internal static string Install_actionNothing {
            get {
                return ResourceManager.GetString("Install_actionNothing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove.
        /// </summary>
        internal static string Install_actionRemove {
            get {
                return ResourceManager.GetString("Install_actionRemove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall previous-&gt;Download-&gt;Install.
        /// </summary>
        internal static string Install_actionUninstallDownloadInstall {
            get {
                return ResourceManager.GetString("Install_actionUninstallDownloadInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall previous-&gt;Install.
        /// </summary>
        internal static string Install_actionUninstallInstall {
            get {
                return ResourceManager.GetString("Install_actionUninstallInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Upgrade-&gt;Install.
        /// </summary>
        internal static string Install_actionUpgradeInstall {
            get {
                return ResourceManager.GetString("Install_actionUpgradeInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download.
        /// </summary>
        internal static string Install_buttonDownload {
            get {
                return ResourceManager.GetString("Install_buttonDownload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install.
        /// </summary>
        internal static string Install_buttonInstall {
            get {
                return ResourceManager.GetString("Install_buttonInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action.
        /// </summary>
        internal static string Install_colAction {
            get {
                return ResourceManager.GetString("Install_colAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application.
        /// </summary>
        internal static string Install_colApplication {
            get {
                return ResourceManager.GetString("Install_colApplication", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to State.
        /// </summary>
        internal static string Install_colState {
            get {
                return ResourceManager.GetString("Install_colState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all required applications are installed..
        /// </summary>
        internal static string Install_errAppsMissing {
            get {
                return ResourceManager.GetString("Install_errAppsMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration failed.
        /// </summary>
        internal static string Install_errConfigureFailed {
            get {
                return ResourceManager.GetString("Install_errConfigureFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to download application [{0}].
        /// </summary>
        internal static string Install_errDownloadFailed {
            get {
                return ResourceManager.GetString("Install_errDownloadFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to install application [{0}].
        /// </summary>
        internal static string Install_errInstallFailed {
            get {
                return ResourceManager.GetString("Install_errInstallFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall failed.
        /// </summary>
        internal static string Install_errRemoveFailed {
            get {
                return ResourceManager.GetString("Install_errRemoveFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press the &quot;download&quot; button to perform the download of all needed components.
        /// </summary>
        internal static string Install_labelHeadingDownload {
            get {
                return ResourceManager.GetString("Install_labelHeadingDownload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press the &quot;install&quot; button to perform all necessary actions to install your setup.
        /// </summary>
        internal static string Install_labelHeadingInstall {
            get {
                return ResourceManager.GetString("Install_labelHeadingInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuring....
        /// </summary>
        internal static string Install_msgConfiguring {
            get {
                return ResourceManager.GetString("Install_msgConfiguring", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downloading....
        /// </summary>
        internal static string Install_msgDownloading {
            get {
                return ResourceManager.GetString("Install_msgDownloading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing....
        /// </summary>
        internal static string Install_msgInstalling {
            get {
                return ResourceManager.GetString("Install_msgInstalling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstalling....
        /// </summary>
        internal static string Install_msgUninstalling {
            get {
                return ResourceManager.GetString("Install_msgUninstalling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configured.
        /// </summary>
        internal static string Install_stateConfigured {
            get {
                return ResourceManager.GetString("Install_stateConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downloaded.
        /// </summary>
        internal static string Install_stateDownloaded {
            get {
                return ResourceManager.GetString("Install_stateDownloaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installed.
        /// </summary>
        internal static string Install_stateInstalled {
            get {
                return ResourceManager.GetString("Install_stateInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not configured.
        /// </summary>
        internal static string Install_stateNotConfigured {
            get {
                return ResourceManager.GetString("Install_stateNotConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not downloaded.
        /// </summary>
        internal static string Install_stateNotDownloaded {
            get {
                return ResourceManager.GetString("Install_stateNotDownloaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not installed.
        /// </summary>
        internal static string Install_stateNotInstalled {
            get {
                return ResourceManager.GetString("Install_stateNotInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removed.
        /// </summary>
        internal static string Install_stateRemoved {
            get {
                return ResourceManager.GetString("Install_stateRemoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skipped.
        /// </summary>
        internal static string Install_stateSkipped {
            get {
                return ResourceManager.GetString("Install_stateSkipped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall.
        /// </summary>
        internal static string Install_stateUninstall {
            get {
                return ResourceManager.GetString("Install_stateUninstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Another version is already installed.
        /// </summary>
        internal static string Install_stateVersionMismatch {
            get {
                return ResourceManager.GetString("Install_stateVersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MediaPortal Installation Tool.
        /// </summary>
        internal static string MainWindow_AppName {
            get {
                return ResourceManager.GetString("MainWindow_AppName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Previous.
        /// </summary>
        internal static string MainWindow_backButton {
            get {
                return ResourceManager.GetString("MainWindow_backButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse.
        /// </summary>
        internal static string MainWindow_browseButton {
            get {
                return ResourceManager.GetString("MainWindow_browseButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exit.
        /// </summary>
        internal static string MainWindow_buttonClose {
            get {
                return ResourceManager.GetString("MainWindow_buttonClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This application will guide you through the installation of MediaPortal and all the required components..
        /// </summary>
        internal static string MainWindow_labelAppHeading {
            get {
                return ResourceManager.GetString("MainWindow_labelAppHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Next.
        /// </summary>
        internal static string MainWindow_nextButton {
            get {
                return ResourceManager.GetString("MainWindow_nextButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Continue.
        /// </summary>
        internal static string ManualDownload_buttonContinue {
            get {
                return ResourceManager.GetString("ManualDownload_buttonContinue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File {0} still does not exist. Please browse your disk
        ///(the filename should be similar to the proposed one)..
        /// </summary>
        internal static string ManualDownload_errFileNotFound {
            get {
                return ResourceManager.GetString("ManualDownload_errFileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hit &quot;continue&quot; when you finished downloading the requested file..
        /// </summary>
        internal static string ManualDownload_labelDesc {
            get {
                return ResourceManager.GetString("ManualDownload_labelDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have to manually download the following file:.
        /// </summary>
        internal static string ManualDownload_labelHeading {
            get {
                return ResourceManager.GetString("ManualDownload_labelHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open directory.
        /// </summary>
        internal static string ManualDownload_linkDir {
            get {
                return ResourceManager.GetString("ManualDownload_linkDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download link.
        /// </summary>
        internal static string ManualDownload_linkURL {
            get {
                return ResourceManager.GetString("ManualDownload_linkURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Manual download.
        /// </summary>
        internal static string ManualDownload_Title {
            get {
                return ResourceManager.GetString("ManualDownload_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configure Windows Firewall to allow external access to MediaPortal.
        /// </summary>
        internal static string MPSettings_checkBoxFirewall {
            get {
                return ResourceManager.GetString("MPSettings_checkBoxFirewall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have to supply a valid installation path for MediaPortal..
        /// </summary>
        internal static string MPSettings_errInvalidPath {
            get {
                return ResourceManager.GetString("MPSettings_errInvalidPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please set the needed options for the MediaPortal installation:.
        /// </summary>
        internal static string MPSettings_labelHeading {
            get {
                return ResourceManager.GetString("MPSettings_labelHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MediaPortal install dir:.
        /// </summary>
        internal static string MPSettings_labelInstDir {
            get {
                return ResourceManager.GetString("MPSettings_labelInstDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the installation folder for MediaPortal.
        /// </summary>
        internal static string MPSettings_msgSelectDir {
            get {
                return ResourceManager.GetString("MPSettings_msgSelectDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check above value if you want to upgrade your current MySQL 5.1, 5.6, 5.7 to 8.3 (old db will not be lost).
        /// </summary>
        internal static string MySQLChoice_Information {
            get {
                return ResourceManager.GetString("MySQLChoice_Information", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More Info.
        /// </summary>
        internal static string MySQLChoice_MoreInfo {
            get {
                return ResourceManager.GetString("MySQLChoice_MoreInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MySQL Upgrade 5.1, 5.6, 5.7 to 8.3
        /// </summary>
        internal static string MySQLChoice_Title {
            get {
                return ResourceManager.GetString("MySQLChoice_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Beta version of a service pack detected, your system is not supported...
        ///Continue at your own risk!.
        /// </summary>
        internal static string OS_Beta {
            get {
                return ResourceManager.GetString("OS_Beta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorry, your OS is currently not supported by MediaPortal!.
        /// </summary>
        internal static string OS_Support {
            get {
                return ResourceManager.GetString("OS_Support", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your OS is unsupported because Microsoft did not release several required hotfixes for it.
        ///Continue at your own risk!.
        /// </summary>
        internal static string OS_Warning {
            get {
                return ResourceManager.GetString("OS_Warning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reboot is needed by a Microsoft component.
        ///Please proceed with it before continuing with MediaPortal installation..
        /// </summary>
        internal static string Reboot_Required {
            get {
                return ResourceManager.GetString("Reboot_Required", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reinstall current installation to {0}.
        /// </summary>
        internal static string Reinstall {
            get {
                return ResourceManager.GetString("Reinstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to * External - The external skins are only installed when you choose them, but you can always install them yourself..
        /// </summary>
        internal static string SkinChoice_ExtendedDescription {
            get {
                return ResourceManager.GetString("SkinChoice_ExtendedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Existing Skin (This will be checked for compatibility).
        /// </summary>
        internal static string SkinChoice_labelExistingSkin {
            get {
                return ResourceManager.GetString("SkinChoice_labelExistingSkin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose a Skin.
        /// </summary>
        internal static string SkinChoice_labelSectionHeader {
            get {
                return ResourceManager.GetString("SkinChoice_labelSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse other skins.
        /// </summary>
        internal static string SkinChoice_OtherSkins {
            get {
                return ResourceManager.GetString("SkinChoice_OtherSkins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configure Windows Firewall to allow external access to TV-Server.
        /// </summary>
        internal static string TvServerSettings_checkBoxFirewall {
            get {
                return ResourceManager.GetString("TvServerSettings_checkBoxFirewall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have to supply a valid installation path for the TV-Server..
        /// </summary>
        internal static string TvServerSettings_errInvalidPath {
            get {
                return ResourceManager.GetString("TvServerSettings_errInvalidPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please set the needed options for the TV-Server installation:.
        /// </summary>
        internal static string TvServerSettings_labelHeading {
            get {
                return ResourceManager.GetString("TvServerSettings_labelHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TV-Server installation directory:.
        /// </summary>
        internal static string TvServerSettings_labelInstDir {
            get {
                return ResourceManager.GetString("TvServerSettings_labelInstDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the installation folder for the TV-Server.
        /// </summary>
        internal static string TvServerSettings_msgSelectDir {
            get {
                return ResourceManager.GetString("TvServerSettings_msgSelectDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TV-Server x64 is not compatible with some TV cards.
        ///	If you are using one of the following devices, please install 32bit version of the TV-Server..
        /// </summary>
        internal static string TvServerWarning_labelHeading {
            get {
                return ResourceManager.GetString("TvServerWarning_labelHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MediaPortal {0} detected..
        /// </summary>
        internal static string Upgrade_labelSectionHeader {
            get {
                return ResourceManager.GetString("Upgrade_labelSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MediaPortal {0} (build {1}) detected..
        /// </summary>
        internal static string Upgrade_labelSectionHeader_GIT {
            get {
                return ResourceManager.GetString("Upgrade_labelSectionHeader_GIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fresh install.
        /// </summary>
        internal static string Upgrade_no {
            get {
                return ResourceManager.GetString("Upgrade_no", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NOTE: You cannot upgrade from an existing GIT build,
        ///          those are meant for testing purposes only..
        /// </summary>
        internal static string Upgrade_note {
            get {
                return ResourceManager.GetString("Upgrade_note", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update current installation to {0}.
        /// </summary>
        internal static string Upgrade_yes {
            get {
                return ResourceManager.GetString("Upgrade_yes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to watch TV with MediaPortal ?.
        /// </summary>
        internal static string WatchTV_labelSectionHeader {
            get {
                return ResourceManager.GetString("WatchTV_labelSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No - I will not use MediaPortal to watch TV..
        /// </summary>
        internal static string WatchTV_off {
            get {
                return ResourceManager.GetString("WatchTV_off", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Yes - I will use MediaPortal to watch TV..
        /// </summary>
        internal static string WatchTV_on {
            get {
                return ResourceManager.GetString("WatchTV_on", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thank you for choosing MediaPortal... The FREE OpenSource MediaCenter!.
        /// </summary>
        internal static string Welcome_labelHeading1 {
            get {
                return ResourceManager.GetString("Welcome_labelHeading1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This tool will guide you through the installation process.
        /// </summary>
        internal static string Welcome_labelHeading2 {
            get {
                return ResourceManager.GetString("Welcome_labelHeading2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please select your language before you continue.
        /// </summary>
        internal static string Welcome_labelHeading3 {
            get {
                return ResourceManager.GetString("Welcome_labelHeading3", resourceCulture);
            }
        }
    }
}

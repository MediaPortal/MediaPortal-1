<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gentle.Framework</name>
    </assembly>
    <members>
        <member name="T:Gentle.Framework.ConcurrencyAttribute">
            <summary>
            <p>Use this attribute to designate the property holding the row version integer used
            for concurrency control. Updates (for objects under concurrency control) will only
            succeed if the version of the row being updated matches the objects version.</p> 
            <p>Support for concurrency control using DateTime values is not supported.</p>
            </summary>
        </member>
        <member name="T:Gentle.Framework.CustomViewAttribute">
            <summary>
            <p>Use this attribute to designate properties to include in the named DataView. Use
            the <see cref="T:Gentle.Framework.ObjectView"/> class to construct the named DataView given a list
            of objects or to update object values using data found in an existing DataView.</p>
            <p>This is a convenient method for using standard UI components to show and edit 
            business objects.</p>
            <p>Separate views (by grouping attributes belonging to the same view) using the view
            name. A single property can be in any number of views, but only once in every view.</p>
            </summary>
        </member>
        <member name="M:Gentle.Framework.CustomViewAttribute.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Mark this member as a DataView column in the specified view. 
            </summary>
            <param name="viewName">The name of this custom view</param>
            <param name="columnIndex">The 0-based index of this column</param>
            <param name="columnName">The name of the column</param>
            <param name="formatString">The format string used for formatting data</param>
        </member>
        <member name="M:Gentle.Framework.CustomViewAttribute.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Mark this member as a DataView column in the default view (named "default").
            </summary>
            <param name="columnIndex">The 0-based index of this column</param>
            <param name="columnName">The name of the column</param>
            <param name="formatString">The format string used for formatting data</param>
        </member>
        <member name="M:Gentle.Framework.CustomViewAttribute.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Mark this member as a DataView column in the specified view. 
            </summary>
            <param name="viewName">The name of this custom view</param>
            <param name="columnIndex">The 0-based index of this column</param>
            <param name="columnName">The name of the column</param>
        </member>
        <member name="M:Gentle.Framework.CustomViewAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Mark this member as a DataView column in the default view (named "default").
            </summary>
            <param name="columnIndex">The 0-based index of this column</param>
            <param name="columnName">The name of the column</param>
        </member>
        <member name="P:Gentle.Framework.CustomViewAttribute.ViewName">
            <summary>
            The name of the view to which this attribute belongs.
            </summary>
        </member>
        <member name="P:Gentle.Framework.CustomViewAttribute.ColumnIndex">
            <summary>
            The index of the column in the view. 
            </summary>
        </member>
        <member name="P:Gentle.Framework.CustomViewAttribute.ColumnName">
            <summary>
            The name of the column in the view.
            </summary>
        </member>
        <member name="P:Gentle.Framework.CustomViewAttribute.FormatString">
            <summary>
            The name of the database column for storing the property decorated with this attribute.
            </summary>
        </member>
        <member name="P:Gentle.Framework.CustomViewAttribute.ClickAction">
            <summary>
            Currently unused. 
            </summary>
        </member>
        <member name="P:Gentle.Framework.CustomViewAttribute.NavigateUrlFormat">
            <summary>
            If specified the string will be used to render hyperlink columns (only when using the
            ObjectView.PopulateDataGrid method). The primary key will be inserted in place of {0}
            in the specified format string. This is only useable with Gentle supported classes.
            </summary>
        </member>
        <member name="P:Gentle.Framework.CustomViewAttribute.Style">
            <summary>
            If specified and valid, the column in the DataView will be rendered in the specified
            style. Possible values are "none" (the default), "hyperlink" and "button".
            </summary>
        </member>
        <member name="T:Gentle.Framework.ForeignKeyAttribute">
            <summary>
            Use this attribute to mark properties referencing data in a remote table. It is
            used by the framework to map property (and the corresponding column) names of one
            object to other objects.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ForeignKeyAttribute.#ctor(System.String,System.String)">
            <summary>
            Construct a new ForeignKey attribute. This will relate the decorated property
            to the specified column in the given table.
            </summary>
            <param name="foreignTable">The table to relate to</param>
            <param name="foreignColumn">The column to relate to</param>
        </member>
        <member name="M:Gentle.Framework.ForeignKeyAttribute.#ctor(System.String)">
            <summary>
            Construct a new ForeignKey attribute. This will relate the decorated property
            to the specified column in the given table.
            </summary>
            <param name="foreignReference">The table and column to relate to (formatted as "table.column").</param>
        </member>
        <member name="P:Gentle.Framework.ForeignKeyAttribute.ForeignTable">
            <summary>
            The table to which this instance relates.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ForeignKeyAttribute.ForeignColumn">
            <summary>
            The column to which this instance relates.
            </summary>
        </member>
        <member name="T:Gentle.Framework.InheritanceAttribute">
            <summary>
            Use this attribute when mapping either multiple types to one table or one type
            to multiple tables (this latter is not yet supported). 
            </summary>
        </member>
        <member name="T:Gentle.Framework.PrimaryKeyAttribute">
            <summary>
            Use this attribute to designate properties that are primary key columns. This
            attribute must be present in addition to the <see cref="T:Gentle.Framework.TableColumnAttribute"/> 
            attribute on all key properties.
            </summary>
        </member>
        <member name="P:Gentle.Framework.PrimaryKeyAttribute.AutoGenerated">
            <summary>
            Set this property to true for primary keys that are automatically assigned
            by the database on insert (identity columns in SQL server terminology). 
            </summary>
        </member>
        <member name="T:Gentle.Framework.SequenceNameAttribute">
            <summary>
            Use this attribute to name the sequence used for auto-generated columns. Gentle
            will use this sequence name when it is unable to obtain the information from
            the database automatically. This is the case for a.o. Firebird. If this attribute
            is not present, Gentle attempts to guess the sequence name from certain name
            conventions (for details, consult the SqlFactory class for the provider).
            </summary>
        </member>
        <member name="M:Gentle.Framework.SequenceNameAttribute.#ctor(System.String)">
            <summary>
            Construct a new SequenceName attribute. 
            </summary>
            <param name="sequenceName">The table to relate to</param>
        </member>
        <member name="P:Gentle.Framework.SequenceNameAttribute.Name">
            <summary>
            The name of the sequence used by an auto-generated column.
            </summary>
        </member>
        <member name="T:Gentle.Framework.SoftDeleteAttribute">
            <summary>
            <p>Use this attribute to designate the property holding the row version integer used
            for concurrency control. Updates (for objects under concurrency control) will only
            succeed if the version of the row being updated matches the objects version.</p> 
            <p>Support for concurrency control using DateTime values is not supported.</p>
            </summary>
        </member>
        <member name="T:Gentle.Framework.TableColumnAttribute">
            <summary>
            Use this attribute to identify the properties of <see cref="T:Gentle.Framework.Persistent"/> objects that map 
            to table columns. If no map name is supplied the column and property name must be identical
            (case differences are ignored). This attribute can also be used to override constraints,
            such as to allow NULL values (defaults to false).
            Note that metadata obtained directly from the database overrides anything (but the name)
            specified as parameters to this attribute.
            </summary>
        </member>
        <member name="M:Gentle.Framework.TableColumnAttribute.#ctor">
            <summary>
            Constructor for table columns that are named after their property counterpart
            and whose value cannot be null.
            </summary>
        </member>
        <member name="M:Gentle.Framework.TableColumnAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor for table columns that are named after their property counterpart.
            </summary>
            <param name="notNull">A boolean telling whether null values are allowed in the database</param>
        </member>
        <member name="M:Gentle.Framework.TableColumnAttribute.#ctor(System.String)">
            <summary>
            Constructor for table columns whose value cannot be null.
            </summary>
            <param name="name">The name of the database column</param>
        </member>
        <member name="M:Gentle.Framework.TableColumnAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for table columns.
            </summary>
            <param name="name">The name of the database column</param>
            <param name="notNull">A boolean telling whether null values are allowed in the database</param>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.Name">
            <summary>
            The name of the database column for storing the property decorated with this attribute.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.NotNull">
            <summary>
            This property (defaults to true) can be used to specify whether NULL values are
            allowed in the database. This allows the framework to fail early if a constraint
            is violated.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.DbType">
            <summary>
            The database type of the field in the database. Beware that the DbType enumeration
            values are NOT the ones used by the individual providers. Gentle does NOT convert
            the DbType to a "best match" for the provider. It is therefore recommended that 
            you use the DatabaseType below until a better type definition system is available.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.DatabaseType">
            <summary>
            The database type of the field in the database. Convert the actual database type
            enumeration to a long by casting it in the declaration.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.Size">
            <summary>
            The size or length of the field in the database. String properties will be clipped
            to fit.
            This feature will obsoleted once Gentle is capable of extracting type and size 
            information directly from the database. If specified, the values must match
            those extracted from the database (when implemented).
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.HasDbType">
            <summary>
            This property indicates whether a DbType was specified. This construct is necessary
            because the DbType enum has no value for undefined.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.MagicValue">
            <summary>
            Obsolete, use NullValue instead.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.NullValue">
            <summary>
            This value of this property is used when a column is NotNull and the property value
            is null.  If this is undefined the framework will throw an error for NotNull columns
            whose values are null.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.NullValue_int">
            <summary>
            This property allows type-safe setting of the NullValue for VB users.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.NullValue_opt">
            <summary>
            This property allows type-safe setting of the NullValue for VB users.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.IsReadOnly">
            <summary>
            This value indicates that the column should not be set on insert and update. It is
            primarily useful for columns that are set internally by the database.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.IsUpdateAfterWrite">
            <summary>
            This value indicates that the column must be read after each insert and update. It is
            primarily useful for columns that are set internally by the database. Note that using
            this feature (by setting this to true for any column) will significantly impact 
            performance for the worse, as for every update/insert another select will be 
            performed. Also, fields will be updated using reflection after select, which is also
            quite slow (depending on the number of columns).
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableColumnAttribute.HandleEnumAsString">
            <summary>
            If member which has this attribute attached is enum then this property
            indicates wheter framework saves it as string or as integer.
            Default is false, ie enums are saved as integers
            </summary>
        </member>
        <member name="T:Gentle.Framework.TableNameAttribute">
            <summary>
            Use this attribute on classes that should be persistable. Only classes decorated
            with this attribute are supported by the persistence framework.
            </summary>
        </member>
        <member name="M:Gentle.Framework.TableNameAttribute.#ctor(System.String)">
            <summary>
            The constructor for the TableName attribute.
            </summary>
            <param name="name">The name of the database table used to store instances of this class.</param>
        </member>
        <member name="M:Gentle.Framework.TableNameAttribute.#ctor(System.String,Gentle.Common.CacheStrategy)">
            <summary>
            The constructor for the TableName attribute.
            </summary>
            <param name="name">The name of the database table used to store instances of this class.</param>
            <param name="strategy">The cache stratgey to use for instances of this type. <see 
            cref="P:Gentle.Framework.TableNameAttribute.CacheStrategy"/> for a list of available options.</param>
        </member>
        <member name="P:Gentle.Framework.TableNameAttribute.Name">
            <summary>
            The name of the database table used to store instances of this class.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableNameAttribute.Schema">
            <summary>
            The optional schema name with which to prefix the table name in queries.
            This value overrides the default schema definition (if present) in the
            configuration file. Note: this property is currently unused. 
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableNameAttribute.CacheStrategy">
            <summary>
            The cache behavior for objects of this type. <see cref="P:Gentle.Framework.TableNameAttribute.CacheStrategy"/> 
            for a list of available options.
            </summary>
        </member>
        <member name="T:Gentle.Framework.Broker">
            <summary>
            This class is one of the main access point into the persistence framework. It exists
            to complement the PersistenceBroker class, which you should use if you want to access
            multiple databases or use multiple providers in a single project.
            </summary>
            <remarks>
            The broker is a simple proxy class that interacts with the default database provider
            through an instance of the PersistenceBroker class. This is convenient when you're only
            using a single database (and implied only a single provider) in your project.
            </remarks>
        </member>
        <member name="M:Gentle.Framework.Broker.ClearPersistenceBroker">
            <summary>
            Clear the current PersistenceBroker instance used by the Broker class. This is
            useful if you have changed the Config.DefaultProvider setting.
            </summary>
        </member>
        <member name="P:Gentle.Framework.Broker.ProviderName">
            <summary>
            Returns the class name of the current database engine.
            </summary>
        </member>
        <member name="P:Gentle.Framework.Broker.SessionBroker">
            <summary>
            Returns the PersistenceBroker instance used by this thread.
            </summary>
        </member>
        <member name="P:Gentle.Framework.Broker.Provider">
            <summary>
            Return the currently used IGentleProvider instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gentle.Framework.Broker.GetStatement(System.String)">
            <summary>
            Get a new SqlStatement instance for fully specified queries.
            </summary>
            <param name="sql">The entire SQL string to use for this statement. The statement
            type is determined from the SQL string. If the type cannot be determined the query 
            is executed using ExecuteNonQuery.</param>
            <returns>An SqlStatement instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.GetStatement(Gentle.Framework.StatementType,System.String)">
            <summary>
            Get a new SqlStatement instance for fully specified queries.
            </summary>
            <param name="sql">The entire SQL string to use for this statement</param>
            <param name="stmtType">The statement type. Select statements are executed using
            ExecuteReader. Insert, Update and Delete are executed using ExecuteNonQuery. 
            Count is executed using ExecuteScalar.</param>
            <returns>An SqlStatement instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.GetSqlFactory">
            <summary>
            Get a new GentleSqlFactory instance for the current database engine. The SqlFactory
            encapsulates database specific differences and allows the <see cref="T:Gentle.Framework.SqlBuilder"/> 
            to generate queries compatible with the current engine.
            </summary>
            <returns>An ISqlFactory implementation instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.GetNewConnection">
            <summary>
            Get a new database connection from the current persistence engine. Remember to
            close and release the connection when done with it.
            </summary>
            <returns>A new IDbConnection instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.Retrieve(System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve data for the specified type. Throws an exception for unsupported types.
            </summary>
            <param name="type">The type of object</param>
            <param name="key">The key indentifying the object</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.Refresh(System.Object)">
            <summary>
            Refresh the properties of the given object with the values from the
            database. This is essentially a Retrieve operation, but instead of
            returning a new object, the existing is updated. This allows it to be
            used within constructors.
            Throws an exception for unsupported types.
            </summary>
            <param name="obj">The object instance to update</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.RetrieveInstance(System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve an object given its type and key. This method will raise an
            exception if not exactly one record matches the query. If you wish for
            null results to be allowed, use the <see cref="M:Gentle.Framework.Broker.TryRetrieveInstance(System.Type,Gentle.Framework.Key)"/>
            method instead.
            </summary>
            <param name="type">The type of object to retrieve</param>
            <param name="key">The key identifying the object</param>
            <returns>An object instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.RetrieveInstance``1(Gentle.Framework.Key)">
            <summary>
            Retrieve an object given its type and key. This method will raise an
            exception if not exactly one record matches the query. If you wish for
            null results to be allowed, use the <see cref="M:Gentle.Framework.Broker.TryRetrieveInstance(System.Type,Gentle.Framework.Key)"/>
            method instead.
            </summary>
            <typeparam name="T">The type of objects to retrieve</typeparam>
            <param name="key">The key identifying the object</param>
            <returns>An object instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.TryRetrieveInstance(System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve an object given its type and key. This method returns null if no
            record matches the query.
            </summary>
            <param name="type">The type of object to create</param>
            <param name="key">The key of the object to retrieve</param>
            <returns>The created object instance or null if no records were retrieved.</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.TryRetrieveInstance``1(Gentle.Framework.Key)">
            <summary>
            Retrieve an object given its type and key. This method returns null if no
            record matches the query.
            </summary>
            <typeparam name="T">The type of objects to retrieve</typeparam>
            <param name="key">The key of the object to retrieve</param>
            <returns>The created object instance or null if no records were retrieved.</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.RetrieveList(System.Type)">
            <summary>
            Retrieve a list of objects of a given type.
            </summary>
            <param name="type">The type of objects to retrieve</param>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.RetrieveList``1">
            <summary>
            Retrieve a list of objects of a given type.
            </summary>
            <typeparam name="T">The type of objects to retrieve</typeparam>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.RetrieveList(System.Type,System.Collections.IList)">
            <summary>
            Retrieve a list of objects of a given type.
            </summary>
            <param name="type">The type of objects to retrieve</param>
            <param name="result">An optional existing container in which to store the created objects. If
            this parameter is null a new IList instance will be created.</param>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.RetrieveList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Retrieve a list of objects of a given type.
            </summary>
            <typeparam name="T">The type of objects to retrieve</typeparam>
            <param name="result">An optional existing container in which to store the created objects. If
            this parameter is null a new IList instance will be created.</param>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.RetrieveList(System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve a list of objects of a given type, optionally using the key as constraints.
            The key must contain column names and values (they will not be translated from
            property names to column names).
            </summary>
            <param name="type">The type of objects to retrieve</param>
            <param name="key">The key containing any constraints</param>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.RetrieveList``1(Gentle.Framework.Key)">
            <summary>
            Retrieve a list of objects of a given type, optionally using the key as constraints.
            The key must contain column names and values (they will not be translated from
            property names to column names).
            </summary>
            <typeparam name="T">The type of objects to retrieve</typeparam>
            <param name="key">The key containing any constraints</param>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.RetrieveList(System.Type,Gentle.Framework.Key,System.Collections.IList)">
            <summary>
            Retrieve a list of objects of a given type, optionally using the key as constraints.
            The key must contain column names and values (they will not be translated from
            property names to column names).
            </summary>
            <param name="type">The type of objects to retrieve</param>
            <param name="key">The key containing any constraints</param>
            <param name="result">An optional existing container in which to store the created objects. If
            this parameter is null a new IList instance will be created.</param>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.RetrieveList``1(Gentle.Framework.Key,System.Collections.Generic.IList{``0})">
            <summary>
            Retrieve a list of objects of a given type, optionally using the key as constraints.
            The key must contain column names and values (they will not be translated from
            property names to column names).
            </summary>
            <typeparam name="T">The type of objects to retrieve</typeparam>
            <param name="key">The key containing any constraints</param>
            <param name="result">An optional existing container in which to store the created objects. If
            this parameter is null a new IList instance will be created.</param>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.Persist(Gentle.Framework.IEntity)">
            <summary>
            Persist (insert or update) an object. 
            Updates the Id property of AutoPersistent objects on insert.
            </summary>
            <param name="entity">The object to persist</param>
        </member>
        <member name="M:Gentle.Framework.Broker.Insert(System.Object)">
            <summary>
            Insert an object. This updates the identity property of objects with
            autogenerated primary keys.
            </summary>
            <param name="obj">The object to insert</param>
        </member>
        <member name="M:Gentle.Framework.Broker.Update(System.Object)">
            <summary>
            Update an existing object.
            </summary>
            <param name="obj">The object to update</param>
        </member>
        <member name="M:Gentle.Framework.Broker.Remove(System.Object)">
            <summary>
            Permanently remove an object.
            </summary>
            <param name="obj">The object to persist</param>
        </member>
        <member name="M:Gentle.Framework.Broker.Remove(System.Type,Gentle.Framework.Key)">
            <summary>
            Permanently remove an object.
            </summary>
            <param name="type">The type of object</param>
            <param name="key">The key indentifying the object</param>
        </member>
        <member name="M:Gentle.Framework.Broker.Remove``1(Gentle.Framework.Key)">
            <summary>
            Permanently remove an object.
            </summary>
            <typeparam name="T">The type of objects to retrieve</typeparam>
            <param name="key">The key indentifying the object</param>
        </member>
        <member name="M:Gentle.Framework.Broker.Execute(System.String)">
            <summary>
            Execute a fully specified custom SQL query.
            </summary>
            <param name="sql">The fully specified SQL query to execute</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.Execute(System.String,System.Data.IDbConnection)">
            <summary>
            Execute a fully specified custom SQL query.
            </summary>
            <param name="sql">The fully specified SQL query to execute</param>
            <param name="conn">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous
            statement.</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.Execute(System.String,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Execute a fully specified custom SQL query.
            </summary>
            <param name="sql">The fully specified SQL query to execute</param>
            <param name="conn">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous
            statement.</param>
            <param name="tr">The database transaction for when participating in transactions</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.Execute(Gentle.Framework.SqlStatement)">
            <summary>
            Execute a custom SQL statement.
            </summary>
            <param name="stmt">The statement to execute, wrapped in a SqlStatement object</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.Execute(Gentle.Framework.SqlStatement,System.Data.IDbConnection)">
            <summary>
            Execute a custom SQL statement.
            </summary>
            <param name="stmt">The statement to execute, wrapped in a SqlStatement object</param>
            <param name="conn">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous
            statement.</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.Execute(Gentle.Framework.SqlStatement,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Execute a custom SQL statement.
            </summary>
            <param name="stmt">The statement to execute, wrapped in a SqlStatement object</param>
            <param name="conn">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous
            statement.</param>
            <param name="tr">The database transaction for when participating in transactions</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.Broker.RegisterStatement(System.String,Gentle.Framework.SqlStatement)">
            <summary>
            Associate an SqlStatement with a system type (must be a descendant of Persistent).
            </summary>
            <param name="name">The name used to identify this statement</param>
            <param name="stmt">The SQL statement object</param>
        </member>
        <member name="M:Gentle.Framework.Broker.GetRegisteredStatement(System.String)">
            <summary>
            Retrieve a previously registered SqlStatement.
            </summary>
            <param name="name">The name used to identify this statement</param>
            <returns>The previously registered SQL statement (if any)</returns>
        </member>
        <member name="T:Gentle.Framework.ContextPersistent">
            <summary>
            <p>This class is currently work in progress and is not intended for general consumption.</p>
            <p>This class is intended as an alternate base class for new persistent business objects.
            By inheriting from <see cref="T:System.ContextBoundObject"/> it is possible to automatically flag
            the object instance as dirty when persistent properties are modified, support lazy loading,
            perform parameter validation and code assertions. The downside to all of this is a heavy
            performance cost.</p>
            <p>This class is also intended as an example of how you can create your own base class
            for persistent objects. It is currently work-in-progress.</p>
            <p>As much of the IPersistent interface as possible should be provided by this class.</p>
            </summary>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.#ctor">
            <summary>
            Use this constructor for new (unpersisted) instances.
            The default provider will be used to access the database.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.#ctor(System.Int32,System.Boolean,Gentle.Framework.PersistenceBroker)">
            <summary>
            This is the generic base constructor will a full argument set.
            </summary>
            <param name="version">The version of this record in the database or 0 for new instances.</param>
            <param name="isPersisted">A boolean to indicate whether this object has been persisted.</param>
            <param name="broker">The PersistenceBroker to use for connecting to the database.</param>
        </member>
        <member name="P:Gentle.Framework.ContextPersistent.IsPersisted">
            <summary>
            True if this object instance has been persisted to the database. Updates to
            properties of this instance since does not change the value of this property,
            whose sole purpose is to determine if the object needs to be inserted or updated.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ContextPersistent.ValidationMessages">
            <summary>
            Validation messages reported by the validation framework.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.GetKey">
            <summary>
            Abstract method for subclasses to implement. It should return a <see cref="T:Gentle.Framework.Key"/> 
            instance containing all the primary key properties of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.Persist">
            <summary>
            Persist the current instance to the database.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.Persist(Gentle.Framework.Transaction)">
            <summary>
            Persist the current instance to the database as part of the given transaction.
            </summary>
            <param name="transaction">The transaction in which to execute the operation.</param>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.Remove">
            <summary>
            Remove the current instance from the database. 
            </summary>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.Remove(Gentle.Framework.Transaction)">
            <summary>
            Remove the current instance from the database. 
            </summary>
            <param name="transaction">The transaction in which to execute the operation.</param>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.Refresh">
            <summary>
            Refresh the current instance with the values from the database. This is
            effectively the same as creating a new instance using the key of the 
            current object and updating properties on the current object using the
            values from the retrieved object. This method has serious performance
            implications if used a lot and it should therefore be used sparingly.
            Use a static Retrieve method to fetch a new instance instead and save
            the overhead incurred by having to copy the property values.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.Refresh(Gentle.Framework.Transaction)">
            <summary>
            Refresh the current instance with the values from the database. This is
            effectively the same as creating a new instance using the key of the 
            current object and updating properties on the current object using the
            values from the retrieved object. This method has serious performance
            implications if used a lot and it should therefore be used sparingly.
            Use a static Retrieve method to fetch a new instance instead and save
            the overhead incurred by having to copy the property values.
            </summary>
            <param name="transaction">The transaction in which to execute the operation.</param>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.Retrieve(System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve the object of the specified type and identified by the given key.
            </summary>
            <param name="type">The type of the Persistent descendant</param>
            <param name="key">The key identifying the object</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.Retrieve(Gentle.Framework.PersistenceBroker,System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve the object of the specified type and identified by the given key. This method will
            throw an exception if not exactly one row in the database matches.
            </summary>
            <param name="broker">The PersistenceBroker and associated provider used fetch the data</param>
            <param name="type">The type of the Persistent descendant</param>
            <param name="key">The key identifying the object</param>
            <returns>An object instance of the specified type</returns>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.RetrieveList(System.Type)">
            <summary>
            Retrieve all objects of a certain type (plain select of all rows in a the
            table, i.e. a statement without any where-clause).
            </summary>
            <param name="type">The type of the Persistent descendant to retrieve</param>
            <returns>A collection of objects of the given type</returns>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.RetrieveList(Gentle.Framework.PersistenceBroker,System.Type)">
            <summary>
            Retrieve all objects of a certain type (plain select of all rows in a the
            table, i.e. a statement without any where-clause).
            </summary>
            <param name="broker">The PersistenceBroker and associated provider used fetch the data</param>
            <param name="type">The type of the Persistent descendant to retrieve</param>
            <returns>A collection of objects of the given type</returns>
        </member>
        <member name="M:Gentle.Framework.ContextPersistent.RetrieveList(System.Type,System.String[])">
            <summary>
            Retrieve a list of objects of the given type constrained by the properties of
            this object instance.
            </summary>
            <param name="type">The type of objects being retrieved</param>
            <param name="propertyNames">A list of property names on the current object</param>
            <returns>A collection of objects of the given type</returns>
        </member>
        <member name="P:Gentle.Framework.ContextPersistent.SessionBroker">
            <summary>
            The session broker provides a lock to the database engine. This is
            useful when connecting to multiple databases in a single application.
            </summary>
        </member>
        <member name="T:Gentle.Framework.GentleBase">
            <summary>
            This class is an extension of the Persistent class providing an integer primary key
            field and concurrency control. You may inherit from this class if this is suitable,
            and otherwise use it as inspiration for your own base class. The database columns
            must be named "Id" and "DatabaseVersion" respectively, if you are to use this class.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleBase.#ctor">
            <summary>
            This is the default constructor for new (unpersisted) instances.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleBase.#ctor(System.Int32)">
            <summary>
            This is the default constructor for existing (persisted) instances. The created
            object instance is refreshed using data read from the database. Note: using this
            method is considerably slower than using a full constructor. If performance is
            important you should add a static Retrieve method to your subclass and use it in
            place of this for fetching objects (or call the Broker directly).
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleBase.#ctor(System.Int32,System.Int32)">
            <summary>
            This is the generic base constructor will a full argument set.
            </summary>
            <param name="id">The primary key identity value of this instance.</param>
            <param name="version">The version of this record in the database or 0 for new instances.</param>
        </member>
        <member name="P:Gentle.Framework.GentleBase.DatabaseVersion">
            <summary>
            This property provides concurrency control when globally enabled, as defined by the
            value of the configiguration key "Gentle.Framework/Options/ConcurrencyControl". 
            </summary>
        </member>
        <member name="P:Gentle.Framework.GentleBase.Id">
            <summary>
            The primary key field. 
            </summary>
        </member>
        <member name="T:Gentle.Framework.GentleList">
            <summary>
            This is a container class for managed storage of objects. Work in progress.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleList.#ctor(System.Type)">
            <summary>
            Use this constructor to create lists of persistent objects that are not related to 
            a parent object. This class automatically calls Persist() and Remove() on objects 
            when they are added or removed from the list.
            </summary>
            <param name="containedType">The type of objects to store. The given type must be a 
            descendant of the Persistent class or implement the IPersistent interface.</param>
        </member>
        <member name="M:Gentle.Framework.GentleList.#ctor(System.Type,Gentle.Framework.IPersistent)">
            <summary>
            Use this constructor to create lists that represent 1:n relations. The relations between
            the contained objects and the parent instance are automatically maintained. This class
            automatically calls Persist() and Remove() on objects when they are added or removed
            from the list.
            </summary>
            <param name="parent">The parent of the contained objects. A parent is required for
            managing 1:n and n:m relations.</param>
            <param name="containedType">The type of objects stored in this list instance. The contained 
            type must be supported by Gentle and implement the IPersistent interface.</param>
        </member>
        <member name="M:Gentle.Framework.GentleList.#ctor(System.Type,Gentle.Framework.IPersistent,System.Type,System.Type[])">
            <summary>
            Use this constructor to create lists that represent n:m relations. This class
            automatically calls Persist() and Remove() on objects when they are added or removed
            from the list. Additionally, the relation objects linking the parent and the contained 
            objects are automatically created and destroyed as objects are added or removed from 
            the list, thus making the n:m relationship transparent to clients.
            </summary>
            <param name="containedType">The type of objects stored in this list instance. The contained 
            type must be supported by Gentle and implement the IPersistent interface.</param>
            <param name="parent">The parent of the contained objects. A parent is required for
            managing 1:n and n:m relations.</param>
            <param name="viaType">The type of objects used to represent the n:m relationship.</param>
            <param name="relationTypes">Additional types from which to extract information when 
            creating relations. This is only used in n:m scenarios and permits you to have
            relation tables with more than just two columns. The PK is extracted from the
            specified types (so you cannot use any member; only PKs can be stored).</param>
        </member>
        <member name="M:Gentle.Framework.GentleList.#ctor(Gentle.Framework.PersistenceBroker,System.Type)">
            <summary>
            Use this constructor to create lists of persistent objects that are not related to 
            a parent object. This class automatically calls Persist() and Remove() on objects 
            when they are added or removed from the list.
            </summary>
            <param name="broker">The PersistenceBroker to use for connecting to the database.</param>
            <param name="containedType">The type of objects to store. The given type must be a 
            descendant of the Persistent class or implement the IPersistent interface.</param>
        </member>
        <member name="M:Gentle.Framework.GentleList.#ctor(Gentle.Framework.PersistenceBroker,System.Type,Gentle.Framework.IPersistent)">
            <summary>
            Use this constructor to create lists that represent 1:n relations. The relations between
            the contained objects and the parent instance are automatically maintained. This class
            automatically calls Persist() and Remove() on objects when they are added or removed
            from the list.
            </summary>
            <param name="broker">The PersistenceBroker to use for connecting to the database.</param>
            <param name="parent">The parent of the contained objects. A parent is required for
            managing 1:n and n:m relations.</param>
            <param name="containedType">The type of objects stored in this list instance. The contained 
            type must be supported by Gentle and implement the IPersistent interface.</param>
        </member>
        <member name="M:Gentle.Framework.GentleList.#ctor(Gentle.Framework.PersistenceBroker,System.Type,Gentle.Framework.IPersistent,System.Type,System.Type[])">
            <summary>
            Use this constructor to create lists that represent n:m relations. This class
            automatically calls Persist() and Remove() on objects when they are added or removed
            from the list. Additionally, the relation objects linking the parent and the contained 
            objects are automatically created and destroyed as objects are added or removed from 
            the list, thus making the n:m relationship transparent to clients.
            </summary>
            <param name="broker">The PersistenceBroker to use for connecting to the database.</param>
            <param name="containedType">The type of objects stored in this list instance. The contained 
            type must be supported by Gentle and implement the IPersistent interface.</param>
            <param name="parent">The parent of the contained objects. A parent is required for
            managing 1:n and n:m relations.</param>
            <param name="viaType">The type of objects used to represent the n:m relationship.</param>
            <param name="relationTypes">Additional types from which to extract information when 
            creating relations. This is only used in n:m scenarios and permits you to have
            relation tables with more than just two columns. The PK is extracted from the
            specified types (so you cannot use any member; only PKs can be stored).</param>
        </member>
        <member name="M:Gentle.Framework.GentleList.Find(Gentle.Framework.Key)">
            <summary>
            Search the list of contained objects for an entry whose key matches the given key. The
            first match is returned or null if no match was found.
            </summary>
            <param name="key">The key identifying the object to retrieve.</param>
            <returns>The first object matching the key.</returns>
        </member>
        <member name="M:Gentle.Framework.GentleList.Add(System.Object)">
            <summary>
            Add an object to the list. For 1:n relations, any references on the object being added
            to the parent of the list will be updated to match the parents current values, and the 
            object will be inserted if it is a new one. For n:m relations, a new relation object is
            created and inserted (the object itself is never persisted).
            </summary>
            <param name="value">The object to add to the list</param>
            <returns>The index of the newly added object</returns>
        </member>
        <member name="M:Gentle.Framework.GentleList.Add(System.Object,System.Object[])">
            <summary>
            Add an object to the list. For 1:n relations, any references on the object being added
            to the parent of the list will be updated to match the parents current values, and the 
            object will be inserted if it is a new one. For n:m relations, a new relation object is
            created and inserted (the object itself is never persisted).
            </summary>
            <param name="value">The object to add to the list</param>
            <param name="relatedObjects">A list of values to use when creating the n:m relation 
            object.</param>
            <returns>The index of the newly added object</returns>
        </member>
        <member name="M:Gentle.Framework.GentleList.Add(Gentle.Framework.Transaction,System.Object,System.Object[])">
            <summary>
            Add an object to the list. For 1:n relations, any references on the object being added
            to the parent of the list will be updated to match the parents current values, and the 
            object will be inserted if it is a new one. For n:m relations, a new relation object is
            created and inserted (the object itself is never persisted).
            </summary>
            <param name="transaction">The transaction within which to execute statements.</param>
            <param name="value">The object to add to the list</param>
            <param name="relatedObjects">A list of values to use when creating the n:m relation 
            object.</param>
            <returns>The index of the newly added object</returns>
        </member>
        <member name="M:Gentle.Framework.GentleList.AddRange(System.Collections.ICollection)">
            <summary>
            Add a list of objects to the list.
            </summary>
            <param name="collection">The collection of objects to add to the list.</param>
        </member>
        <member name="M:Gentle.Framework.GentleList.Remove(System.Object)">
            <summary>
            Remove an object from the list. For 1:n relations, if the object is persisted it will also
            be removed from the database. For n:m relations, the relation object is removed (the object 
            being removed is left untouched and must manually be removed if so desired).
            </summary>
            <param name="value">The object to remove from the list</param>
        </member>
        <member name="M:Gentle.Framework.GentleList.Remove(Gentle.Framework.Transaction,System.Object)">
            <summary>
            Remove an object from the list. For 1:n relations, if the object is persisted it will also
            be removed from the database. For n:m relations, the relation object is removed (the object 
            being removed is left untouched and must manually be removed if so desired).
            </summary>
            <param name="transaction">The transaction within which to execute statements.</param>
            <param name="value">The object to remove from the list</param>
        </member>
        <member name="M:Gentle.Framework.GentleList.RemoveAt(System.Int32)">
            <summary>
            Remove an object from the list. For 1:n relations, if the object is persisted it will also
            be removed from the database. For n:m relations, the relation object is removed (the object 
            being removed is left untouched and must manually be removed if so desired).
            </summary>
            <param name="index">The index of the object to remove from the list</param>
        </member>
        <member name="M:Gentle.Framework.GentleList.Persist">
            <summary>
            Recursively persist all objects in list. This method will do nothing for n:m relations.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleList.Persist(Gentle.Framework.Transaction)">
            <summary>
            Recursively persist all objects in list. This method will do nothing for n:m relations.
            </summary>
            <param name="transaction">The transaction within which to execute statements.</param>
        </member>
        <member name="T:Gentle.Framework.Key">
            <summary>
            The Key class is used to encapsulate sets of related key/value pairs, such as
            statement parameters, primary keys, etc.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:Gentle.Framework.Key.isPropertyKeys">
            <summary>
            This value is false when the key contains column names as indexers.
            </summary>
        </member>
        <member name="F:Gentle.Framework.Key.source">
            <summary>
            The type from which the key values have been gathered (null if not applicable)
            </summary>
        </member>
        <member name="F:Gentle.Framework.Key.tableName">
            <summary>
            The table name to use for queries made using the current key instance. When
            this value is null the default table name (from the TableName attribute) is used.
            </summary>
        </member>
        <member name="M:Gentle.Framework.Key.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Construct a new key instance.
            </summary>
            <param name="tableName">The name of the table used for queries made with this key</param>
            <param name="source">The type from which the contained key/value pairs originate. This 
            parameter is required for Gentle to be able to translate foreign keys into the proper
            column name for the type being selected. If it is null no name translations will take
            place.</param>
            <param name="isPropertyKeys">True if the keys index values are property names, false
            if they are column names.</param>
        </member>
        <member name="M:Gentle.Framework.Key.#ctor(System.Type,System.Boolean)">
            <summary>
            Construct a new key instance.
            </summary>
            <param name="source">The type from which the contained key/value pairs originate. This 
            parameter is required for Gentle to be able to translate foreign keys into the proper
            column name for the type being selected. If it is null no name translations will take
            place.</param>
            <param name="isPropertyKeys">True if the keys index values are property names, false
            if they are column names.</param>
        </member>
        <member name="M:Gentle.Framework.Key.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a new key instance.
            </summary>
            <param name="tableName">The name of the table used for queries made with this key</param>
            <param name="isPropertyKeys">True if the keys index values are property names, false
            if they are column names.</param>
        </member>
        <member name="M:Gentle.Framework.Key.#ctor(System.Boolean)">
            <summary>
            Construct a new key instance.
            </summary>
            <param name="isPropertyKeys">True if the keys index values are property names, false
            if they are column names.</param>
        </member>
        <member name="M:Gentle.Framework.Key.#ctor(System.String,System.Type,System.Boolean,System.String,System.Object)">
            <summary>
            Construct a new key instance and specify a single key/value pair to add.
            </summary>
            <param name="tableName">The name of the table used for queries made with this key</param>
            <param name="source">The type from which the contained key/value pairs originate. This 
            parameter is required for Gentle to be able to translate foreign keys into the proper
            column name for the type being selected. If it is null no name translations will take
            place.</param>
            <param name="isPropertyKeys">True if the keys index values are property names, false
            if they are column names.</param>
            <param name="name1">The name used as index for a value to be added to this key.</param>
            <param name="value1">The value to be added to this key.</param>
        </member>
        <member name="M:Gentle.Framework.Key.#ctor(System.Type,System.Boolean,System.String,System.Object)">
            <summary>
            Construct a new key instance and specify a single key/value pair to add.
            </summary>
            <param name="source">The type from which the contained key/value pairs originate. This 
            parameter is required for Gentle to be able to translate foreign keys into the proper
            column name for the type being selected. If it is null no name translations will take
            place.</param>
            <param name="isPropertyKeys">True if the keys index values are property names, false
            if they are column names.</param>
            <param name="name1">The name used as index for a value to be added to this key.</param>
            <param name="value1">The value to be added to this key.</param>
        </member>
        <member name="M:Gentle.Framework.Key.#ctor(System.Boolean,System.String,System.Object)">
            <summary>
            Construct a new key instance and specify a single key/value pair to add.
            </summary>
            <param name="isPropertyKeys">True if the keys index values are property names, false
            if they are column names.</param>
            <param name="name1">The name used as index for a value to be added to this key.</param>
            <param name="value1">The value to be added to this key.</param>
        </member>
        <member name="M:Gentle.Framework.Key.#ctor(System.String,System.Type,System.Boolean,System.String,System.Object,System.String,System.Object)">
            <summary>
            Construct a new key instance and specify two key/value pairs to add.
            </summary>
            <param name="tableName">The name of the table used for queries made with this key</param>
            <param name="source">The type from which the contained key/value pairs originate. This 
            parameter is required for Gentle to be able to translate foreign keys into the proper
            column name for the type being selected. If it is null no name translations will take
            place.</param>
            <param name="isPropertyKeys">True if the keys index values are property names, false
            if they are column names.</param>
            <param name="name1">The name used as index for the first value to be added to this key.</param>
            <param name="value1">The first value to be added to this key.</param>
            <param name="name2">The name used as index for the second value to be added to this key.</param>
            <param name="value2">The second value to be added to this key.</param>
        </member>
        <member name="M:Gentle.Framework.Key.#ctor(System.Type,System.Boolean,System.String,System.Object,System.String,System.Object)">
            <summary>
            Construct a new key instance and specify two key/value pairs to add.
            </summary>
            <param name="source">The type from which the contained key/value pairs originate. This 
            parameter is required for Gentle to be able to translate foreign keys into the proper
            column name for the type being selected. If it is null no name translations will take
            place.</param>
            <param name="isPropertyKeys">True if the keys index values are property names, false
            if they are column names.</param>
            <param name="name1">The name used as index for the first value to be added to this key.</param>
            <param name="value1">The first value to be added to this key.</param>
            <param name="name2">The name used as index for the second value to be added to this key.</param>
            <param name="value2">The second value to be added to this key.</param>
        </member>
        <member name="M:Gentle.Framework.Key.#ctor(System.Boolean,System.String,System.Object,System.String,System.Object)">
            <summary>
            Construct a new key instance and specify two key/value pairs to add.
            </summary>
            <param name="isPropertyKeys">True if the keys index values are property names, false
            if they are column names.</param>
            <param name="name1">The name used as index for the first value to be added to this key.</param>
            <param name="value1">The first value to be added to this key.</param>
            <param name="name2">The name used as index for the second value to be added to this key.</param>
            <param name="value2">The second value to be added to this key.</param>
        </member>
        <member name="M:Gentle.Framework.Key.Add(System.String,System.Object)">
            <summary>
            Add or update a value stored in the key.
            </summary>
            <param name="name">The name of the entry</param>
            <param name="value">The associated value</param>
        </member>
        <member name="P:Gentle.Framework.Key.Item(System.String)">
            <summary>
            Default property that allows us to use "key[ keyName ]" to access the keys
            </summary>
        </member>
        <member name="P:Gentle.Framework.Key.SourceType">
            <summary>
            The type from which the key values have been gathered (null if not applicable). If the
            object type being selected is different from the source type the contained keys are
            assumed to be foreign keys and translated to the target type before being applied as
            constraints.
            </summary>
        </member>
        <member name="P:Gentle.Framework.Key.TableName">
            <summary>
            Returns the table name associated with this key or null if none has been set. The
            table name specified on a key overrides the table name specified in the TableName
            attribute and thus allows dynamic mapping of objects to multiple tables.
            </summary>
        </member>
        <member name="M:Gentle.Framework.Key.IsPrimaryKeyFields(Gentle.Framework.ObjectMap,System.Boolean)">
            <summary>
            Returns a boolean value indicating whether the current key instance contains exactly
            the fields compromising the primary key fields of the given type. This is used to 
            determine whether a cached statement can be used (non-primary key select statements 
            are not cached).
            </summary>
            <param name="map">The ObjectMap describing a type and its table mapping.</param>
            <param name="ignoreConcurrencyColumn"></param>
            <returns>True if the key contains only and exactly the primary key fields of the 
            given type.</returns>
        </member>
        <member name="M:Gentle.Framework.Key.GetKey(Gentle.Framework.PersistenceBroker,Gentle.Framework.Key,System.Boolean,System.Object,System.String[])">
            <summary>
            Obtain a key for the specified object instance and property names. The returned
            key will contain the corresponding column names for the type, and thus foreign
            key columns must use identical naming for this to work.
            </summary>
            <param name="broker">The optional PersistenceBroker instance to use for obtaining the
            ObjectMap for the supplied object instance. If this parameter is null, Gentle will try
            to infer the broker from the object instance. If that fails, it will use the default
            provider.</param>
            <param name="key">An optional existing key to add the values to</param>
            <param name="isPropertyKeys">False is key indexers are column names, true for property names</param>
            <param name="instance">The object instance whose property values will be used</param>
            <param name="members">The names of the properties to include in the key</param>
            <returns>The key</returns>
        </member>
        <member name="M:Gentle.Framework.Key.GetKey(Gentle.Framework.Key,System.Boolean,System.Object,System.String[])">
            <summary>
            Obtain a key for the specified object instance and property names. The returned
            key will contain the corresponding column names for the type, and thus foreign
            key columns must use identical naming for this to work.
            </summary>
            <param name="key">An optional existing key to add the values to</param>
            <param name="isPropertyKeys">False is key indexers are column names, true for property names</param>
            <param name="instance">The object instance whose property values will be used</param>
            <param name="members">The names of the properties to include in the key</param>
            <returns>The key</returns>
        </member>
        <member name="M:Gentle.Framework.Key.GetKey(Gentle.Framework.PersistenceBroker,System.Boolean,System.Object,System.String[])">
            <summary>
            Obtain a new key for the specified object instance and property names. The returned
            key will contain the corresponding column names for the type, and thus foreign
            key columns must use identical naming for this to work.
            </summary>
            <param name="broker">The optional PersistenceBroker instance to use for obtaining the
            ObjectMap for the supplied object instance. If this parameter is null, Gentle will try
            to infer the broker from the object instance. If that fails, it will use the default
            provider.</param>
            <param name="isPropertyKeys">False is key indexers are column names, true for property names</param>
            <param name="instance">The object instance whose property values will be used</param>
            <param name="properties">The names of the properties to include in the key</param>
            <returns>The requested key</returns>
        </member>
        <member name="M:Gentle.Framework.Key.GetKey(System.Boolean,System.Object,System.String[])">
            <summary>
            Obtain a new key for the specified object instance and property names. The returned
            key will contain the corresponding column names for the type, and thus foreign
            key columns must use identical naming for this to work.
            </summary>
            <param name="isPropertyKeys">False is key indexers are column names, true for property names</param>
            <param name="instance">The object instance whose property values will be used</param>
            <param name="properties">The names of the properties to include in the key</param>
            <returns>The requested key</returns>
        </member>
        <member name="M:Gentle.Framework.Key.GetKey(Gentle.Framework.PersistenceBroker,Gentle.Framework.Key,System.Boolean,System.Object)">
            <summary>
            Obtain a new key for the specified object instance. The returned key will contain the
            primary keys of the given instance.
            </summary>
            <param name="broker">The optional PersistenceBroker instance to use for obtaining the
            ObjectMap for the supplied object instance. If this parameter is null, Gentle will try
            to infer the broker from the object instance. If that fails, it will use the default
            provider.</param>
            <param name="key">An optional existing key to add the values to</param>
            <param name="isPropertyKeys">False is key indexers are column names, true for property names</param>
            <param name="instance">The object instance whose property values will be used</param>
            <returns>A key instance containing the primary key values of the given object instance</returns>
        </member>
        <member name="M:Gentle.Framework.Key.GetKey(Gentle.Framework.Key,System.Boolean,System.Object)">
            <summary>
            Obtain a new key for the specified object instance. The returned key will contain the
            primary keys of the given instance.
            </summary>
            <param name="key">An optional existing key to add the values to</param>
            <param name="isPropertyKeys">False is key indexers are column names, true for property names</param>
            <param name="instance">The object instance whose property values will be used</param>
            <returns>A key instance containing the primary key values of the given object instance</returns>
        </member>
        <member name="M:Gentle.Framework.Key.GetKey(Gentle.Framework.PersistenceBroker,System.Boolean,System.Object)">
            <summary>
            Obtain a new key for the specified object instance. The returned key will contain the
            primary keys of the given instance.
            </summary>
            <param name="broker">The optional PersistenceBroker instance to use for obtaining the
            ObjectMap for the supplied object instance. If this parameter is null, Gentle will try
            to infer the broker from the object instance. If that fails, it will use the default
            provider.</param>
            <param name="isPropertyKeys">False is key indexers are column names, true for property names</param>
            <param name="instance">The object instance whose property values will be used</param>
            <returns>A key instance containing the primary key values of the given object instance</returns>
        </member>
        <member name="M:Gentle.Framework.Key.GetKey(System.Boolean,System.Object)">
            <summary>
            Obtain a new key for the specified object instance. The returned key will contain the
            primary keys of the given instance.
            </summary>
            <param name="isPropertyKeys">False is key indexers are column names, true for property names</param>
            <param name="instance">The object instance whose property values will be used</param>
            <returns>A key instance containing the primary key values of the given object instance</returns>
        </member>
        <member name="M:Gentle.Framework.Key.ToString">
            <summary>
            Calling this method returns the current key instance as a comma-separated list of key=value 
            pairs enclosed in a parenthesis.
            </summary>
            <returns>The string representation of this key</returns>
        </member>
        <member name="M:Gentle.Framework.Key.GetHashCode">
            <summary>
            Obtain the hashcode of this key instance. This is calculated as the sum of all 
            hashcodes of all keys and values.
            </summary>
            <returns>The hashcode of this Key instance</returns>
        </member>
        <member name="M:Gentle.Framework.Key.Equals(System.Object)">
            <summary>
            Compare this key instance to another object. 
            </summary>
            <param name="obj">The object to compare this instance to</param>
            <returns>True if the object passed is a Key instance with identical hashcode value</returns>
        </member>
        <member name="T:Gentle.Framework.Persistent">
            <summary>
            <p>This class is intended as a base class for new persistent business objects,
            in order to save the developer from as much work as possible. 
            As much of the IPersistent interface as possible should be provided by this class.</p>
            </summary>
        </member>
        <member name="M:Gentle.Framework.Persistent.#ctor">
            <summary>
            Use this constructor for new (unpersisted) instances.
            The default provider will be used to access the database.
            </summary>
        </member>
        <member name="M:Gentle.Framework.Persistent.#ctor(System.Boolean)">
            <summary>
            Use this constructor for both new and persisted instances. 
            The default provider will be used to access the database.
            </summary>
            <param name="isPersisted">A boolean to indicate whether this object has been persisted.</param>
        </member>
        <member name="M:Gentle.Framework.Persistent.#ctor(System.Boolean,Gentle.Framework.PersistenceBroker)">
            <summary>
            Use this This is the recommended constructor
            The supplied PersistenceBroker instance will be used to access the database.
            </summary>
            <param name="isPersisted">A boolean to indicate whether this object has been persisted.</param>
            <param name="broker">The PersistenceBroker to use for connecting to the database.</param>
        </member>
        <member name="P:Gentle.Framework.Persistent.IsPersisted">
            <summary>
            True if this object instance has been persisted to the database. Updates to
            properties of this instance since does not change the value of this property,
            whose sole purpose is to determine if the object needs to be inserted or updated.
            </summary>
        </member>
        <member name="P:Gentle.Framework.Persistent.ValidationMessages">
            <summary>
            Validation messages reported by the validation framework.
            </summary>
        </member>
        <member name="P:Gentle.Framework.Persistent.CacheKey">
            <summary>
            Construct a unique string identifying this instance (for caching purposes).
            </summary>
        </member>
        <member name="M:Gentle.Framework.Persistent.GetKey">
            <summary>
            Abstract method for subclasses to implement. It should return a <see cref="T:Gentle.Framework.Key"/> 
            instance containing all the primary key properties of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gentle.Framework.Persistent.Persist">
            <summary>
            Persist the current instance to the database.
            </summary>
        </member>
        <member name="M:Gentle.Framework.Persistent.Persist(Gentle.Framework.Transaction)">
            <summary>
            Persist the current instance to the database as part of the given transaction.
            </summary>
            <param name="transaction">The transaction in which to execute the operation.</param>
        </member>
        <member name="M:Gentle.Framework.Persistent.Remove">
            <summary>
            Remove the current instance from the database. 
            </summary>
        </member>
        <member name="M:Gentle.Framework.Persistent.Remove(Gentle.Framework.Transaction)">
            <summary>
            Remove the current instance from the database. 
            </summary>
            <param name="transaction">The transaction in which to execute the operation.</param>
        </member>
        <member name="M:Gentle.Framework.Persistent.Refresh">
            <summary>
            Refresh the current instance with the values from the database. This is
            effectively the same as creating a new instance using the key of the 
            current object and updating properties on the current object using the
            values from the retrieved object. This method has serious performance
            implications if used a lot and it should therefore be used sparingly.
            Use a static Retrieve method to fetch a new instance instead and save
            the overhead incurred by having to copy the property values.
            </summary>
        </member>
        <member name="M:Gentle.Framework.Persistent.Refresh(Gentle.Framework.Transaction)">
            <summary>
            Refresh the current instance with the values from the database. This is
            effectively the same as creating a new instance using the key of the 
            current object and updating properties on the current object using the
            values from the retrieved object. This method has serious performance
            implications if used a lot and it should therefore be used sparingly.
            Use a static Retrieve method to fetch a new instance instead and save
            the overhead incurred by having to copy the property values.
            </summary>
            <param name="transaction">The transaction in which to execute the operation.</param>
        </member>
        <member name="M:Gentle.Framework.Persistent.Retrieve(System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve the object of the specified type and identified by the given key.
            </summary>
            <param name="type">The type of the Persistent descendant</param>
            <param name="key">The key identifying the object</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.Persistent.Retrieve(Gentle.Framework.PersistenceBroker,System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve the object of the specified type and identified by the given key. This method will
            throw an exception if not exactly one row in the database matches.
            </summary>
            <param name="broker">The PersistenceBroker and associated provider used fetch the data</param>
            <param name="type">The type of the Persistent descendant</param>
            <param name="key">The key identifying the object</param>
            <returns>An object instance of the specified type</returns>
        </member>
        <member name="M:Gentle.Framework.Persistent.RetrieveList(System.Type)">
            <summary>
            Retrieve all objects of a certain type (plain select of all rows in a the
            table, i.e. a statement without any where-clause).
            </summary>
            <param name="type">The type of the Persistent descendant to retrieve</param>
            <returns>A collection of objects of the given type</returns>
        </member>
        <member name="M:Gentle.Framework.Persistent.RetrieveList(Gentle.Framework.PersistenceBroker,System.Type)">
            <summary>
            Retrieve all objects of a certain type (plain select of all rows in a the
            table, i.e. a statement without any where-clause).
            </summary>
            <param name="broker">The PersistenceBroker and associated provider used fetch the data</param>
            <param name="type">The type of the Persistent descendant to retrieve</param>
            <returns>A collection of objects of the given type</returns>
        </member>
        <member name="M:Gentle.Framework.Persistent.RetrieveList(System.Type,System.String[])">
            <summary>
            Retrieve a list of objects of the given type constrained by the properties of
            this object instance.
            </summary>
            <param name="type">The type of objects being retrieved</param>
            <param name="propertyNames">A list of property names on the current object</param>
            <returns>A collection of objects of the given type</returns>
        </member>
        <member name="T:Gentle.Framework.Operator">
            <summary>
            Enumeration of the comparison operators supported in SQL statements.
            </summary>
        </member>
        <member name="F:Gentle.Framework.Operator.Equals">
            <summary>
            This is the equals operator for strict equality comparisons. The framework automatically
            uses the correct syntax for null value comparisons.
            </summary>
        </member>
        <member name="F:Gentle.Framework.Operator.NotEquals">
            <summary>
            This is the negated equals operator. The framework automatically uses the correct syntax 
            for null value comparisons.
            </summary>
        </member>
        <member name="F:Gentle.Framework.Operator.Like">
            <summary>
            This is the equals operator for partial equality comparisons. The parameter value 
            should be a string to match with percent characters used as wildcards.
            </summary>
        </member>
        <member name="F:Gentle.Framework.Operator.NotLike">
            <summary>
            This is the negated equals operator for partial equality comparisons. The parameter value 
            should be a string to match with percent characters used as wildcards. 
            </summary>
        </member>
        <member name="F:Gentle.Framework.Operator.LessThan">
            <summary>
            This is the less than operator.
            </summary>
        </member>
        <member name="F:Gentle.Framework.Operator.LessThanOrEquals">
            <summary>
            This is the less than or equals operator.
            </summary>
        </member>
        <member name="F:Gentle.Framework.Operator.GreaterThan">
            <summary>
            This is the greater than operator.
            </summary>
        </member>
        <member name="F:Gentle.Framework.Operator.GreaterThanOrEquals">
            <summary>
            This is the greater than or equals operator.
            </summary>
        </member>
        <member name="F:Gentle.Framework.Operator.In">
            <summary>
            This is the in operator which tests for set membership. Constraints using Operator.In can 
            only be added by specifying a list of elements (though the lists may contain 0 or 1 elements). 
            For details, please refer to the corresponing SqlBuilder.AddConstraint methods. 
            </summary>
        </member>
        <member name="F:Gentle.Framework.Operator.NotIn">
            <summary>
            This is the negated in operator which tests for set non-membership.
            </summary>
        </member>
        <member name="T:Gentle.Framework.LogicalOperator">
            <summary>
            Enumeration of the logic operators supported in SQL statements. This LogicOperators can only be 
            used under with customConstraints. For details, please refer to the AddConstraint 
            method that accepts this as a parameter.
            </summary>
        </member>
        <member name="F:Gentle.Framework.LogicalOperator.And">
            <summary>
            This is the AND operator.
            </summary>
        </member>
        <member name="F:Gentle.Framework.LogicalOperator.Or">
            <summary>
            This is the OR operator
            </summary>
        </member>
        <member name="T:Gentle.Framework.SqlBuilder">
            <summary>
            	<p>This class can be used to construct instances of the <see cref="T:Gentle.Framework.SqlStatement"/> class. As such,
            its use is comparable to that of the <see cref="T:System.Text.StringBuilder"/> class.</p>
            	<p>Using this class it is easy to construct fairly complex queries for supported types (see
            <see cref="T:Gentle.Framework.TableNameAttribute"/>).</p>
            </summary>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.#ctor(Gentle.Framework.PersistenceBroker,Gentle.Framework.StatementType,System.Type)">
            <summary>
            Construct a new SqlBuilder instance for constructing a statement of the given type
            for the specified business class type.
            </summary>
            <param name="broker">The PersistenceBroker instance to use for database access.</param>
            <param name="stmtType">The type of SQL statement to construct</param>
            <param name="type">The object class to work on</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.#ctor(Gentle.Framework.PersistenceBroker,Gentle.Framework.StatementType,System.Type,Gentle.Framework.LogicalOperator)">
            <summary>
            Construct a new SqlBuilder instance for constructing a statement of the given type
            for the specified business class type.
            </summary>
            <param name="broker">The PersistenceBroker instance to use for database access.</param>
            <param name="stmtType">The type of SQL statement to construct</param>
            <param name="type">The object class to work on</param>
            <param name="logicalOperator">The logic operator used with constraints (can be either AND or OR)</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.#ctor(Gentle.Framework.IGentleProvider)">
            <summary>
            Construct a new SqlBuilder instance for constructing a statement of the given type.
            </summary>
            <param name="provider">The IGentleProvider used to obtain an SqlFactory</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.#ctor(Gentle.Framework.IGentleProvider,Gentle.Framework.StatementType)">
            <summary>
            Construct a new SqlBuilder instance for constructing a statement of the given type.
            </summary>
            <param name="provider">The IGentleProvider used to obtain an SqlFactory</param>
            <param name="stmtType">The type of SQL statement to construct</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.#ctor(Gentle.Framework.IGentleProvider,Gentle.Framework.StatementType,System.Type)">
            <summary> Construct a new SqlBuilder instance for constructing a statement of the 
            given type for the specified business class type.
            </summary> 
            <param name="provider">The IGentleProvider used to obtain an SqlFactory</param>
            <param name="stmtType">The type of SQL statement to construct</param>
            <param name="type">The object class to work on</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.#ctor(Gentle.Framework.IGentleProvider,Gentle.Framework.StatementType,System.Type,Gentle.Framework.LogicalOperator)">
            <summary>
            Construct a new SqlBuilder instance for constructing a statement of the given type
            for the specified business class type.
            </summary>
            <param name="provider">The IGentleProvider used to obtain an SqlFactory</param>
            <param name="stmtType">The type of SQL statement to construct</param>
            <param name="type">The object class to work on</param>
            <param name="logicalOperator">The logic operator used with constraints (can be either AND or OR)</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.SetStatementType(Gentle.Framework.StatementType)">
            <summary>
            Set the type of statement (select/insert/update/delete) to construct.
            </summary>
            <param name="stmtType"></param>
        </member>
        <member name="P:Gentle.Framework.SqlBuilder.ParameterPrefix">
            <summary>
            <p>The character or string used to prefix parameters in SQL statements.</p>
            <p>The value of this property varies between different persistence engines.</p>
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlBuilder.ParameterSuffix">
            <summary>
            <p>The character or string used to suffix parameters in SQL statements.</p>
            <p>The value of this property varies between different persistence engines.</p>
            </summary>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.GetIdentitySelect(System.String,Gentle.Framework.ObjectMap)">
            <summary>
            <p>Get the statement for retrieving last inserted row id for auto-generated id columns.</p>
            <p>The value of this property varies between different persistence engines.</p>
            </summary>
            <param name="sql"></param>
            <param name="om"></param>
            <returns></returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.SetTable(System.String)">
            <summary>
            Set the name of the table to operate on.
            </summary>
            <param name="name">The table name to use in the constructed query.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.SetTable(System.Type)">
            <summary>
            Set the name of the table to operate on from the TableName attribute of the given type.
            </summary>
            <param name="type">The type from which to extract the table name.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.SetRowLimit(System.Int32)">
            <summary>
            Set the maximum number of rows to return. This setting is only used with select statements.
            </summary>
            <param name="rowLimit">The maximum number of rows to return. If the value is 0 or less no
            restrictions will be applied.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.SetRowOffset(System.Int32)">
            <summary>
            Set the maximum number of rows to return. This setting is only used with select statements.
            </summary>
            <param name="rowOffset">The number of rows to skip. If the value is 0 or less no
            restrictions will be applied.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddOrderByField(System.Boolean,System.String)">
            <summary>
            Add a property by which the result should be sorted. Multiple fields can be added and will
            be used in the order they are given. 
            This setting is only used with select statements.
            </summary>
            <param name="isAscending">Specifies the sort order applied to the given field</param>
            <param name="fieldName">The name of the property by which to order the result</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddOrderByField(System.String)">
            <summary>
            Add a custom clause to the order by section of the SQL statement.
            </summary>
            <param name="orderClause">The clause to add to the order by section. Examples for
            this parameter might be "name ASC" or "COALESCE(NameDE, NameEN) ASC".</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddFields(System.Type)">
            <summary>
            Add all properties carrying the TableColumn attribute as fields (e.g. as selected columns
            for select statements).
            </summary>
            <param name="type">The type to process.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddKeyFields(System.Type,System.Boolean)">
            <summary>
            Add all properties carrying both the TableColumn and PrimaryKey attributes
            as either fields or parameters.
            </summary>
            <param name="type"></param>
            <param name="isParameter"></param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddConstraints(System.Type)">
            <summary>
            Add all properties carrying both the TableColumn and PrimaryKey attributes
            as constraint parameters.
            </summary>
            <param name="type">The type to process.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddConstraints(System.Type,System.Boolean)">
            <summary>
            Add all properties carrying both the TableColumn and PrimaryKey attributes
            as constraint parameters.
            </summary>
            <param name="type">The type to process.</param>
            <param name="isWithConcurrency">True if concurrency restrictions should be applied.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddConstraints(Gentle.Framework.Operator,System.Object[])">
            <summary>
            Add all specified constraint parameters. The fields array must contain pairs
            consisting of a field name and its type. 
            </summary>
            <param name="op">The operator used in the constraint</param>
            <param name="fields">The fields to constrain on. Property names are preferred but
            column names can alse be used.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddConstraint(Gentle.Framework.Operator,System.String,System.Object)">
            <summary>
            Add a single fixed constraint with the given value and operator.
            Case insensitive on the LIKE operator.
            </summary>
            <param name="op">The operator used in the constraint</param>
            <param name="field">The field to constrain on. Property names are preferred but
            column names can alse be used.</param>
            <param name="value">The value used in the constraint</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddConstraint(Gentle.Framework.Operator,System.String,System.Object,System.Boolean)">
            <summary>
            Add a single fixed constraint with the given value and operator.
            </summary>
            <param name="op">The operator used in the constraint</param>
            <param name="field">The field to constrain on. Property names are preferred but
            column names can alse be used.</param>
            <param name="value">The value used in the constraint</param>
            <param name="isCaseSensitive">The indicator for setting the LIKE operator case sensitive</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddConstraint(Gentle.Framework.Operator,Gentle.Framework.FieldMap,System.Collections.ICollection,Gentle.Framework.FieldMap)">
            <summary>
            This method is for adding set membership constraints using either Operator.In or
            Operator.NotIn. If an invalid operator is used this method will throw an exception.
            </summary>
            <param name="op">The operator used for this constraint.</param>
            <param name="fieldMap">The FieldMap instance for the field to constrain. The framework 
            assumes property names but
            also checks column names if no property could be found.</param>
            <param name="data">The set of data to constrain on.</param>
            <param name="constraintMap">If the constraint data set holds objects this is the property
            name to gather from all objects. If the data set is an SqlResult this is the column name
            to use from all rows. String-type fields are quoted, all other types are not. This method
            performs no additional type checking and is likely to fail (when the statement is executed)
            for esoteric types such as decimals or dates.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddConstraint(Gentle.Framework.Operator,System.String,System.Collections.ICollection,System.String)">
            <summary>
            This method is for adding set membership constraints using either Operator.In or
            Operator.NotIn. If an invalid operator is used this method will throw an exception.
            </summary>
            <param name="op">The operator used for this constraint.</param>
            <param name="field">The name of the field to constrain. Gentle assumes a property name
            is specified but also checks for column names if no property matched.</param>
            <param name="data">The set of data to use in the constraint.</param>
            <param name="constraintField">If the constraint data set holds objects this is the property
            name whose values will be gathered from all objects. If null is passed the data collection
            is treated as list of plain values.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddConstraint(Gentle.Framework.Operator,System.String,Gentle.Framework.SqlResult,System.String)">
            <summary>
            This method is for adding set membership constraints using either Operator.In or
            Operator.NotIn. If an invalid operator is used this method will throw an exception.
            </summary>
            <param name="op">The operator used for this constraint.</param>
            <param name="field">The field to constrain. The framework assumes property names but
            also checks column names if no property could be found.</param>
            <param name="sr">The SqlResult containing the data used to constrain the field.</param>
            <param name="constraintField">This is the column name to use from all rows in the SqlResult. 
            String-type fields are quoted, all other types are not. This method performs no additional 
            type checking and is likely to fail (when the statement is executed) for esoteric types 
            such as decimals or dates.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddConstraint(Gentle.Framework.Operator,System.String,Gentle.Framework.SqlResult)">
            <summary>
            This method is for adding set membership constraints using either Operator.In or
            Operator.NotIn. If an invalid operator is used this method will throw an exception.
            </summary>
            <param name="op">The operator used for this constraint.</param>
            <param name="field">The field to constrain. The framework assumes property names but
            also checks column names if no property could be found.</param>
            <param name="sr">The SqlResult containing the data used to constrain the field. The
            SqlResult must either contain only one column or contain a column named as the field
            parameter.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddConstraint(System.String)">
            <summary>
            Add a custom constraint as a single specified constraint clause. Use this for
            subselects or other "complicated" constraints (unfortunately, these cannot be 
            parameterized at the moment). This method will use the logicOperator, therefore
            if you have used a <see cref="T:Gentle.Framework.LogicalOperator"/> it will be used here.
            </summary>
            <param name="clause">A valid constraint clause.</param>
            <example>AddConstraint( "SUM(MemberCount) > 5" )</example>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AsOperatorBegin(Gentle.Framework.Operator,System.Boolean)">
            <summary>
            Produce the actual SQL string for the specified <see cref="T:Gentle.Framework.Operator"/>. This is the part
            of the SQL string between the column name and the parameter value.
            </summary>
            <param name="op">The operator to convert to SQL</param>
            <param name="isValueNull">This parameter indicates whether the value of the parameter is null. This
            is required because different operators must be used for null equality checls.</param>
            <returns>The SQL string for the specified operator</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AsOperatorEnd(Gentle.Framework.Operator)">
            <summary>
            Produce the actual SQL string for the specified <see cref="T:Gentle.Framework.Operator"/>. This is the part
            of the SQL string after the parameter value. This string is usually empty.
            </summary>
            <param name="op">The operator to convert to SQL</param>
            <returns>The SQL string for the specified operator</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AsCommaList(System.Collections.ICollection)">
            <summary>
            This method will convert a list of field names into a comma delimited string of 
            unquoted field names.
            </summary>
            <param name="fields">The fields to delimit.</param>
            <returns>The comma delimited field list.</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AsCommaList(System.Collections.ICollection,System.Boolean)">
            <summary>
            This method will convert a list of field names into a comma delimited string of 
            field names. Quoting of the individual fields is optional.
            </summary>
            <param name="fields">The fields to delimit.</param>
            <param name="quoteFields">Whether to apply quotes around the fields.</param>
            <returns>The coma delimited field list.</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.GetTopLimit">
            <summary>
            This method returns the SQL string for restricting the number of rows if a limit
            has been specified and the empty string otherwise. 
            </summary>
            <returns>A fragment for use in an sql statement.</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.GetRowLimit">
            <summary>
            This method returns the SQL string for restricting the number of rows if a limit
            has been specified and the empty string otherwise. 
            </summary>
            <returns>A fragment for use in an sql statement.</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.GetRowOffset">
            <summary>
            This method returns the SQL string for skipping past a number of rows. This is useful
            in combination with RowLimit for paging of data. 
            </summary>
            <returns>A fragment for use in an sql statement.</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.GetTableName(System.String)">
            <summary>
            Formats the given table name for use in queries. This may include prefixing
            it with a schema name or suffixing it with an alias (for multi-table selects).
            </summary>
            <param name="tableName">The table name to format</param>
            <returns>The formatted table name</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AsFieldUpdateList">
            <summary>
            This method will format a list of fields for use in an update statement.
            </summary>
            <returns>A fragment for use in an sql statement.</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AsParameterList(System.Collections.ICollection)">
            <summary>
            This method will format a list of fields as parameters for use in an sql statement.
            </summary>
            <param name="fields">The fields that are being updated.</param>
            <returns>A fragment for use in an sql statement.</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AsParameter(System.String)">
            <summary>
            This method will format a single field name as a parameter for use in an sql statement.
            </summary>
            <param name="name">The parameter name.</param>
            <returns>A fragment for use in an sql statement.</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.GetConstraints">
            <summary>
            This method aggregates all the constraints specified previously by calls to the
            SqlBuilder.AddConstraint methods.
            </summary>
            <returns>A fragment for use in an sql statement.</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.GetOrderBy">
            <summary>
            This method returns the "order by" clause formatted for use in SQL queries.
            </summary>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.Format(System.String,System.Object[])">
            <summary>
            This method formats a string and is merely a shortcut ro the String.Format method.
            </summary>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddParameter(System.String,Gentle.Framework.FieldMap)">
            <summary>
            Add a parameter to the current statement.
            </summary>
            <param name="name">The parameter name to use if not the column name defined in the FieldMap</param>
            <param name="fm">The FieldMap describing this parameter</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddParameter(System.String,System.Type)">
            <summary>
            Add a parameter to the current statement.
            </summary>
            <param name="name">The name of this parameter.</param>
            <param name="type">The system type of this parameter.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.AddParameter(System.String,System.Int64)">
            <summary>
            Add a parameter to the current statement.
            </summary>
            <param name="name">The name of this parameter.</param>
            <param name="dbType">The database type of this parameter.</param>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.ToString">
            <summary>
            Construct and emit the SQL string represented by this instance. Note that this method
            will convert any double spaces into a single space (this also affects non-parameterized
            query parameters embedded in the SQL string). 
            </summary>
            <returns>The SQL string which would be in the generated <see cref="T:Gentle.Framework.SqlStatement"/> class.</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.GetStatementExplicit">
            <summary>
            Construct an SqlStatement object using the current state of this SqlBuilder instance.
            This method is different from the other GetStatement methods in that it does not add
            any fields to select or perform any other magic behind the scenes.
            </summary>
            <returns>An executable SQL statement object</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.GetStatement(Gentle.Framework.StatementType,System.Type)">
            <summary>
            Build a persistence engine specific SQL statement for the given type.
            </summary>
            <param name="stmtType">Type of statement to produce (select/insert/update/delete)</param>
            <param name="type">The object class/type</param>
            <returns>An executable SQL statement object</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.GetStatement(System.Boolean)">
            <summary>
            Build a persistence engine specific SQL statement. The object class and statement type must
            have been set prior to calling this method.
            </summary>
            <param name="isCollection">For select statements, whether to return a list of items. If this
            value is true the primary key field(s) will be used as constraint in the query (if it is
            false, no constraints are automatically added by Gentle).</param>
            <returns>An executable SQL statement object</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.GetStatement">
            <summary>
            Build a persistence engine specific SQL statement. The object class and statement type must
            have been set prior to calling this method. When used with a select statement this method
            assumes that your are selecting multiple objects and will not apply any constraints (aside
            from those manually added).
            </summary>
            <returns>An executable SQL statement object</returns>
        </member>
        <member name="M:Gentle.Framework.SqlBuilder.GetStatement(Gentle.Framework.StatementType,System.String,System.Type,System.Boolean)">
            <summary>
            Build a persistence engine specific SQL statement for the given object class, using the
            class name as table name and properties for columns.
            </summary>
            <param name="stmtType">Type of statement to produce (select/insert/update/delete)</param>
            <param name="tableName">The table name to use in the constructed query or null to use 
            the table name associated with the type</param>
            <param name="type">The object class/type</param>
            <param name="isCollection">For select statements, whether to return a list of items</param>
            <returns>An executable SQL statement object</returns>
        </member>
        <member name="T:Gentle.Framework.SqlResult">
            <summary>
            The SqlResult class serves as a multi-purpose encapsulation of query results, 
            including access to error codes and information on sql errors, query info 
            (rows affected/returned), and similar information.
            </summary>
            <remarks>
            <p>Use the <see cref="T:Gentle.Framework.ObjectFactory"/> class to construct instances of objects
            or create lists of identical objects from an instance of this class.</p>
            <p>The <see cref="T:Gentle.Framework.Broker"/> class contains convenience methods for bypassing
            the manual call to the <see cref="T:Gentle.Framework.ObjectFactory"/> and is able to return the
            object directly.</p>
            </remarks>
        </member>
        <member name="M:Gentle.Framework.SqlResult.#ctor(Gentle.Framework.PersistenceBroker,System.Int32,Gentle.Framework.SqlStatement)">
            <summary>
            Constructor for ExecuteNonQuery results.
            </summary>
            <param name="broker">The PersistenceBroker instance to use for database access.</param>
            <param name="rowsAffected">The number of rows affected by the query</param>
            <param name="stmt">The SqlStatement leading to this SqlResult</param>
        </member>
        <member name="M:Gentle.Framework.SqlResult.#ctor(Gentle.Framework.PersistenceBroker,System.Exception)">
            <summary>
            Constructor for error conditions.
            </summary>
            <param name="broker">The PersistenceBroker instance to use for database access.</param>
            <param name="error">The exception raised by the .NET framework</param>
        </member>
        <member name="M:Gentle.Framework.SqlResult.#ctor(Gentle.Framework.PersistenceBroker,System.Object,Gentle.Framework.SqlStatement)">
            <summary>
            Constructor for ExecuteScalar results.
            </summary>
            <param name="broker">The PersistenceBroker instance to use for database access.</param>
            <param name="retval">The object returned by the .NET database provider.</param>
            <param name="stmt">The SqlStatement leading to this SqlResult</param>
        </member>
        <member name="M:Gentle.Framework.SqlResult.#ctor(Gentle.Framework.PersistenceBroker,System.Data.IDataReader,Gentle.Framework.SqlStatement)">
            <summary>
            Constructor that reads and encapsulates results from the data reader. The maximum
            number of rows to retrieve is obtained from the SqlStatement parameter.
            </summary>
            <param name="broker">The PersistenceBroker instance to use for database access.</param>
            <param name="dr">The DataReader instance to read from</param>
            <param name="stmt">The SqlStatement leading to this SqlResult</param>
        </member>
        <member name="P:Gentle.Framework.SqlResult.ErrorCode">
            <summary>
            <p>The error code returned by the RDBMS from execution the query.</p>
            <p>TODO: These codes need to be standardised - in its current state only the error
            code 0 for success is guaranteed. All other error codes are vendor specific.</p>
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlResult.Error">
            <summary>
            The exception raised (or null if none) while trying to execute a query. This may be
            anything raised by the data provider or a <see cref="T:Gentle.Common.GentleException"/> instance
            if raised by the framework.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlResult.ErrorMessage">
            <summary>
            The error message of the exception (in case one was raised, empty otherwise).
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlResult.RowsContained">
            <summary>
            Returns the number of rows contained in this instance.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlResult.RowsAffected">
            <summary>
            Returns the number of rows affected by the last query, when applicable.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlResult.LastRowId">
            <summary>
            Returns the row identity generated by the database for the insert query, or
            0 if no identity was generated.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlResult.Count">
            <summary>
            Returns the number of rows selected in a Count statement or 0 otherwise.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlResult.ColumnNames">
            <summary>
            Returns an array of column names contained in the result rows. This property
            is somewhat inaptly named RowNames and might be renamed in the future.
            </summary>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetColumnIndex(System.String)">
            <summary>
            Returns the index of the given column name in the result set rows.
            </summary>
            <param name="columnName"></param>
            <returns>The column index or -1 if not present</returns>
        </member>
        <member name="P:Gentle.Framework.SqlResult.Statement">
            <summary>
            Returns the SqlStatement leading to this SqlResult for select statements only and 
            null otherwise.
            </summary>
        </member>
        <member name="M:Gentle.Framework.SqlResult.TransposeToFieldList(System.String,System.Boolean)">
            <summary>
            This method will convert the current result set into an array of values by picking the
            specified column from all rows in the result set. This is intended to be used in 
            subselects (i.e. the SqlBuilder class and the Operator.In method). 
            </summary>
            <param name="columnName">The column whose values to include in the list</param>
            <param name="includeNullValues">If true null values will be included in the result</param>
            <returns>An array of values</returns>
        </member>
        <member name="P:Gentle.Framework.SqlResult.Rows">
            <summary>
            Returns an array of the result rows contained in this instance.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlResult.Item(System.Int32)">
            <summary>
            Returns a single specific row from the rows contained in this instance.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlResult.Item(System.Int32,System.Int32)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlResult.Item(System.Int32,System.String)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetString(System.Int32,System.String)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="column">The name of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetString(System.Int32,System.Int32)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="columnIndex">The index of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetBoolean(System.Int32,System.String)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="column">The name of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetBoolean(System.Int32,System.Int32)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="columnIndex">The index of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetDateTime(System.Int32,System.String)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="column">The name of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetDateTime(System.Int32,System.Int32)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="columnIndex">The index of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetInt(System.Int32,System.String)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="column">The name of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetInt(System.Int32,System.Int32)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="columnIndex">The index of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetLong(System.Int32,System.String)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="column">The name of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetLong(System.Int32,System.Int32)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="columnIndex">The index of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetDouble(System.Int32,System.String)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="column">The name of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetDouble(System.Int32,System.Int32)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="columnIndex">The index of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetDecimal(System.Int32,System.String)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="column">The name of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetDecimal(System.Int32,System.Int32)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="columnIndex">The index of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetObject(System.Int32,System.String)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="column">The name of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="M:Gentle.Framework.SqlResult.GetObject(System.Int32,System.Int32)">
            <summary>
            Returns a single specific column value from the specified row.
            </summary>
            <param name="rowIndex">The index of the row from which to get the value</param>
            <param name="columnIndex">The index of the column</param>
            <returns>The value of the given cell</returns>
        </member>
        <member name="T:Gentle.Framework.SqlStatement">
            <summary>
            Encapsulation of a database-specific SQL statement.
            </summary>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.GetStatementType(System.String)">
            <summary>
            Determine the statement type of the supplied SQL statement by checking the first
            3 characters of the string.
            </summary>
            <param name="sql">The SQL statement</param>
            <returns>The <see cref="P:Gentle.Framework.SqlStatement.StatementType"/> of the statement</returns>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.#ctor(Gentle.Framework.StatementType,System.Data.IDbCommand,System.String)">
            <summary>
            Construct a new SqlStatement instance of the specified type. The command object to be used
            for executing the query and the fully specified sql query string must be specified.  
            </summary>
            <param name="stmtType">The type of this statement.</param>
            <param name="cmd">The command object to use when executing the query.</param>
            <param name="sql">The fully specified sql query string.</param>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.#ctor(Gentle.Framework.PersistenceBroker,Gentle.Framework.StatementType,System.Data.IDbCommand,System.String)">
            <summary>
            Construct a new SqlStatement instance of the specified type. The command object to be used
            for executing the query and the fully specified sql query string must be specified.  
            </summary>
            <param name="broker">The PersistenceBroker instance to use for database access.</param>
            <param name="stmtType">The type of this statement.</param>
            <param name="cmd">The command object to use when executing the query.</param>
            <param name="sql">The fully specified sql query string.</param>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.#ctor(Gentle.Framework.StatementType,System.Data.IDbCommand,System.String,System.Int32,System.Int32)">
            <summary>
            Construct a new SqlStatement instance of the specified type. The command object to be used
            for executing the query and the fully specified sql query string must be specified.  
            </summary>
            <param name="stmtType">The type of this statement.</param>
            <param name="cmd">The command object to use when executing the query.</param>
            <param name="sql">The fully specified sql query string.</param>
            <param name="rowLimit">The maximum number of rows to be returned by this query 
            or 0 for no limit.</param>
            <param name="rowOffset">The number of rows to be skipped by this statement. Note that
            for SQL Server this is applied after execution, whereas for other databases it is 
            embedded in the SQL string.</param>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.#ctor(Gentle.Framework.PersistenceBroker,Gentle.Framework.StatementType,System.Data.IDbCommand,System.String,System.Int32,System.Int32)">
            <summary>
            Construct a new SqlStatement instance of the specified type. The command object to be used
            for executing the query and the fully specified sql query string must be specified.  
            </summary>
            <param name="broker">The PersistenceBroker instance to use for database access.</param>
            <param name="stmtType">The type of this statement.</param>
            <param name="cmd">The command object to use when executing the query.</param>
            <param name="sql">The fully specified sql query string.</param>
            <param name="rowLimit">The maximum number of rows to be returned by this query 
            or 0 for no limit.</param>
            <param name="rowOffset">The number of rows to be skipped by this statement. Note that
            for SQL Server this is applied after execution, whereas for other databases it is 
            embedded in the SQL string.</param>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.#ctor(Gentle.Framework.StatementType,System.Data.IDbCommand,System.String,System.Type)">
            <summary>
            Construct a new SqlStatement instance of the specified type. The command object to be used
            for executing the query and the fully specified sql query string must be specified.  
            </summary>
            <param name="stmtType">The type of this statement.</param>
            <param name="cmd">The command object to use when executing the query.</param>
            <param name="sql">The fully specified sql query string.</param>
            <param name="type">The type of object being selected by this query or null if 
            not applicable.</param>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.#ctor(Gentle.Framework.PersistenceBroker,Gentle.Framework.StatementType,System.Data.IDbCommand,System.String,System.Type)">
            <summary>
            Construct a new SqlStatement instance of the specified type. The command object to be used
            for executing the query and the fully specified sql query string must be specified.  
            </summary>
            <param name="broker">The PersistenceBroker instance to use for database access.</param>
            <param name="stmtType">The type of this statement.</param>
            <param name="cmd">The command object to use when executing the query.</param>
            <param name="sql">The fully specified sql query string.</param>
            <param name="type">The type of object being selected by this query or null if 
            not applicable.</param>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.#ctor(Gentle.Framework.StatementType,System.Data.IDbCommand,System.String,System.Type,System.Int32,System.Int32)">
            <summary>
            Construct a new SqlStatement instance of the specified type. The command object to be used
            for executing the query and the fully specified sql query string must be specified.  
            </summary>
            <param name="stmtType">The type of this statement.</param>
            <param name="cmd">The command object to use when executing the query.</param>
            <param name="sql">The fully specified sql query string.</param>
            <param name="type">The type of object being selected by this query or null if 
            not applicable.</param>
            <param name="rowLimit">The maximum number of rows to be returned by this query 
            or 0 for no limit.</param>
            <param name="rowOffset">The number of rows to be skipped by this statement. Note that
            for SQL Server this is applied after execution, whereas for other databases it is 
            embedded in the SQL string.</param>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.#ctor(Gentle.Framework.PersistenceBroker,Gentle.Framework.StatementType,System.Data.IDbCommand,System.String,System.Type,System.Int32,System.Int32)">
            <summary>
            Construct a new SqlStatement instance of the specified type. The command object to be used
            for executing the query and the fully specified sql query string must be specified.  
            </summary>
            <param name="broker">The PersistenceBroker instance to use for database access.</param>
            <param name="stmtType">The type of this statement.</param>
            <param name="cmd">The command object to use when executing the query.</param>
            <param name="sql">The fully specified sql query string.</param>
            <param name="type">The type of object being selected by this query or null if 
            not applicable.</param>
            <param name="rowLimit">The maximum number of rows to be returned by this query 
            or 0 for no limit.</param>
            <param name="rowOffset">The number of rows to be skipped by this statement. Note that
            for SQL Server this is applied after execution, whereas for other databases it is 
            embedded in the SQL string.</param>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.GetParameterValue(System.Object,Gentle.Framework.ObjectMap,Gentle.Framework.FieldMap,Gentle.Framework.StatementType)">
            <summary>
            TODO FIXME 
            This method breaks use of multiple brokers, as it is static and references Broker (and thus DefaultProvider).
            </summary>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.SetParameter(System.String,System.Object)">
            <summary>
            Update a specific named parameter with the given value. 
            </summary>
            <param name="paramName">The parameter whose value to set</param>
            <param name="paramValue">The value being assigned to the parameter</param>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.SetParameters(Gentle.Framework.Key,System.Boolean)">
            <summary>
            <p>Update the statement parameter values using the values from the key.</p>
            <p>Warning! This will erase all parameter values not in the key, so if you
            need to set additional parameters be sure to call this method before
            any calls to SetParameter.</p>
            </summary>
            <param name="key">The key instance containing the parameter values.</param>
            <param name="isUpdateAll">If true all statement parameters will be updated. If the
            key has no value a null value will be assigned.</param>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.SetParameters(System.Object,System.Boolean)">
            <summary>
            Update statement parameter values using the public properties of the source object.
            This method simply gathers all public properties of the given object into a key and
            calls the SetParameters method with the generated key and a boolean
            value of false to indicate that parameters not in the key are to be left alone.
            </summary>
            <param name="source">The object from which to pull parameter values</param>
            <param name="isUpdateAll">If true all statement parameters will be updated. If the
            key has no value a null value will be assigned.</param>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.SetProperties(System.Object,Gentle.Framework.SqlResult)">
            <summary>
            Update the property values of the supplied object instance with the values of the first
            row of the rows contained in the supplied SqlResult.
            </summary>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.Execute(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Execute the current instance using the supplied database connection and return
            the result of the operation as an instance of the <see cref="T:Gentle.Framework.SqlResult"/> class.
            </summary>
            <param name="conn">The database connection to use for executing this statement.</param>
            <param name="tr">The transaction instance to run this statement in. If there is no
            transaction context then this parameter should be null. This will cause the 
            connection to be closed after execution.</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.Execute">
            <summary>
            Convenience method for executing statements without using the <see cref="T:Gentle.Framework.Broker"/> class. 
            </summary>
            <returns>The SqlResult containing the result of the operation</returns>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.Prepare">
            <summary>
            Prepare the statement against the database. Useful if you will be reusing the statement 
            for multiple queries.
            </summary>
        </member>
        <member name="M:Gentle.Framework.SqlStatement.Page(System.Int32)">
            <summary>
            Return the specified result set page. Beware of the fact that page indexes are 1-based.
            </summary>
            <param name="page">The page number to fetch. Use a value of 1 to obtain the first page.</param>
            <returns>A new SqlResult instance with any matching rows</returns>
        </member>
        <member name="P:Gentle.Framework.SqlStatement.Command">
            <summary>
            The command object used by this instance.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlStatement.StatementType">
            <summary>
            The statement type of this instance.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlStatement.Type">
            <summary>
            The type being selected by this instance or null if no type is being selected.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlStatement.Sql">
            <summary>
            The query string this statement encapsulates.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlStatement.RowLimit">
            <summary>
            The maximum number of rows returned by executing this statement or 0 if no limit applies.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlStatement.RowOffset">
            <summary>
            The maximum number of rows returned by executing this statement or 0 if no limit applies.
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlStatement.CacheKey">
            <summary>
            Construct a unique string identifying this statement instance (for caching purposes).
            </summary>
        </member>
        <member name="P:Gentle.Framework.SqlStatement.IsLoggingEnabled">
            <summary>
            Check whether statement execution logging is on for the current instance.
            </summary>
        </member>
        <member name="T:Gentle.Framework.Transaction">
            <summary>
            Class to encapsulate persistent objects participating in a transaction. Use this object
            if you need transaction protection for updating multiple objects.
            </summary>
        </member>
        <member name="M:Gentle.Framework.Transaction.#ctor">
            <summary>
            Create a new transaction object. Use this to execute tasks in a transaction
            using the default database provider.
            </summary>
        </member>
        <member name="M:Gentle.Framework.Transaction.#ctor(Gentle.Framework.PersistenceBroker)">
            <summary>
            Create a new transaction object. Use this to execute tasks in a transaction
            using the specified PersistenceBroker and associated database provider.
            </summary>
        </member>
        <member name="M:Gentle.Framework.Transaction.Initialize">
            <summary>
            Initialize connection and transaction objects.
            </summary>
        </member>
        <member name="P:Gentle.Framework.Transaction.IsInitialized">
            <summary>
            True when underlying connection and transaction object references exist. When this
            property is true, clients must remember to call either Commit or Rollback to 
            release the resources used.
            </summary>
        </member>
        <member name="M:Gentle.Framework.Transaction.Execute(Gentle.Framework.SqlStatement)">
            <summary>
            Execute a custom statement in this transaction.
            </summary>
            <param name="stmt">The SqlStatement to add</param>
        </member>
        <member name="M:Gentle.Framework.Transaction.Persist(Gentle.Framework.IEntity)">
            <summary>
            Persist the given IPersistance instance in this transaction.
            </summary>
            <param name="entity">The object to persist</param>
        </member>
        <member name="M:Gentle.Framework.Transaction.Insert(System.Object)">
            <summary>
            Insert the given object instance in this transaction.
            </summary>
            <param name="entity">The object to insert</param>
        </member>
        <member name="M:Gentle.Framework.Transaction.Update(System.Object)">
            <summary>
            Update the given object instance in this transaction.
            </summary>
            <param name="entity">The object to update</param>
        </member>
        <member name="M:Gentle.Framework.Transaction.Remove(System.Object)">
            <summary>
            Remove the given object instance in this transaction.
            </summary>
            <param name="entity">The object to remove</param>
        </member>
        <member name="M:Gentle.Framework.Transaction.Remove(System.Type,Gentle.Framework.Key)">
            <summary>
            Remove the object given its type and a key.
            </summary>
            <param name="type">The type of object</param>
            <param name="key">The key indentifying the object</param>
        </member>
        <member name="M:Gentle.Framework.Transaction.Remove``1(Gentle.Framework.Key)">
            <summary>
            Remove the object given its type and a key.
            </summary>
            <typeparam name="T">The type of objects to create</typeparam>
            <param name="key">The key indentifying the object</param>
        </member>
        <member name="M:Gentle.Framework.Transaction.Refresh(System.Object)">
            <summary>
            Refresh the current instance with the values from the database. This is
            effectively the same as creating a new instance using the key of the 
            current object and updating properties on the current object using the
            values from the retrieved object. This method has serious performance
            implications if used a lot and it should therefore be used sparingly.
            Use a static Retrieve method to fetch a new instance instead and save
            the overhead incurred by having to copy the property values.
            </summary>
        </member>
        <member name="M:Gentle.Framework.Transaction.RetrieveInstance(System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve an instance of the specified type in this transaction.
            </summary>
        </member>
        <member name="M:Gentle.Framework.Transaction.RetrieveInstance``1(Gentle.Framework.Key)">
            <summary>
            Retrieve an instance of the specified type in this transaction.
            </summary>
            <typeparam name="T">The type of objects to create</typeparam>
        </member>
        <member name="M:Gentle.Framework.Transaction.RetrieveList(System.Type,Gentle.Framework.Key,System.Collections.IList)">
            <summary>
            Retrieve multiple instances of the given type in this transaction. The retrieved 
            rows are limited by the fields and values specified in the given <see cref="T:Gentle.Framework.Key"/> 
            instance.
            </summary>
            <param name="type">The type of objects to create</param>
            <param name="key">The key of the objects to retrieve</param>
            <param name="result">An optional existing container in which to store the created 
            objects. If this parameter is null a new IList instance will be created.</param>
            <returns>An array containing the created object instances</returns>
        </member>
        <member name="M:Gentle.Framework.Transaction.RetrieveList``1(Gentle.Framework.Key,System.Collections.Generic.IList{``0})">
            <summary>
            Retrieve multiple instances of the given type in this transaction. The retrieved 
            rows are limited by the fields and values specified in the given <see cref="T:Gentle.Framework.Key"/> 
            instance.
            </summary>
            <typeparam name="T">The type of objects to create</typeparam>
            <param name="key">The key of the objects to retrieve</param>
            <param name="result">An optional existing container in which to store the created 
            objects. If this parameter is null a new IList instance will be created.</param>
            <returns>An array containing the created object instances</returns>
        </member>
        <member name="M:Gentle.Framework.Transaction.Commit">
            <summary>
            Commit this transaction. 
            </summary>
        </member>
        <member name="M:Gentle.Framework.Transaction.Rollback">
            <summary>
            Rollback this transaction.
            </summary>
        </member>
        <member name="T:Gentle.Framework.ValidateEventHandler">
            <summary>
            Validate event handler
            </summary>
        </member>
        <member name="T:Gentle.Framework.TypedArrayItemBase">
            <summary>
            Typed array item base class that implements IBindable and takes care
            of save and restore the original values for the parent object
            </summary>
        </member>
        <member name="M:Gentle.Framework.TypedArrayItemBase.#ctor">
            <summary>
            Default constructor that marks the object as new.
            A parent should set the IsNew to false for a loaded record
            </summary>
        </member>
        <member name="E:Gentle.Framework.TypedArrayItemBase.ValidateObject">
            <summary>
            Validation event that the user can implement if they need to validate the
            object before completing an edit.  An exception should be thrown if error
            </summary>
        </member>
        <member name="M:Gentle.Framework.TypedArrayItemBase.OnValidate">
            <summary>
            The validate method for ensuring the object is well formed
            </summary>
        </member>
        <member name="M:Gentle.Framework.TypedArrayItemBase.AnalyseObjectType">
            <summary>
            Store a list of all property methods of the type stored in the ArrayList. 
            </summary>
            <remarks>
            The list is used by the <see cref="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])"/>.
            Because using Reflection is time consuming the property methods are reflected once
            while constructing an object of the TypedArrayList class.
            </remarks>
        </member>
        <member name="P:Gentle.Framework.TypedArrayItemBase.IsNew">
            <summary>
            The is new property is set by the parent
            </summary>
        </member>
        <member name="P:Gentle.Framework.TypedArrayItemBase.IsDirty">
            <summary>
            Indicates if the object has been modified
            </summary>
        </member>
        <member name="P:Gentle.Framework.TypedArrayItemBase.IsBeingEdited">
            <summary>
            Property to return if the object is currently being edited
            </summary>
        </member>
        <member name="E:Gentle.Framework.TypedArrayItemBase.RemoveObject">
            <summary>
            The remove object event to call back into the TypedArrayList
            </summary>
        </member>
        <member name="M:Gentle.Framework.TypedArrayItemBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gentle.Framework.TypedArrayItemBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gentle.Framework.TypedArrayItemBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gentle.Framework.BrokerLock">
            <summary>
            Abstract base class for all classes that need to be locked to a
            specific PersistenceBroker instance.
            </summary>
        </member>
        <member name="P:Gentle.Framework.BrokerLock.SessionBroker">
            <summary>
            The session broker provides a lock to the database engine. This is
            useful when connecting to multiple databases in a single application.
            </summary>
        </member>
        <member name="T:Gentle.Framework.FieldList">
            <summary>
            Helper class for storing multiple <see cref="T:Gentle.Framework.FieldMap"/> entries in
            a single array. It contains methods to locate and translate between
            column and property names.
            </summary>
        </member>
        <member name="M:Gentle.Framework.FieldList.FindProperty(System.String)">
            <summary>
            Obtain the column name corresponding to a given property name.
            </summary>
            <param name="name">The name of the property</param>
            <returns>The corresponding FieldMap</returns>
        </member>
        <member name="M:Gentle.Framework.FieldList.FindColumn(System.String)">
            <summary>
            Obtain the property name corresponding to a given column name.
            </summary>
            <param name="name">The name of the column</param>
            <returns>The corresponding FieldMap</returns>
        </member>
        <member name="P:Gentle.Framework.FieldList.PrimaryKeyCount">
            <summary>
            Returns the number of primary key fields in the array.
            </summary>
        </member>
        <member name="T:Gentle.Framework.FieldMap">
            <summary>
            A small structure for storing metadata for table columns (fields).
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Gentle.Framework.FieldMap.#ctor(Gentle.Framework.ObjectMap,Gentle.Common.MemberAttributeInfo)">
            <summary>
            Constructor for fields using information obtained from the TableColumn attribute.
            </summary>
        </member>
        <member name="M:Gentle.Framework.FieldMap.#ctor(Gentle.Framework.TableMap,System.String)">
            <summary>
            Constructor for fields using information obtained directly from the database (no property info).
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.ColumnName">
            <summary>
            The (unquoted) column name this instance represents.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.QuotedColumnName">
            <summary>
            The (reserved word quoted) column name this instance represents.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.TableColumnName">
            <summary>
            The column name this instance represents prefixed by the table to which it belongs ("table.column").
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.MemberName">
            <summary>
            The name of the field or property this instance represents.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.MemberType">
            <summary>
            The type of member (as a value of the MemberTypes enum) this instance represents.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.Type">
            <summary>
            The member (field or property) type to which this instance belongs.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.DbType">
            <summary>
            The database type of this field (the rdbms-specific type enumeration converted to long).
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.IsReservedWord">
            <summary>
            A boolean indicating whether the name of this field is reserved and needs special quoting.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.Size">
            <summary>
            The size of this field or 0 if not applicable or unknown.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.IsNullable">
            <summary>
            A boolean indicating whether the database column accepts nulls.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.IsNullAssignable">
            <summary>
            A boolean indicating whether a null value can be assigned to the property.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.IsValueType">
            <summary>
            A boolean indicating whether the property type of this field is a value type.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.IsGenericNullableType">
            <summary>
            A boolean indicating whether the type of this field is derived from NullableType.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.IsAutoGenerated">
            <summary>
            A boolean indicating whether this field is autogenerated by the database on insert.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.IsPrimaryKey">
            <summary>
            A boolean indicating whether this is a primary key field.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.IsAutoGeneratedKeyAndSupportedType">
            <summary>
            A boolean indicating whether this autogenerated key field is of a type supported 
            by Gentle.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.IsForeignKey">
            <summary>
            A boolean indicating whether this is a foreign key field.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.ForeignKeyTableName">
            <summary>
            The name of the table for foreign keys and null otherwise.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.ForeignKeyColumnName">
            <summary>
            The name of the table column for foreign keys and null otherwise.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.NullValue">
            <summary>
            The NULL value used when performing automatic translation between 
            a value type and database nulls.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.MemberInfo">
            <summary>
            The MemberInfo instance of the member represented by this instance.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.SequenceName">
            <summary>
            The name of the database sequence for autogenerated columns, usually the primary key column.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.HandleEnumAsString">
            <summary>
            If this field info represents enum then this property indicates 
            wheter it is saved as string or as integer.
            Default is false, ie enums are saved as integers
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.IsReadOnly">
            <summary>
            This value indicates that the column should not be set on insert and update. It is
            primarily useful for columns that are set internally by the database.
            </summary>
        </member>
        <member name="P:Gentle.Framework.FieldMap.IsUpdateAfterWrite">
            <summary>
            This value indicates that the column must be read after each insert and update. It is
            primarily useful for columns that are set internally by the database.
            </summary>
        </member>
        <member name="M:Gentle.Framework.FieldMap.GetValue(System.Object)">
            <summary>
            Get the value of the property for this FieldMap from the given instance. 
            </summary>
            <param name="instance">The object whose property value will be retrieved.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Gentle.Framework.FieldMap.SetValue(System.Object,System.Object)">
            <summary>
            Set the value of the property for this FieldMap on the given instance. 
            </summary>
            <param name="instance">The object whose property value will be set.</param>
            <param name="value">The value to assign to the property.</param>
        </member>
        <member name="M:Gentle.Framework.FieldMap.ToString">
            <summary>
            Override the <see cref="M:Gentle.Framework.FieldMap.ToString"/> method to produce a human readable
            representation of the <see cref="T:Gentle.Framework.FieldMap"/> object.
            </summary>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="T:Gentle.Framework.GentleRelation">
            <summary>
            This is a container class for managed storage of objects. 
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleRelation.relatedTypes">
            <summary>
            An array of types involved in this relation.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleRelation.relations">
            <summary>
            A GentleList used to automate the persistence of the contained objects.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleRelation.containedMap">
            <summary>
            An ObjectMap describing the type contained in this list.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleRelation.parent">
            <summary>
            The parent object of this list.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleRelation.#ctor(System.Type,System.Type[])">
            <summary>
            Create a new list for storing the specified type of objects.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleRelation.#ctor(System.Type,Gentle.Framework.IPersistent,System.Type[])">
            <summary>
            Create a new list for storing the specified type of objects.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleRelation.#ctor(Gentle.Framework.PersistenceBroker,System.Type,System.Type[])">
            <summary>
            Create a new list for storing the specified type of objects.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleRelation.#ctor(Gentle.Framework.PersistenceBroker,System.Type,Gentle.Framework.IPersistent,System.Type[])">
            <summary>
            Create a new list for storing the specified type of objects.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleRelation.Add(System.Object[])">
            <summary>
            Add an object to the list. The object is created using values from the list of related 
            objects passed. This means you dont pass the relation object itself, but rather the 
            list of objects which are related (in an n:m fashion).
            </summary>
            <param name="relatedObjects">The list of related objects</param>
            <returns>The index of the newly created relation</returns>
        </member>
        <member name="M:Gentle.Framework.GentleRelation.Add(Gentle.Framework.Transaction,System.Object[])">
            <summary>
            Add an object to the list. The object is created using values from the list of related 
            objects passed. This means you dont pass the relation object itself, but rather the 
            list of objects which are related (in an n:m fashion).
            </summary>
            <param name="transaction">The transaction within which to execute statements.</param>
            <param name="relatedObjects">The list of related objects</param>
            <returns>The index of the newly created relation</returns>
        </member>
        <member name="M:Gentle.Framework.GentleRelation.Remove(System.Object[])">
            <summary>
            Removes a relation from the list. The relation to remove is found using values from the 
            list of related objects passed. This means you dont pass the relation object itself, but 
            rather the list of objects which are related (in an n:m fashion).
            </summary>
            <param name="relatedObjects">The list of related objects</param>
        </member>
        <member name="M:Gentle.Framework.GentleRelation.Remove(Gentle.Framework.Transaction,System.Object[])">
            <summary>
            Removes a relation from the list. The relation to remove is found using values from the 
            list of related objects passed. This means you dont pass the relation object itself, but 
            rather the list of objects which are related (in an n:m fashion).
            </summary>
            <param name="transaction">The transaction within which to execute statements.</param>
            <param name="relatedObjects">The list of related objects</param>
        </member>
        <member name="P:Gentle.Framework.GentleRelation.Count">
            <summary>
            Returns the number of relation objects currently in the list.
            </summary>
        </member>
        <member name="T:Gentle.Framework.ObjectMap">
            <summary>
            Helper class for determining constructors, parameter ordering and whatever else is needed
            in order to construct objects.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.#ctor(Gentle.Framework.PersistenceBroker,System.Type)">
            <summary>
            Construct an ObjectMap instance for the given type.
            </summary>
            <param name="broker">The PersistenceBroker instance to which this map is related.</param>
            <param name="type">The type for which this instance is a map</param>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.SetTableName(System.Type)">
            <summary>
            Update the current ObjectMap instance with the table name obtained from
            the Gentle TableNameAttribute. 
            Also determines whether table name is dynamic or fixed.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.GetTableName(System.Object)">
            <summary>
            This method is called to obtain the table name for the current object instance.
            </summary>
            <param name="instance">The instance from which to obtain the table name.</param>
            <returns>The table name</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.DetermineConstructor(System.String[],System.Object[])">
            <summary>
            Method to scan for and determine the least expensive constructor for a given array of 
            column names. 
            </summary>
            <param name="columnNames">The column names of the result set</param>
            <param name="row">A sample row used to determine if type conversion is needed</param>
            <returns>A hash which can be used as constructor selector subsequently or 0 if no
            valid constructor could be found for the given columns.</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.Construct(System.Int32,System.Object[],Gentle.Framework.PersistenceBroker)">
            <summary>
            Construct an object instance using the constructor associated with the given hash code.
            </summary>
            <param name="columnComboHashCode">The hash code of the column names used to select a 
            specific constructor</param>
            <param name="row">The data to use for object creation</param>
            <param name="broker">The PersistenceBroker instance used to fetch the current row</param>
            <returns>An new object instance</returns>
            <exception cref="T:Gentle.Common.GentleException"> will be raised if no object could be created</exception>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.Construct(Gentle.Framework.Key,Gentle.Framework.PersistenceBroker)">
            <summary>
            Construct an object instance using the data supplied in the key. The type for which this 
            is a map is scanned for constructors that can be used with the available keys from the
            given Key instance.
            </summary>
            <param name="key">A full set of key/value pairs to use for constructing the object. The
            type being constructed must have a constructor with exactly the number of arguments
            contained in the given Key instance.</param>
            <param name="broker">The PersistenceBroker instance used to fetch the current row</param>
            <returns>An instance of the given type</returns>
            <exception cref="T:Gentle.Common.GentleException"> will be raised if no object could be created</exception>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.GetRowIndex(System.String[],System.String)">
            <summary>
            Determine the index position of the given rowName in the supplied columnNames array.
            </summary>
            <param name="row">The array of column names to search</param>
            <param name="columnName">The name to look for</param>
            <returns>The index of name in the array or -1 if not found</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.SetProperties(System.Object,System.String[],System.Object[])">
            <summary>
            Update the properties of the given object using the data in the supplied column name
            and column data arrays. Column names are mapped to their corresponding property, and
            only non-primary key columns are updated. The primary key columns are assumed to have
            been updated in the constructor used to create the object instance.
            </summary>
            <param name="obj">The object to update</param>
            <param name="columnNames">The column names</param>
            <param name="row">The column values</param>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.GetFieldMap(System.String)">
            <summary>
            Obtain a <see cref="T:Gentle.Framework.FieldMap"/> instance for the given property name.
            </summary>
            <param name="propertyName">The name of the property</param>
            <returns>The FieldMap of the property</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.GetForeignKeyFieldMap(System.Type,System.String)">
            <summary>
            Obtain a <see cref="T:Gentle.Framework.FieldMap"/> instance from the current map. The field
            must be a foreign key reference to the given property on the given type.
            </summary>
            <param name="referencedType">The type to which the property should refer</param>
            <param name="propertyName">The name of the property on the referenced type</param>
            <returns>The FieldMap of the foreign key property from this map</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.GetColumnName(System.String)">
            <summary>
            Obtain the column name corresponding to a given property name.
            </summary>
            <param name="propertyName">The name of the property</param>
            <returns>The name of the column</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.GetPropertyName(System.String)">
            <summary>
            Obtain the property name of a given column name.
            </summary>
            <param name="columnName">The name of the column</param>
            <returns>The name of the property</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.GetPropertyType(System.String)">
            <summary>
            Obtain the system type of the given property.
            </summary>
            <param name="propertyName">The name of the property</param>
            <returns>The system type of the property</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.GetPrimaryKeyNames(System.Boolean)">
            <summary>
            Obtain a string array holding the (member or column) names of all the primary keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.SetIdentity(System.Object,System.Int32)">
            <summary>
            Update the identity property with the value from the supplied <see cref="T:Gentle.Framework.SqlResult"/>
            instance. The identity property must be a single integer value for this to work. The 
            identity property is the one holding the PrimaryKey attribute with the AutoGenerated
            value set to true.
            </summary>
            <param name="obj">The object instance whose identity should be set</param>
            <param name="identity">The row identity (i.e. the LastRowId property of SqlResult)</param>
        </member>
        <member name="M:Gentle.Framework.ObjectMap.AddViewColumn(System.String,Gentle.Framework.ViewMap)">
            <summary>
            Adds a column to the specified named DataView. The ViewMap is a small helper class
            used to connect DataView columns with object properties.
            </summary>
            <param name="viewName">The name of the DataView</param>
            <param name="viewMap">The ViewMap instance to add to this view</param>
        </member>
        <member name="P:Gentle.Framework.ObjectMap.Type">
            <summary>
            The business class for which this instance holds mapping information.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ObjectMap.IsDynamicTable">
            <summary>
            True if the type to which this ObjectMap belongs maps to multiple tables.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ObjectMap.Views">
            <summary>
            A collection of named DataViews we can generate for the type represented.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ObjectMap.ConcurrencyMap">
            <summary>
            Get the FieldMap for the concurrency column.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ObjectMap.SoftDeleteMap">
            <summary>
            Get the FieldMap for the soft delete column.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ObjectMap.InheritanceMap">
            <summary>
            Get the FieldMap for the inheritance column (where the actual type name is stored).
            </summary>
        </member>
        <member name="P:Gentle.Framework.ObjectMap.Validations">
            <summary>
            Get the validations that are to be performed on the object.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ObjectMap.IsSoftDelete">
            <summary>
            True if the type to which this ObjectMap belongs should use soft delete (i.e. mark
            rows as deleted and filter them from queries on select) instead of hard delete.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ObjectMap.IsUpdateAfterWrite">
            <summary>
            This value indicates whether the table (to which this type maps) has any columns
            that are updated by the database on write. 
            </summary>
        </member>
        <member name="P:Gentle.Framework.ObjectMap.CacheStrategy">
            <summary>
            The cache behavior for objects of this type. Can be either permanent,
            temporary (the default unless overridden in the config file), or never.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ObjectMap.SchemaName">
            <summary>
            The schema name to use for objects of this type. This overrides any value
            defined for a specific provider. This is currently unused and has no effect.
            </summary>
        </member>
        <member name="T:Gentle.Framework.ObjectView">
            <summary>
            Helper class for converting between arrays of business objects and DataView
            instances useable in UI components. To customize the layout and formatting of
            the generated DataViews, decorate properties with the <see cref="T:Gentle.Framework.CustomViewAttribute"/> 
            attribute.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ObjectView.AddColumn(Gentle.Framework.ViewMap)">
            <summary>
            Adds a column to this view. 
            </summary>
            <param name="viewMap">The view map instance to use for this column</param>
        </member>
        <member name="M:Gentle.Framework.ObjectView.OrderColumns">
            <summary>
            Calling this method will sort the viewMaps ArrayList by the columnIndexes.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ObjectView.GetDataTable">
            <summary>
            Construct a DataTable with columns for the type represented.
            </summary>
            <returns>A new DataTable instance</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectView.GetItemArray(System.Object)">
            <summary>
            Construct an item array of values gathered from the supplied instance. The item array
            is used to batch set all the values in a DataView row.
            </summary>
            <param name="instance">The instance whose property values are used</param>
            <returns>The item array</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectView.GetDataTable(System.Type,System.String)">
            <summary>
            Obtain a DataTable for the specified type and view.
            </summary>
            <returns>The new DataTable instance</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectView.GetDataTable(System.Type)">
            <summary>
            Obtain a DataTable for the specified type using the "default" view.
            </summary>
            <returns>The new DataTable instance</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectView.GetDataView(System.Type,System.String,System.Collections.IList)">
            <summary>
            Create and populate a DataView with the given name. Use this method when you need
            to specify the object type manually (which is the case when the view is specified
            on a base class and the list may contain various subclasses).
            </summary>
            <param name="type">The type associated with the given view name</param>
            <param name="viewName">The name of the view</param>
            <param name="data">The list of objects to include in the view</param>
            <returns>The new DataView instance</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectView.GetDataView(System.String,System.Collections.IList)">
            <summary>
            Create and populate a DataView using the specified view. The object type is automatically
            determined from the contents of the data parameter (which must not be null or empty).
            </summary>
            <param name="viewName">The name of the view</param>
            <param name="data">The list of objects to include in the view</param>
            <returns>The new DataView instance</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectView.GetDataView(System.Collections.IList)">
            <summary>
            Create and populate a DataView using the "default" view. The object type is automatically
            determined from the contents of the data parameter (which must not be null or empty).
            </summary>
            <param name="data">The list of objects to include in the view</param>
            <returns>The new DataView instance</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectView.GetDataView(Gentle.Framework.SqlResult)">
            <summary>
            Create and populate a DataView from the given SqlResult. Columns in the result set
            are copied verbatim to the DataView.
            </summary>
            <param name="sr">The SqlResult used to generate and populate the DataView.</param>
            <returns>The new DataView instance</returns>
        </member>
        <member name="T:Gentle.Framework.PersistenceBroker">
            <summary>
            Singleton used to interface with the persistence layer. Caches SqlStatements and
            uses PersistenceEngine to execute statements.
            </summary>
            <remarks>
            This class is responsible for interacting with the SQL engine (RDBMS) used. It handles
            caching of statements and retrieved objects, and uses many of the other classes in the
            framework to perform its duties.
            </remarks>
            <see>NamespaceDoc</see>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.#ctor(System.String,System.String,System.String)">
            <summary>
            This method constructs a PersistenceBroker instance. The specified provider (database
            engine name) and connection string will be used to instantiate the desired backend
            engine used by this broker. The name will be used to uniquely distinguish this instance
            from other providers, and can be used to later obtain a reference to the cached instance
            by calling <see cref="M:Gentle.Framework.ProviderFactory.GetNamedProvider(System.String,Gentle.Framework.IGentleProvider@)"/>.
            </summary>
            <param name="name">The unique name to associate with this provider/broker pair.</param>
            <param name="providerName">The database engine name</param>
            <param name="connectionString">The connection string for connecting to the database</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.#ctor(System.String,System.String)">
            <summary>
            This method constructs a PersistenceBroker instance. The specified provider (database
            engine name) and connection string will be used to instantiate the desired backend
            engine used by this broker. 
            </summary>
            <param name="providerName">The database engine name</param>
            <param name="connectionString">The connection string for connecting to the database</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.#ctor">
            <summary>
            Constructor using the DefaultProvider from the configuration file.
            </summary>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.#ctor(Gentle.Framework.IGentleProvider)">
            <summary>
            Constructor using the supplied provider (or using DefaultProvider settings if null is passed).
            </summary>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.#ctor(System.Type)">
            <summary>
            Constructor selecting the provider based on the namespace of the supplied type.
            </summary>
        </member>
        <member name="P:Gentle.Framework.PersistenceBroker.ProviderName">
            <summary>
            Returns the class name of the current database engine.
            </summary>
        </member>
        <member name="P:Gentle.Framework.PersistenceBroker.Provider">
            <summary>
            Return the currently used IGentleProvider instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.GetSqlFactory">
            <summary>
            Retrieve an GentleSqlFactory instance for the database backend used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.GetStatement(System.String)">
            <summary>
            Return a new SqlStatement instance (ready for execution) using the specified 
            sql query string.
            </summary>
            <param name="sql">The entire SQL string to use for this statement. The statement
            type is determined from the SQL string. If the type cannot be determined the query 
            is executed using ExecuteNonQuery.</param>
            <returns>An SqlStatement instance prepared for execution</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.GetStatement(Gentle.Framework.StatementType,System.String)">
            <summary>
            Return a new SqlStatement instance (ready for execution) using the specified 
            sql query string.
            </summary>
            <param name="sql">The query string to use for the SqlStatement</param>
            <param name="stmtType">The statement type. Select statements are executed using
            ExecuteReader. Insert, Update and Delete are executed using ExecuteNonQuery. 
            Count is executed using ExecuteScalar.</param>
            <returns>An SqlStatement instance</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Retrieve(System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve data for the specified type. Throws an exception for unsupported types.
            </summary>
            <param name="type">The type of object</param>
            <param name="key">The key indentifying the object</param>
            <returns>An SqlResult containing the returned rows and helper methods</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Retrieve(System.Type,Gentle.Framework.Key,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Retrieve data for the specified type. Throws an exception for unsupported types.
            </summary>
            <param name="type">The type of object</param>
            <param name="key">The key indentifying the object</param>
            <param name="conn">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous statement.</param>
            <param name="tr">The database transaction for when participating in transactions.</param>
            <returns>An SqlResult containing the returned rows and helper methods</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Retrieve(System.Object,Gentle.Framework.Key,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Refresh the supplied object instance with the values of the object identified by
            the key.
            </summary>
            <param name="obj">The object to update</param>
            <param name="key">The key of the object to retrieve</param>
            <param name="conn">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous statement.</param>
            <param name="tr">The database transaction for when participating in transactions.</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Refresh(System.Object,System.Data.IDbTransaction)">
            <summary>
            Refresh the properties of the given object with the values from the
            database. This is essentially a Retrieve operation, but instead of
            returning a new object, the existing is updated. This allows it to be
            used within constructors.
            Throws an exception for unsupported types.
            </summary>
            <param name="obj">The object instance to update</param>
            <param name="tr">The database transaction for when participating in transactions.</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Refresh(System.Object)">
            <summary>
            Refresh the properties of the given object with the values from the
            database. This is essentially a Retrieve operation, but instead of
            returning a new object, the existing is updated. This allows it to be
            used within constructors.
            Throws an exception for unsupported types.
            </summary>
            <param name="obj">The object instance to update</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Refresh(Gentle.Framework.IEntity)">
            <summary>
            Refresh the supplied object instance with the values in the database.
            </summary>
            <param name="p">The object to update</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveInstance(System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve an object given its type and key. This method will raise an
            exception if not exactly one record matches the query. If you wish for
            null results to be allowed, use the <see cref="M:Gentle.Framework.PersistenceBroker.TryRetrieveInstance(System.Type,Gentle.Framework.Key)"/>
            method instead.
            </summary>
            <param name="type">The type of object to retrieve</param>
            <param name="key">The key identifying the object</param>
            <returns>An object instance</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveInstance``1(Gentle.Framework.Key)">
            <summary>
            Retrieve an object given its type and key. This method will raise an
            exception if not exactly one record matches the query. If you wish for
            null results to be allowed, use the <see cref="M:Gentle.Framework.PersistenceBroker.TryRetrieveInstance(System.Type,Gentle.Framework.Key)"/>
            method instead.
            </summary>
            <typeparam name="T">The type of object to retrieve</typeparam>
            <param name="key">The key identifying the object</param>
            <returns>An object instance</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.TryRetrieveInstance(System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve an object given its type and key. This method returns null if no
            record matches the query.
            </summary>
            <param name="type">The type of object to create</param>
            <param name="key">The key of the object to retrieve</param>
            <returns>The created object instance or null if no records were retrieved.</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.TryRetrieveInstance``1(Gentle.Framework.Key)">
            <summary>
            Retrieve an object given its type and key. This method returns null if no
            record matches the query.
            </summary>
            <typeparam name="T">The type of object to retrieve</typeparam>
            <param name="key">The key of the object to retrieve</param>
            <returns>The created object instance or null if no records were retrieved.</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveInstance(System.Type,Gentle.Framework.Key,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Retrieve an instance of the given type and identified by the given key using the
            supplied connection and transaction.
            </summary>
            <param name="type">The type of object to create</param>
            <param name="key">The key of the object to retrieve</param>
            <param name="conn">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous statement.</param>
            <param name="tr">The database transaction for when participating in transactions.</param>
            <returns>The created object instance</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveInstance``1(Gentle.Framework.Key,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Retrieve an instance of the given type and identified by the given key using the
            supplied connection and transaction.
            </summary>
            <typeparam name="T">The type of object to retrieve</typeparam>
            <param name="key">The key of the object to retrieve</param>
            <param name="conn">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous statement.</param>
            <param name="tr">The database transaction for when participating in transactions.</param>
            <returns>The created object instance</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveList(System.Type)">
            <summary>
            Retrieve a list of objects of a given type.
            </summary>
            <param name="type">The type of objects to retrieve</param>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveList``1">
            <summary>
            Retrieve a list of objects of a given type.
            </summary>
            <typeparam name="T">The type of object to retrieve</typeparam>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveList(System.Type,System.Collections.IList)">
            <summary>
            Retrieve a list of objects of a given type.
            </summary>
            <param name="type">The type of objects to retrieve</param>
            <param name="result">An optional existing container in which to store the created objects. If
            this parameter is null a new IList instance will be created.</param>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Retrieve a list of objects of a given type.
            </summary>
            <typeparam name="T">The type of object to retrieve</typeparam>
            <param name="result">An optional existing container in which to store the created objects. If
            this parameter is null a new IList instance will be created.</param>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveList(System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve a list of objects of a given type, optionally using the key as constraints.
            The key must contain column names and values (they will not be translated from
            property names to column names).
            </summary>
            <param name="type">The type of objects to retrieve</param>
            <param name="key">The key containing any constraints</param>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveList``1(Gentle.Framework.Key)">
            <summary>
            Retrieve a list of objects of a given type, optionally using the key as constraints.
            The key must contain column names and values (they will not be translated from
            property names to column names).
            </summary>
            <typeparam name="T">The type of object to retrieve</typeparam>
            <param name="key">The key containing any constraints</param>
            <returns>A collection of object instances</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveList(System.Type,Gentle.Framework.Key,System.Collections.IList)">
            <summary>
            Retrieve multiple instances of the given type. The retrieved rows are limited by the fields
            and values specified in the given <see cref="T:Gentle.Framework.Key"/> instance.
            </summary>
            <param name="type">The type of objects to create</param>
            <param name="key">The key of the objects to retrieve</param>
            <param name="result">An optional existing container in which to store the created objects. If
            this parameter is null a new IList instance will be created.</param>
            <returns>An array containing the created object instances</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveList``1(Gentle.Framework.Key,System.Collections.Generic.IList{``0})">
            <summary>
            Retrieve multiple instances of the given type. The retrieved rows are limited by the fields
            and values specified in the given <see cref="T:Gentle.Framework.Key"/> instance.
            </summary>
            <typeparam name="T">The type of objects to create</typeparam>
            <param name="key">The key of the objects to retrieve</param>
            <param name="result">An optional existing container in which to store the created objects. If
            this parameter is null a new IList instance will be created.</param>
            <returns>An array containing the created object instances</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveList(System.Type,Gentle.Framework.Key,System.Collections.IList,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Retrieve multiple instances of the given type. The retrieved rows are limited by the fields
            and values specified in the given <see cref="T:Gentle.Framework.Key"/> instance.
            </summary>
            <param name="type">The type of objects to create</param>
            <param name="key">The key of the objects to retrieve</param>
            <param name="result">An optional existing container in which to store the created objects. If
            this parameter is null a new IList instance will be created.</param>
            <param name="conn">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous statement.</param>
            <param name="tr">The database transaction for when participating in transactions.</param>
            <returns>An array containing the created object instances</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveList``1(Gentle.Framework.Key,System.Collections.Generic.IList{``0},System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Retrieve multiple instances of the given type. The retrieved rows are limited by the fields
            and values specified in the given <see cref="T:Gentle.Framework.Key"/> instance.
            </summary>
            <typeparam name="T">The type of objects to retrieve</typeparam>
            <param name="key">The key of the objects to retrieve</param>
            <param name="result">An optional existing container in which to store the created objects. If
            this parameter is null a new IList instance will be created.</param>
            <param name="conn">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous statement.</param>
            <param name="tr">The database transaction for when participating in transactions.</param>
            <returns>An array containing the created object instances</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveListRaw(System.Type,Gentle.Framework.Key)">
            <summary>
            Retrieve multiple instances of the given type. The retrieved rows are limited by the fields
            and values specified in the given <see cref="T:Gentle.Framework.Key"/> instance.
            </summary>
            <param name="type">The type of objects to create</param>
            <param name="key">The key of the objects to retrieve</param>
            <returns>An SqlResult with the returned rows</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RetrieveListRaw(System.Type,Gentle.Framework.Key,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Retrieve multiple instances of the given type. The retrieved rows are limited by the fields
            and values specified in the given <see cref="T:Gentle.Framework.Key"/> instance.
            </summary>
            <param name="type">The type of objects to create</param>
            <param name="key">The key of the objects to retrieve</param>
            <param name="conn">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous statement.</param>
            <param name="tr">The database transaction for when participating in transactions.</param>
            <returns>An SqlResult with the returned rows</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Execute(System.Object,Gentle.Framework.StatementType,System.Data.IDbConnection)">
            <summary>
            Internal helper method used for standard CRUD operations on known types.
            </summary>
            <param name="obj">The object instance being operated on</param>
            <param name="st">The statement type</param>
            <param name="conn">The database connection for when participating in transactions</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Execute(System.Object,Gentle.Framework.StatementType,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Internal helper method used for standard CRUD operations on known types.
            </summary>
            <param name="obj">The object instance being operated on</param>
            <param name="st">The statement type</param>
            <param name="conn">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous statement.</param>
            <param name="tr">The database transaction for when participating in transactions.</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Persist(Gentle.Framework.IEntity)">
            <summary>
            Persist (insert or update) an object. Updates the property decorated with the 
            PrimaryKey field if the AutoGenerated property has been set to true.
            </summary>
            <param name="obj">The object to persist</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Persist(Gentle.Framework.IEntity,System.Data.IDbTransaction)">
            <summary>
            Persist (insert or update) an object. Updates the property decorated with the 
            PrimaryKey field if the AutoGenerated property has been set to true.
            </summary>
            <param name="obj">The object to persist</param>
            <param name="dbTransaction">The database transaction for when participating in transactions</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Insert(System.Object)">
            <summary>
            Insert an object. Updates the property decorated with the PrimaryKey field if 
            the AutoGenerated property has been set to true.
            </summary>
            <param name="obj">The object to insert</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Insert(System.Object,System.Data.IDbTransaction)">
            <summary>
            Insert an object. Updates the property decorated with the PrimaryKey field if 
            the AutoGenerated property has been set to true.
            </summary>
            <param name="obj">The object to insert</param>
            <param name="dbTransaction">The database transaction for when participating in transactions</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Update(System.Object)">
            <summary>
            Update an existing object.
            </summary>
            <param name="obj">The object to update</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Update(System.Object,System.Data.IDbTransaction)">
            <summary>
            Update an existing object.
            </summary>
            <param name="obj">The object to update</param>
            <param name="dbTransaction">The database transaction for when participating in transactions</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Remove(System.Object)">
            <summary>
            Permanently remove an object.
            </summary>
            <param name="obj">The object to persist</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Remove(System.Object,System.Data.IDbTransaction)">
            <summary>
            Permanently remove an object.
            </summary>
            <param name="obj">The object to persist</param>
            <param name="dbTransaction">The database transaction for when participating in transactions</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Remove(System.Type,Gentle.Framework.Key)">
            <summary>
            Permanently remove an object.
            </summary>
            <param name="type">The type of object</param>
            <param name="key">The key indentifying the object</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Remove``1(Gentle.Framework.Key)">
            <summary>
            Permanently remove an object.
            </summary>
            <typeparam name="T">The type of object</typeparam>
            <param name="key">The key indentifying the object</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Remove(System.Type,Gentle.Framework.Key,System.Data.IDbTransaction)">
            <summary>
            Permanently remove an object.
            </summary>
            <param name="type">The type of object</param>
            <param name="key">The key indentifying the object</param>
            <param name="tr">The database transaction for when participating in transactions</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Remove``1(Gentle.Framework.Key,System.Data.IDbTransaction)">
            <summary>
            Permanently remove an object.
            </summary>
            <typeparam name="T">The type of object</typeparam>
            <param name="key">The key indentifying the object</param>
            <param name="tr">The database transaction for when participating in transactions</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Execute(System.String,Gentle.Framework.StatementType,System.Type,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Execute a fully specified custom SQL query.
            </summary>
            <param name="sql">The fully specified SQL query to execute</param>
            <param name="stmtType">The statement type (used to determine the query execution mode)</param>
            <param name="type">The type associated with this statement</param>
            <param name="dbConnection">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous
            statement.</param>
            <param name="dbTransaction">The database transaction for when participating in transactions</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Execute(System.String,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Execute a fully specified custom SQL query.
            </summary>
            <param name="sql">The fully specified SQL query to execute</param>
            <param name="dbConnection">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous
            statement.</param>
            <param name="dbTransaction">The database transaction for when participating in transactions</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Execute(System.String,System.Data.IDbTransaction)">
            <summary>
            Execute a fully specified custom SQL query.
            </summary>
            <param name="sql">The fully specified SQL query to execute</param>
            <param name="dbTransaction">The database transaction for when participating in transactions</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Execute(System.String)">
            <summary>
            Execute a fully specified custom SQL query.
            </summary>
            <param name="sql">The fully specified SQL query to execute</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Execute(Gentle.Framework.SqlStatement)">
            <summary>
            Execute a custom SQL statement.
            </summary>
            <param name="stmt">The statement to execute, wrapped in a SqlStatement object</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Execute(Gentle.Framework.SqlStatement,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Execute a custom SQL statement.
            </summary>
            <param name="stmt">The statement to execute, wrapped in a SqlStatement object</param>
            <param name="dbConnection">An existing database connection to reuse. This is useful
            when you need to execute statements in the same session as a previous
            statement.</param>
            <param name="dbTransaction">The database transaction for when participating in transactions</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.Execute(Gentle.Framework.SqlStatement,System.Data.IDbTransaction)">
            <summary>
            Execute a custom SQL statement.
            </summary>
            <param name="stmt">The statement to execute, wrapped in a SqlStatement object</param>
            <param name="dbTransaction">The database transaction for when participating in transactions</param>
            <returns>An SqlResult instance</returns>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.RegisterStatement(System.String,Gentle.Framework.SqlStatement)">
            <summary>
            Associate an SqlStatement with a system type (must be a descendant of Persistent).
            </summary>
            <param name="name">The name used to identify this statement</param>
            <param name="stmt">The SQL statement object</param>
        </member>
        <member name="M:Gentle.Framework.PersistenceBroker.GetRegisteredStatement(System.String)">
            <summary>
            Retrieve a previously registered SqlStatement.
            </summary>
            <param name="name">The name used to identify this statement</param>
            <returns>The previously registered SQL statement (if any)</returns>
        </member>
        <member name="T:Gentle.Framework.ProviderFactory">
            <summary>
            Provider factory for dynamic instantiation of providers.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ProviderFactory.GetNamedProvider(System.String,Gentle.Framework.IGentleProvider@)">
            <summary>
            This method returns true if a provider was found with the specified name. The matching
            provider is returned in the out parameter.
            </summary>
            <param name="name">The developer assigned name of the provider.</param>
            <param name="provider">The matching provider or null if none was found.</param>
            <returns>True if a match was found and false otherwise.</returns>
        </member>
        <member name="M:Gentle.Framework.ProviderFactory.GetProvider(System.Type)">
            <summary>
            Get the provider for a specific type. This method tries to find a corresponding
            namespace provider to use, and if no match is found, returns the default provider.
            </summary>
            <param name="type">The type for which to find a provider.</param>
            <returns>A GentleProvider instance.</returns>
        </member>
        <member name="M:Gentle.Framework.ProviderFactory.AddNamespaceProvider(System.String,System.String,System.String)">
            <summary>
            Add a new namespace provider. If a namespace provider has been registered, Gentle will
            try to match the namespace of a type to those registered, and if a match is found will
            use the associated provider and connection string (instead of the default provider).
            Namespaces are matched using StartsWith, so using incomplete substrings is supported
            (the longest match will be used if multiple namespaces match).
            </summary>
            <param name="nmspace">The namespace string to use.</param>
            <param name="provider">The provider to use for this namespace.</param>
            <param name="connectionString">The connection string to use with this provider.</param>
        </member>
        <member name="M:Gentle.Framework.ProviderFactory.SetDefaultProvider(System.String)">
            <summary>
            Update or set the default provider to use. Unless you are calling this method prior to 
            using Gentle the first time, you should call the ResetGentle method to clear all cached data.
            </summary>
            <param name="providerName">The default provider to use.</param>
        </member>
        <member name="M:Gentle.Framework.ProviderFactory.SetDefaultProviderConnectionString(System.String)">
            <summary>
            Update or set the connection string to be used with the default provider. Unless
            you are calling this method prior to using Gentle the first time, you should call 
            the ResetGentle method to clear all cached data.
            </summary>
            <param name="connectionString">The connection string to use with the default provider.</param>
        </member>
        <member name="M:Gentle.Framework.ProviderFactory.ResetGentle">
            <summary>
            Clear all caches (metadata and providers). Call this method after updating the
            default provider connection string.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ProviderFactory.ResetGentle(System.Boolean)">
            <summary>
            Clear all caches (metadata and providers). Call this method after updating the
            default provider connection string.
            </summary>
            <param name="clearObjectMapCache">True to clear the internal metadata cache (a list
            of ObjectMap entries stored in a static variable in the ObjectFactory class).</param>
        </member>
        <member name="M:Gentle.Framework.ProviderRegistry.SetDefaultProvider(System.String)">
            <summary>
            Set the default provider. Call this method during application startup 
            to override the default provider defined in the Gentle config file.
            </summary>
            <param name="providerName">The default provider name</param>
        </member>
        <member name="M:Gentle.Framework.ProviderRegistry.SetDefaultConnectionString(System.String)">
            <summary>
            Set the connection string used by the default provider. Call this method
            during application startup to override the connection string defined in
            the Gentle config file.
            </summary>
            <param name="connectionString">The default connection string</param>
        </member>
        <member name="M:Gentle.Framework.ProviderRegistry.GetProviderInfo(System.Reflection.Assembly)">
            <summary>
            Verify that the specified library contains an IGentleProvider instance, and
            fill out a ProviderInfo struct if the given assembly is valid.
            </summary>
            <param name="assembly">The provider assembly to verify</param>
        </member>
        <member name="M:Gentle.Framework.ProviderRegistry.GetProviderInfo(System.String)">
            <summary>
            Load the specified library/assembly dll.
            </summary>
            <param name="assemblyName">The assembly name to load</param>
        </member>
        <member name="P:Gentle.Framework.ProviderRegistry.ProviderCount">
            <summary>
            Returns the number of provider libraries found.
            </summary>
        </member>
        <member name="T:Gentle.Framework.TableMap">
            <summary>
            Helper class to maintain metadata on tables and columns.
            </summary>
        </member>
        <member name="M:Gentle.Framework.TableMap.#ctor(Gentle.Framework.IGentleProvider,System.String)">
            <summary>
            Construct a TableMap instance to hold information on the given table.
            </summary>
            <param name="provider">The Gentle provider to which this map relates.</param>
            <param name="tableName">The name of the table for which to hold information.</param>
        </member>
        <member name="M:Gentle.Framework.TableMap.#ctor(Gentle.Framework.PersistenceBroker,System.String)">
            <summary>
            Construct a TableMap instance to hold information on the given table.
            </summary>
            <param name="broker">The PersistenceBroker instance used to obtain metadata on the table.
            If null is passed the DefaultProvider settings will be used.</param>
            <param name="tableName">The name of the table for which to hold information.</param>
        </member>
        <member name="M:Gentle.Framework.TableMap.#ctor(Gentle.Framework.PersistenceBroker)">
            <summary>
            Construct a TableMap instance for an unspecified table.
            </summary>
        </member>
        <member name="M:Gentle.Framework.TableMap.GetFieldMapFromColumn(System.String)">
            <summary>
            Obtain a <see cref="T:Gentle.Framework.FieldMap"/> instance for the given column name.
            </summary>
            <param name="columnName">The name of the column</param>
            <returns>The FieldMap of the column</returns>
        </member>
        <member name="M:Gentle.Framework.TableMap.GetForeignKeyFieldMap(System.String,System.String)">
            <summary>
            Obtain the name of the column in in this table pointing to the given column 
            and table. This is used to map foreign key relations and allows the referencing
            column to use any name.
            </summary>
            <param name="tableName">The foreign table name</param>
            <param name="columnName">The foreign column name</param>
            <returns>The name of the local foreign key column referencing the given table column</returns>
        </member>
        <member name="M:Gentle.Framework.TableMap.GetForeignKeyMappings(Gentle.Framework.TableMap,System.Boolean)">
            <summary>
            Obtain a list of <see cref="T:Gentle.Framework.FieldMap"/> instances that represent foreign key
            references to fields on the supplied parent object.
            </summary>
            <param name="parentMap">The map of the type the foreign key fields should reference
            if they are to be included in the result.</param>
            <param name="isPrimaryKeysOnly">True if only foreign keys pointing to primary keys
            should be included, false to include all foreign key references.</param>
            <returns>A list of FieldMap instances or an empty list id no fields matched.</returns>
        </member>
        <member name="M:Gentle.Framework.TableMap.GetColumnType(System.String)">
            <summary>
            Obtain the system type of a given column name.
            </summary>
            <param name="columnName">The name of the column</param>
            <returns>The system type of the corresponding property</returns>
        </member>
        <member name="P:Gentle.Framework.TableMap.PrimaryKeyCount">
            <summary>
            Obtain the number of primary key properties/columns used by this type.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableMap.Fields">
            <summary>
            The list of fields found for the type represented.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableMap.IdentityMap">
            <summary>
            The name of the column whose value is autogenerated on insert or null if no such column.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableMap.TableName">
            <summary>
            The table name to which objects are mapped.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableMap.QuotedTableName">
            <summary>
            The table name (quoted only if reserved word) to which objects are mapped.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableMap.Provider">
            <summary>
            The Gentle provider from which this map was obtained.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableMap.TableId">
            <summary>
            Internally used value to reference the table while analyzing the database.
            </summary>
        </member>
        <member name="P:Gentle.Framework.TableMap.IsView">
            <summary>
            Internally used value to tell whether this TableMap represents a view or a table.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ConstructorMap.AnySet(System.Collections.BitArray)">
            <summary>
            Test whether at least one bit is set in the array. Replaces the old "long != 0" check.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ConstructorMap.AllUnset(System.Collections.BitArray)">
            <summary>
            Test whether no bits are set in the array. Replaces the old "long == 0" check.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ConstructorMap.GetRowHashKey(System.Object[])">
            <summary>
            Construct a unique string a 
            </summary>
        </member>
        <member name="M:Gentle.Framework.ObjectConstructor.DetermineConstructor(System.String[],System.Object[])">
            <summary>
            Method to scan for and determine the least expensive constructor for a given array of 
            column names. 
            </summary>
            <param name="columnNames">The column names of the result set</param>
            <param name="row">A sample row used to determine if type conversion is needed</param>
            <returns>A hash which can be used as constructor selector subsequently or 0 if no
            valid constructor could be found for the given columns.</returns>
        </member>
        <member name="T:Gentle.Framework.ObjectFactory">
            <summary>
            This class handles contructon of objects (created from SqlResult objects).
            </summary>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.ConstructMap(Gentle.Framework.PersistenceBroker,System.Type)">
            <summary>
            Process the given type and construct the corresponding ObjectMap instance.
            </summary>
            <param name="broker">The PersistenceBroker to use for obtaining metadata on the type. If
            null is passed the DefaultProvider will be used.</param>
            <param name="type">The type to process.</param>
            <returns>An ObjectMap instance describing the type</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.GetMap(Gentle.Framework.PersistenceBroker,System.Type)">
            <summary>
            Process the given type and construct the corresponding ObjectMap instance. If the
            map has been created previously a cached instance is returned.
            </summary>
            <param name="broker">The PersistenceBroker to use for obtaining metadata on the type. If
            null is passed the DefaultProvider will be used.</param>
            <param name="type">The type to process</param>
            <returns>An ObjectMap instance describing the type</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.GetMap(Gentle.Framework.PersistenceBroker,System.Object)">
            <summary>
            Process the given object's type and construct the corresponding ObjectMap instance. If the
            map has been created previously a cached instance is returned.
            </summary>
            <param name="broker">The PersistenceBroker to use for obtaining metadata on the type. If
            null is passed the DefaultProvider will be used.</param>
            <param name="obj">The instance to process</param>
            <returns>An ObjectMap instance describing the type</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.GetMap(System.String)">
            <summary>
            Retrieve the ObjectMap for the type persisted to the specified table name. The map
            must have been created previously or null will be returned. If multiple types map
            to the same table, the first match is returned.
            </summary>
            <param name="tableName">The table name identifying the type</param>
            <returns>An ObjectMap instance describing the type</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.GetInstance(System.Type,Gentle.Framework.SqlResult,Gentle.Framework.Key)">
            <summary>
            Construct an instance of the given type using data from the first row of the
            supplied SqlResult instance. 
            Refer to the Construct method of the <see cref="T:Gentle.Framework.ObjectMap"/> class for details.
            </summary>
            <param name="type">The type of object to construct</param>
            <param name="sr">The SqlResult instance holding the data</param>
            <param name="key">Additional fields not available in the result set (e.g. primary key fields)</param>
            <returns>An instance of the given type</returns>
            <exception cref="T:Gentle.Common.GentleException"> will be raised if no object could be created</exception>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.LoadType(System.String)">
            <summary>
            Load the type specified using its fully qualified name (its AssemblyQualifiedName property).
            </summary>
            <param name="assemblyQualifiedName">The fully qualified type name. This is a string consisting of
            up to 4 items: type name, assembly name, culture, public key token (strong named assemblies only).</param>
            <returns>A reference to the specified type. If an error occurs loading the type and exception
            will be raised.</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.GetInstance(System.Type,Gentle.Framework.SqlResult)">
            <summary>
            Construct an instance of the given type using data from the first row of the
            supplied SqlResult instance. 
            Refer to the Construct method of the <see cref="T:Gentle.Framework.ObjectMap"/> class for details.
            </summary>
            <param name="type">The type of object to construct</param>
            <param name="sr">The SqlResult instance holding the data</param>
            <returns>An instance of the given type</returns>
            <exception cref="T:Gentle.Common.GentleException"> will be raised if no object could be created</exception>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.GetCollection(System.Type,Gentle.Framework.SqlResult)">
            <summary>
            Construct multiple objects of a given type from the data contained in the given SqlResult
            object. Refer to the Construct method of the <see cref="T:Gentle.Framework.ObjectMap"/> class for details.
            </summary>
            <param name="type">The type of object to construct</param>
            <param name="sr">The SqlResult instance holding the data</param>
            <returns>An IList holding the created objects</returns>
            <exception cref="T:Gentle.Common.GentleException"> will be raised if no object could be created</exception>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.GetCollection(System.Type,Gentle.Framework.SqlResult,System.Collections.IList)">
            <summary>
            Construct multiple objects of a given type from the data contained in the given SqlResult
            object. Refer to the Construct method of the <see cref="T:Gentle.Framework.ObjectMap"/> class for details.
            </summary>
            <param name="type">The type of object to construct</param>
            <param name="sr">The SqlResult instance holding the data</param>
            <param name="result">An optional existing container in which to store the created objects. If
            this parameter is null a new IList instance will be created.</param>
            <returns>An IList holding the created objects</returns>
            <exception cref="T:Gentle.Common.GentleException"> will be raised if no object could be created</exception>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.MakeGenericList``1">
            <summary>
            Produce an empty generic list of the specified argument type
            </summary>
            <typeparam name="T">The entity type to be stored in the list</typeparam>
            <returns>A generic list instance</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.MakeGenericList(System.Type)">
            <summary>
            Produce an empty generic list of the specified argument type
            </summary>
            <param name="entityType">The entity type to be stored in the list</param>
            <returns>A generic list instance cast to IList</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.IsTypeSupported(System.Type)">
            <summary>
            Checks whether the given type is supported by the Gentle.NET framework. This method
            merely verifies the presence of the TableNameAttribute attribute on the class.
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type has the TableNameAttribute attribute</returns>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.RegisterType(Gentle.Framework.PersistenceBroker,System.Type)">
            <summary>
            Register a single type. Calling this method makes Gentle create an ObjectMap
            for the given type. 
            If schema data is needed the supplied <see cref="T:Gentle.Framework.PersistenceBroker"/>
            instance will be used. This method will silently ignore unsupported types and is
            therefore safe to call with any type.
            </summary>
            <param name="broker">The <see cref="T:Gentle.Framework.PersistenceBroker"/> instance used to obtain
            metadata from the database schema.</param>
            <param name="type">The type for which to create an ObjectMap.</param>
        </member>
        <member name="M:Gentle.Framework.ObjectFactory.RegisterAssembly(Gentle.Framework.PersistenceBroker,System.Reflection.Assembly)">
            <summary>
            Register multiple types. Calling this method makes Gentle create an ObjectMap 
            for all supported types in the assembly.
            If schema data is needed the supplied <see cref="T:Gentle.Framework.PersistenceBroker"/>
            instance will be used.
            </summary>
            <param name="broker">The <see cref="T:Gentle.Framework.PersistenceBroker"/> instance used to obtain
            metadata from the database schema.</param>
            <param name="assembly">The assembly whose types should be registered.</param>
        </member>
        <member name="T:Gentle.Framework.ValidationBroker">
            <summary>
            Singleton used to perform validations on an object.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ValidationBroker.Validate(System.Object)">
            <summary>
            Provides a static interface to perform validations on an object.
            </summary>
            <param name="obj">The object instance being operated on</param>
        </member>
        <member name="T:Gentle.Framework.NullOption">
            <summary>
            Enumeration to indicate if a field should use the types MinValue or MaxValue
            as the NULL translation value. This is useful for DateTime and Decimal fields,
            where it is not possible to use the actual value in the TableColumn attribute
            declaration. 
            </summary>
        </member>
        <member name="F:Gentle.Framework.NullOption.MinValue">
            <summary>
            &lt;type&gt;.MinValue will be stored as NULL, and NULL will be read as &lt;type&gt;.MinValue.
            </summary>
        </member>
        <member name="F:Gentle.Framework.NullOption.MaxValue">
            <summary>
            &lt;type&gt;.MaxValue will be stored as NULL, and NULL will be read as &lt;type&gt;.MaxValue.
            </summary>
        </member>
        <member name="F:Gentle.Framework.NullOption.Zero">
            <summary>
            0 (or the equivalent for other numeric types) will be stored as NULL, and NULL will be read as 0.
            </summary> This value can only be used with numeric types (such as decimal).
        </member>
        <member name="F:Gentle.Framework.NullOption.EmptyGuid">
            <summary>
            Guid.Empty will be stored as NULL, and NULL will be read as Guid.Empty. This value can only be
            used with Guid fields.
            </summary>
        </member>
        <member name="T:Gentle.Framework.StatementType">
            <summary>
            Enumeration of the possible supported statement types.
            </summary>
        </member>
        <member name="F:Gentle.Framework.StatementType.Unknown">
            <summary>
            This setting is used when the statement type has not been defined or is unknown. When
            executing queries of unknown type, the framework assumes a select-type statement is
            being executed (i.e. it will use an ExecuteReader to perform the request).
            </summary>
        </member>
        <member name="F:Gentle.Framework.StatementType.Select">
            <summary>
            This identifies statements executed using the ExecuteReader method.
            </summary>
        </member>
        <member name="F:Gentle.Framework.StatementType.Count">
            <summary>
            This identifies statements executed using the ExecuteScalar method. No fields will
            be selected. The result set will contain a single numeric row-count value.
            </summary>
        </member>
        <member name="F:Gentle.Framework.StatementType.Identity">
            <summary>
            This identifies statements executed using the ExecuteScalar method. No fields will
            be selected. Use the LastRowId property on the SqlResult to obtain the selected value.
            </summary>
        </member>
        <member name="F:Gentle.Framework.StatementType.Insert">
            <summary>
            This identifies statements executed using either the ExecuteScalar (for
            autogenerated columns) or ExecuteNonQuery method.
            </summary>
        </member>
        <member name="F:Gentle.Framework.StatementType.Update">
            <summary>
            This identifies statements executed using the ExecuteNonQuery method.
            </summary>
        </member>
        <member name="F:Gentle.Framework.StatementType.Delete">
            <summary>
            This identifies statements executed using the ExecuteNonQuery method.
            </summary>
        </member>
        <member name="F:Gentle.Framework.StatementType.SoftDelete">
            <summary>
            This identifies statements executed using the ExecuteNonQuery method.
            </summary>
        </member>
        <member name="T:Gentle.Framework.GentleSettings">
            <summary>
            Placeholder class for Gentle.NET global configuration settings
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleSettings.ConcurrencyControl">
            <summary>
            Option to control whether Gentle should generate SQL for concurrency control. When
            set to false, all columns carrying the ConcurrencyColumn will be ignored in query
            generation.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleSettings.MasterDefinition">
            <summary>
            Option to control what the primary metadata source is for Gentle. Note that when
            the database analyzer is enabled, information obtained from schema data is assumed
            to be correct and thus always takes precedence.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleSettings.AnalyzerSilent">
            <summary>
            Option to control whether the database analyzer should report an error for
            unused columns. The default is to ignore any such unmapped columns.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleSettings.AnalyzerLevel">
            <summary>
            Option to control the operation of the database analyzer. When set to None the
            database anaylzer will be disabled (all metadata must be provided from other
            sources, such as attributes). When set to OnDemand, reverse engineering occurs
            once for every type (on first access for that type). When set to Full the entire 
            database is analyzed (on first access) in one operation. Full is the recommended
            option, but can lead to longer startup times (est. 1-10 seconds, depending on the
            amount of tables involved).
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleSettings.DefaultCacheStrategy">
            <summary>
            The setting controls the default cache strategy used by Gentle. Please 
            <see cref="T:Gentle.Common.CacheStrategy"/> for information on the possible values.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleSettings.CacheStatements">
            <summary>
            This setting controls whether statements are cached by Gentle. The default is
            to cache CRUD statements only. You can manually cache your own statements by
            using the <see cref="M:Gentle.Framework.PersistenceBroker.RegisterStatement(System.String,Gentle.Framework.SqlStatement)"/> method (and
            retrieve cached statements using the 
            <see cref="M:Gentle.Framework.PersistenceBroker.GetRegisteredStatement(System.String)"/> method.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleSettings.CacheObjects">
            <summary>
            This setting controls whether objects are cached by Gentle. When object caching
            is enabled, Gentle will filter query results and return the cached instance
            when available. The default is not to cache objects.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleSettings.SkipQueryExecution">
            <summary>
            This setting controls whether Gentle may skip query execution and return results
            composed of cached data. When true, Gentle maintains links between queries and
            associated result sets, and will only skip query execution if all objects from
            the previous execution are still available.
            </summary>
        </member>
        <member name="P:Gentle.Framework.GentleSettings.UniqingScope">
            <summary>
            This setting controls the scope within which objects are uniqued. Consult <see 
            cref="P:Gentle.Framework.GentleSettings.UniqingScope"/> for details on the available options.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleSettings.DefaultProviderName">
            <summary>
            The name of the default provider used by the Broker class.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleSettings.DefaultProviderConnectionString">
            <summary>
            The connection string used by the default provider.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleSettings.DefaultCommandTimeout">
            <summary>
            The default timeout value in seconds for connections created by Gentle.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleSettings.SetLogStatus(Gentle.Common.LogCategories,System.Boolean)">
            <summary>
            The connection string used by the default provider.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleSettings.GetScopeDelimiter(System.String)">
            <summary>
            Get the scope delimiter used to group entries in the cache. The
            supplied id is used instead of the normal scope delimitor (this
            is useful if you wish to clear the cache for another thread or
            web session than your own).
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleSettings.GetScopeDelimiter">
            <summary>
            Get the scope delimiter used to group entries in the cache. The
            returned value is valid for this thread or web session only.
            </summary>
        </member>
        <member name="T:Gentle.Framework.MasterDefinition">
            <summary>
            This enumeration is used to control which source of information is to be considered
            the master definition. This setting is only partially used at the moment. 
            </summary>
        </member>
        <member name="F:Gentle.Framework.MasterDefinition.Attributes">
            <summary>
            With this setting the mapping structures are defined using attributes. The definitions
            are verified against the database in accordance with the AnalyzerLevel setting.
            </summary>
        </member>
        <member name="F:Gentle.Framework.MasterDefinition.XML">
            <summary>
            With this setting the mapping structures are defined using definitions from XML files.
            This feature is not yet supported.
            </summary>
        </member>
        <member name="F:Gentle.Framework.MasterDefinition.Database">
            <summary>
            With this setting the mapping structures are defined by analyzing the database tables.
            This feature is not yet supported.
            </summary>
        </member>
        <member name="T:Gentle.Framework.NamespaceProviders">
            <summary>
            Helper class for retrieval of namespaced providers.
            </summary>
        </member>
        <member name="T:Gentle.Framework.IEntity">
            <summary>
            This interface specifies methods that objects must implement in order for the
            persistence framework to accept them. 
            
            Additionally, it specified convenience methods that allows clients to call the
            persistence methods directly on the object, rather than using the PersistenceBroker 
            directly.
            </summary>
        </member>
        <member name="M:Gentle.Framework.IEntity.GetKey">
            <summary>
            The Key property is a Hashtable of key/value pairs that specify the selection 
            criteria unique to the current object instance. The Key usually corresponds
            to the primary keys of the row holding the object.
            </summary>
            <returns>The unique Key of the current instance. The generated key should
            contain property values.</returns>
        </member>
        <member name="P:Gentle.Framework.IEntity.IsPersisted">
            <summary>
            True if the current instance has been persisted to the database.
            </summary>
        </member>
        <member name="T:Gentle.Framework.IBrokerLock">
            <summary>
            Interface for classes that need to be locked to a specific 
            PersistenceBroker instance.
            </summary>
        </member>
        <member name="P:Gentle.Framework.IBrokerLock.SessionBroker">
            <summary>
            The session broker provides a lock to the database engine. This is
            useful when connecting to multiple databases in a single application.
            </summary>
        </member>
        <member name="T:Gentle.Framework.AnalyzerLevel">
            <summary>
            This enumeration is used to control the level of database analysis performed.
            </summary>
        </member>
        <member name="F:Gentle.Framework.AnalyzerLevel.None">
            <summary>
            With this setting no database analysis will be performed.
            </summary>
        </member>
        <member name="F:Gentle.Framework.AnalyzerLevel.OnDemand">
            <summary>
            With this setting only tables with a corresponding object will be analyzed.
            </summary>
        </member>
        <member name="F:Gentle.Framework.AnalyzerLevel.Full">
            <summary>
            With this setting all available tables will be analyzed.
            </summary>
        </member>
        <member name="T:Gentle.Framework.IDatabaseAnalyzer">
            <summary>
            This interface describes the methods which must be supported by a specific
            analyzer for a persistence engine. The analyzers are used to obtain column
            type, size and constraint information directly from the database
            </summary>
        </member>
        <member name="P:Gentle.Framework.IDatabaseAnalyzer.TableMaps">
            <summary>
            This property is a Hashtable of TableMap instances containing metadata on
            tables obtained from the database. Client programs can iterate through this
            list and use the TableMap instances to generate Gentle business objects (be
            sure to set the AnalyzerLevel to Full in the configuration file if used for
            this purpose).
            </summary>
        </member>
        <member name="M:Gentle.Framework.IDatabaseAnalyzer.Analyze(System.String)">
            <summary>
            This method obtains metadata by analyzing the database. If no table name
            is specified all available tables will be processed.
            </summary>
            <param name="tableName">The table name to analyze or null for all tables</param>
        </member>
        <member name="M:Gentle.Framework.IDatabaseAnalyzer.UpdateObjectMap(Gentle.Framework.ObjectMap)">
            <summary>
            This method updated the given ObjectMap instance with metadata obtained
            from the database.
            </summary>
            <param name="map">The ObjectMap to update</param>
        </member>
        <member name="T:Gentle.Framework.IGentleProvider">
            <summary>
            The high-level interface to implement when creating a new provider.
            </summary>
        </member>
        <member name="P:Gentle.Framework.IGentleProvider.Name">
            <summary>
            Returns a unique name for this provider.
            </summary>
        </member>
        <member name="P:Gentle.Framework.IGentleProvider.ConnectionString">
            <summary>
            Returns the connection string used by this provider.
            </summary>
        </member>
        <member name="P:Gentle.Framework.IGentleProvider.SchemaName">
            <summary>
            Returns the schema name (if any) used by this provider.
            </summary>
        </member>
        <member name="P:Gentle.Framework.IGentleProvider.ProviderInformation">
            <summary>
            Returns information about the actual data provider.
            </summary>
        </member>
        <member name="P:Gentle.Framework.IGentleProvider.Broker">
            <summary>
            Returns the PersistenceBroker instance for this provider.
            </summary>
        </member>
        <member name="P:Gentle.Framework.IGentleProvider.IdentityHash">
            <summary>
            Returns the cache key of the current instance.
            </summary>
        </member>
        <member name="M:Gentle.Framework.IGentleProvider.GetSqlFactory">
            <summary>
            Obtain an SQL factory for constructing SQL statements.
            </summary>
            <returns>The factory for SQL construction</returns>
        </member>
        <member name="M:Gentle.Framework.IGentleProvider.GetRenderer">
            <summary>
            Obtain an SQL renderer for constructing formatted SQL from SqlQuery objects.
            </summary>
            <returns>The SQL renderer for this database</returns>
        </member>
        <member name="M:Gentle.Framework.IGentleProvider.GetAnalyzer">
            <summary>
            Obtain an instance of the database backend analyzer. Used internally while constructing
            the initial ObjectMap instances for mapping types to the database.
            </summary>
            <returns>The factory for SQL construction</returns>
        </member>
        <member name="T:Gentle.Framework.IPersistenceEngine">
            <summary>
            The interface to implement in order to support a specific persistence engine,
            i.e. a specific vendors RDBMS.
            </summary>
        </member>
        <member name="M:Gentle.Framework.IPersistenceEngine.ExecuteStatement(Gentle.Framework.SqlStatement)">
            <summary>
            Execute an SQL statement and produce a corresponding result set (even when no rows are returned).
            </summary>
            <param name="stmt">The statement object to execute</param>
            <returns>The result set produced</returns>
        </member>
        <member name="M:Gentle.Framework.IPersistenceEngine.GetCommand">
            <summary>
            Obtain a command instance.
            </summary>
            <returns>The database command object</returns>
        </member>
        <member name="M:Gentle.Framework.IPersistenceEngine.GetConnection">
            <summary>
            Obtain a connection to the persistence engine. The returned connection should be open.
            </summary>
            <returns>The database connection</returns>
        </member>
        <member name="M:Gentle.Framework.IPersistenceEngine.CacheStatement(System.Type,Gentle.Framework.StatementType,Gentle.Framework.SqlStatement)">
            <summary>
            Cache a CRUD-type statement for the given type.
            </summary>
        </member>
        <member name="M:Gentle.Framework.IPersistenceEngine.GetStatement(System.Type,System.String,Gentle.Framework.StatementType)">
            <summary>
            Retrieve a cached CRUD-type statement for the given type.
            </summary>
        </member>
        <member name="T:Gentle.Framework.IPersistent">
            <summary>
            This interface specifies methods that objects must implement in order for the
            persistence framework to accept them. 
            
            Additionally, it specified convenience methods that allows clients to call the
            persistence methods directly on the object, rather than using the PersistenceBroker 
            directly.
            </summary>
        </member>
        <member name="M:Gentle.Framework.IPersistent.Persist">
            <summary>
            Insert or update the current object instanse.
            </summary>
        </member>
        <member name="M:Gentle.Framework.IPersistent.Remove">
            <summary>
            Delete the current object instanse. 
            Note: This does not destroy or invalide the current object instance.
            </summary>
        </member>
        <member name="M:Gentle.Framework.IPersistent.Refresh">
            <summary>
            Select the current object instance and initialize all properties/fields with
            the values of the retrieved data. This method can be used in place of static
            constructors in implementations of IPersistant as it allows constructors to
            merely take a Key parameter (and then call this method to initialize all fields).
            </summary>
        </member>
        <member name="T:Gentle.Framework.IProviderInformation">
            <summary>
            Provides a standard structure to important information gathered from the actual provider.
            </summary>
        </member>
        <member name="P:Gentle.Framework.IProviderInformation.Name">
            <summary>
            Gets the name of the provider, as defined by the actual provider.
            </summary>
        </member>
        <member name="P:Gentle.Framework.IProviderInformation.Version">
            <summary>
            Gets the version of the provider, as defined by the actual provider.
            </summary>
        </member>
        <member name="T:Gentle.Framework.ITableName">
            <summary>
            This interface is for classes than need to dynamically map to multiple tables.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ITableName.TableName">
            <summary>
            Returns the name of the table with which the current object instance is
            associated for all database operations performed on it.
            </summary>
        </member>
        <member name="T:Gentle.Framework.NamespaceDoc">
            <summary>
            <p>The <see cref="N:Gentle.Framework"/> namespace contains the persistence framework.</p><br/>
            <list type="bullet">
              <item>
                <description>The main access point into the framework functionality is provided 
            	  by the <see cref="T:Gentle.Framework.PersistenceBroker"/> class. The <see cref="T:Gentle.Framework.Broker"/> class
            	  allows you to use a default PersistenceBroker instance (using the provider and
            	  connection information specified using the DefaultProvider config setting).</description></item>
              <item>
                <description>
                  <para>To create persistable business objects decorate the class using the
                    <see cref="T:Gentle.Framework.TableNameAttribute"/> attribute and all persistent properties using the 
                    <see cref="T:Gentle.Framework.TableColumnAttribute"/> attribute.</para>
                  <para>Depending on how much metadata Gentle is able to obtain from the database, you may
                    need to decorate primary and foreign keys with the <see cref="T:Gentle.Framework.PrimaryKeyAttribute"/> and 
                    <see cref="T:Gentle.Framework.ForeignKeyAttribute"/> attributes respectively.</para> 
                  <para>Business objects may optionally inherit from the <see cref="T:Gentle.Framework.Persistent"/> class (or implement
                    the <see cref="T:Gentle.Framework.IPersistent"/> interface) and gain additional features, such as a set of convenient 
                    access methods. It is also possible to use the framework without using these.</para>
                  <para>A returning issue with object to database mapping is handling of null values. If
                    a value type property (such as an int or bool) maps to a column that allows null
                    values, use the NullValue property of the TableColumn attribute to specify the
                    value that will be assigned to properties on read and converted into null on 
                    insert.</para></description></item>
              <item>
                <description>     
                  <para>To execute custom SQL statements use the <see cref="T:Gentle.Framework.SqlStatement"/> class. Use the 
                    <see cref="T:Gentle.Framework.SqlBuilder"/> class to construct instances of this class whenever the statement
                    is for a supported type (i.e. a class decorated with the proper attributes).</para>
                  <para>Query results (when executed directly) are always packaged in the <see cref="T:Gentle.Framework.SqlResult"/> 
                    class, which holds any returned rows and has useful properties (such as standardized 
                    return codes). The RetrieveInstance and RetriveList methods allow you to bypass the 
                    result and have Gentle create objects automatically.</para>
                  <para>Multiple statements (including non-SQL commands) can be transacted (grouped) using the 
                    <see cref="T:Gentle.Framework.Transaction"/> class.</para></description>
              </item>
            </list>
            <br/>
            <p>The source code of the Gentle.Framework project is organized as follows:</p>
            <list type="table">
              <listheader>
                <term>Folder</term>
                <description>Description</description></listheader>
              <item>
                <term>Attributes</term>
                <description>All attributes defined by Gentle with which you can decorate your objects
                and thus gain use of the provided functionality.</description></item>
              <item>
                <term>Client</term>
                <description>All classes relevant to clients of the framework, that is, readers of 
                this document.</description></item>
              <item>
                <term>Core</term>
                <description>The core functionality of the framework. Some of these are also of
                  interest to clients/users.</description></item>
              <item>
                <term>General</term>
                <description>Helper classes for various purposes, such as config file handling, 
                error reporting, etc.</description></item>
              <item>  
                <term>Interfaces</term>
                <description>Interfaces used internally by Gentle.</description></item>
              <item>  
                <term>Provider</term>
                <description>Base classes to use when implementing support for a database provider.</description></item>
              <item>  
                <term>Query</term>
                <description>Classes used when constructing custom SQL queries in a database-independent way.
                Note that classes in this folder is currently work in progress.</description></item>
            </list>
            <p>Enjoy! :-)</p>
            </summary>
        </member>
        <member name="T:Gentle.Framework.GentleAnalyzer">
            <summary>
            Base class for all database analyzers.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleAnalyzer.#ctor(Gentle.Framework.IGentleProvider)">
            <summary>
            Constructor for the GentleAnalyzer base class.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Gentle.Framework.GentleAnalyzer.AnalyzerCapability">
            <summary>
            This property should be defined in subclasses to indicate which information fields
            the Analyzer class is able to obtain. 
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleAnalyzer.HasCapability(Gentle.Framework.ColumnInformation)">
            <summary>
            Use this method to check if the provider supports obtaining the specified information.
            </summary>
        </member>
        <member name="P:Gentle.Framework.GentleAnalyzer.Level">
            <summary>
            Use this method to get or set the analyzer level used. Note that changing this setting too
            late it might have no effect (if tables have already been analyzed).
            </summary>
        </member>
        <member name="P:Gentle.Framework.GentleAnalyzer.TableMaps">
            <summary>
            This property is a Hashtable of TableMap instances containing metadata on
            tables obtained from the database. Client programs can iterate through this
            list and use the TableMap instances to generate Gentle business objects (be
            sure to set the AnalyzerLevel to Full in the configuration file if used for
            this purpose).
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleAnalyzer.GetTableMap(System.String)">
            <summary>
            Get an existing TableMap from the underlying store of the TableMaps property. This 
            method ensures that tables are looked up case insensitively and without triggering
            any database scanning (which could otherwise lead to loops).
            </summary>
            <param name="tableName">The name of the table whose map to retrieve.</param>
            <returns>The corresponding TableMap instance or null if none was found.</returns>
        </member>
        <member name="M:Gentle.Framework.GentleAnalyzer.Analyze(System.String)">
            <summary>
            This method obtains metadata by analyzing the database. If no table name
            is specified all available tables will be processed.
            </summary>
            <param name="tableName">The table name to analyze or null for all tables</param>
        </member>
        <member name="M:Gentle.Framework.GentleAnalyzer.UpdateObjectMap(Gentle.Framework.ObjectMap)">
            <summary>
            This method updated the given ObjectMap instance with metadata obtained
            from the database.
            </summary>
            <param name="map">The ObjectMap to update</param>
        </member>
        <member name="T:Gentle.Framework.GentleProvider">
            <summary>
            This class implements some common methods for RDBMS backends (as defined by 
            the <see cref="T:Gentle.Framework.IGentleProvider"/> interface).
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleProvider.connectionString">
            <summary>
            This field stores the connection string for connecting to the database engine.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleProvider.providerName">
            <summary>
            This field stores the name identifying this provider.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleProvider.schemaName">
            <summary>
            This field stores the schema name used with this provider (if any).
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleProvider.broker">
            <summary>
            This field stores the PersistenceBroker used with this provider.
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleProvider.stmtByType">
            <summary>
            Hashtable of Type-indexed hashtables of StatementType-indexed statements.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleProvider.#ctor(System.String,System.String)">
            <summary>
            This base constructor ensures that descendant must specify a connection string
            when new instances are created.
            </summary>
            <param name="providerName">The name identifying the provider used</param>
            <param name="connectionString">The connection string used to connect to the database</param>
        </member>
        <member name="M:Gentle.Framework.GentleProvider.#ctor(System.String,System.String,System.String)">
            <summary>
            This base constructor ensures that descendant must specify a connection string
            when new instances are created.
            </summary>
            <param name="providerName">The name identifying the provider used</param>
            <param name="connectionString">The connection string used to connect to the database</param>
            <param name="schemaName">The schema name used for queries made using this provider</param>
        </member>
        <member name="P:Gentle.Framework.GentleProvider.Name">
            <summary>
            Returns the name of this provider (the name identifies the type of database backend 
            the provider can connect to).
            </summary>
        </member>
        <member name="P:Gentle.Framework.GentleProvider.ConnectionString">
            <summary>
            Returns the connection string used by this provider instance.
            </summary>
        </member>
        <member name="P:Gentle.Framework.GentleProvider.SchemaName">
            <summary>
            Returns the schema name used by this provider instance, or null if no schema name is used.
            </summary>
        </member>
        <member name="P:Gentle.Framework.GentleProvider.IdentityHash">
            <summary>
            Returns the cache key of the current instance.
            </summary>
        </member>
        <member name="P:Gentle.Framework.GentleProvider.Broker">
            <summary>
            Returns the connection string used by this provider instance.
            </summary>
        </member>
        <member name="P:Gentle.Framework.GentleProvider.ProviderInformation">
            <summary>
            Override to provide information about the actual provider.
            Base implementation returns null.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleProvider.GetSqlFactory">
            <summary>
            Abstract method declaration to obtain an <see cref="T:Gentle.Framework.GentleSqlFactory"/> that
            encapsulated the RDBMS specifics for generating SQL statements.
            </summary>
            <returns>An GentleSqlFactory instance</returns>
        </member>
        <member name="M:Gentle.Framework.GentleProvider.GetAnalyzer">
            <summary>
            Abstract method declaration to obtain a new database analyzer instance.
            </summary>
            <returns>The new database analyzer</returns>
        </member>
        <member name="M:Gentle.Framework.GentleProvider.GetRenderer">
            <summary>
            Obtain an SQL renderer for constructing formatted SQL from SqlQuery objects.
            </summary>
            <returns>The SQL renderer for this database</returns>
        </member>
        <member name="M:Gentle.Framework.GentleProvider.GetConnection">
            <summary>
            Abstract method declaration to obtain a new database connection.
            </summary>
            <returns>The new database connection</returns>
        </member>
        <member name="M:Gentle.Framework.GentleProvider.GetCommand">
            <summary>
            Abstract method declaration to obtain a new <see cref="T:System.Data.IDbCommand"/> object.
            </summary>
            <returns>The command object</returns>
        </member>
        <member name="M:Gentle.Framework.GentleProvider.ExecuteStatement(Gentle.Framework.SqlStatement)">
            <summary>
            Execute the <see cref="T:Gentle.Framework.SqlStatement"/> by providing it with a connection
            to the SQL engine.
            </summary>
            <param name="stmt">The SqlStatement instance</param>
            <returns>The result of the statement</returns>
        </member>
        <member name="M:Gentle.Framework.GentleProvider.CacheStatement(System.Type,Gentle.Framework.StatementType,Gentle.Framework.SqlStatement)">
            <summary>
            Add the specified statement to the statement cache.
            </summary>
            <param name="type">The business object with which to associate the statement</param>
            <param name="stmtType">The type of the SQL statement</param>
            <param name="stmt">The statement instance to cache</param>
        </member>
        <member name="M:Gentle.Framework.GentleProvider.GetStatement(System.Type,System.String,Gentle.Framework.StatementType)">
            <summary>
            Retrieve a statement from the cache. If the statement is not present it will be generated
            and added to the cache.
            </summary>
            <param name="type">The business object with which the statement is associated</param>
            <param name="tableName">The table used in the statement</param>
            <param name="stmtType">The type of the SQL statement</param>
            <returns>An SqlStatement instance</returns>
        </member>
        <member name="M:Gentle.Framework.GentleProvider.ClearCache">
            <summary>
            Clear the statement cache.
            </summary>
        </member>
        <member name="F:Gentle.Framework.Capability.BatchQuery">
            <summary>
            This capability signifies that the database backend supports executing 
            multiple SQL statements in one batch. When this capability is not present
            Gentle will perform two queries for insert operations on tables with 
            autogenerated primary keys (one to perform the insert and one for 
            retrieving the generated key).
            </summary>
        </member>
        <member name="F:Gentle.Framework.Capability.Paging">
            <summary>
            This capability signifies that the database backend supports paging of
            result sets, i.e. that SQL can be generated to retrieve only a certain
            set of rows.
            </summary>
        </member>
        <member name="F:Gentle.Framework.Capability.NamedParameters">
            <summary>
            This capability signifies that the data provider supports named parameters.
            If not supported, positional parameters will be used instead.
            </summary>
        </member>
        <member name="T:Gentle.Framework.GentleSqlFactory">
            <summary>
            <p>The base class for all SQL factory implementations. Default implementations are provided
            for some of the methods.</p>
            <p>Inherit from this class when adding support for a new RDBMS.</p>
            </summary>
        </member>
        <member name="F:Gentle.Framework.GentleSqlFactory.provider">
            <summary>
            The provider for which this factory is generating SQL.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.#ctor(Gentle.Framework.IGentleProvider)">
            <summary>
            Construct a new GentleSqlFactory instance.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetCommand">
            <summary>
            Shortcut method for obtaining an IDbCommand instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetDbType(System.Type)">
            <summary>
            Obtain the integer value of the database type corresponding to the given system type.
            The value returned must be castable to a valid type (enum value) for the current 
            persistence engine. This method is called to translate property types to database
            types when one has not been explicitly defined by the user or read from the database.
            </summary>
            <param name="type">The system type</param>
            <returns>The corresponding database type</returns>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetDbType(System.String,System.Boolean)">
            <summary>
            This method converts the given string (as extracted from the database system tables) 
            to the corresponding type enumeration value. 
            </summary>
            <param name="dbType">The name of the type with the database engine used.</param>
            <param name="isUnsigned">A boolean value indicating whether the type is unsigned. This
            is not supported by most engines and/or data providers and is thus fairly useless at
            this point.</param>
            <returns>The value of the corresponding database type enumeration. The enum is converted
            to its numeric (long) representation because each provider uses its own enum (and they
            are not compatible with the generic DbType defined in System.Data).</returns>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetSystemType(System.Int64)">
            <summary>
            This method should return the system type corresponding to the database specific type
            indicated by the long. The default implementation will throw an exception.
            </summary>
            <param name="dbType">The provider specific database type enum value.</param>
            <returns>The closest matching system type.</returns>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetDefaultNullValue(System.Type)">
            <summary>
            Obtain the default NullValue to use with the TableColumn attribute for columns mapping
            to a system type that does not allow null assignment. This method is intended for use
            by code generators.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetTableName(System.String)">
            <summary>
            Formats the given table name for use in queries. This may include prefixing
            it with a schema name or suffixing it with an alias (for multi-table selects).
            This default implementation simply returns the string given.
            </summary>
            <param name="tableName">The table name to format</param>
            <returns>The formatted table name</returns>
        </member>
        <member name="P:Gentle.Framework.GentleSqlFactory.MinimumSupportedDateTime">
            <summary>
            Returns the minimum supported DateTime value. This is a generic method
            returning the arbitrarily chosen value of 1/1/1800.
            </summary>
        </member>
        <member name="P:Gentle.Framework.GentleSqlFactory.MaximumSupportedDateTime">
            <summary>
            Returns the maximum supported DateTime value. This is a generic method
            returning the arbitrarily chosen value of 1/1/3000.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetParameterPrefix">
            <summary>
            Obtain the character or string used to prefix parameters.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetParameterSuffix">
            <summary>
            Obtain the character or string used to suffix parameters.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetParameterCollectionKey(System.String)">
            <summary>
            Obtain the name to use for name-based indexing into the IDbCommand.Parameters
            collections. Most databases omit the parameter prefix, whereas some require it
            to be present (e.g. SQLite).
            </summary>
            <param name="paramName">The parameter name without quoting or prefix/suffix.</param>
            <returns>The name to use when accessing the IDbCommand.Parameters hashtable.</returns>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetStatementTerminator">
            <summary>
            Obtain the character or string used to terminate or delimit statements.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.IsReservedWord(System.String)">
            <summary>
            Determine is a word is reserved and needs special quoting.
            </summary>
            <returns>True if the word is reserved</returns>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.QuoteReservedWord(System.String)">
            <summary>
            Obtain a quoted version of the reserved word to allow the reserved word to be 
            used in queries anyway. If a reserved word cannot be quoted this method should
            raise an error informing the user that they need to pick a different name.
            </summary>
            <returns>The given reserved word or field quoted to avoid errors.</returns>
        </member>
        <member name="P:Gentle.Framework.GentleSqlFactory.Capabilities">
            <summary>
            Obtain an enum describing the supported database capabilities. The default is
            to support all capabilities. See <see cref="T:Gentle.Framework.Capability"/> for details on the 
            available capabilities.
            </summary>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.HasCapability(Gentle.Framework.Capability)">
            <summary>
            Call this method to check for the availability of a certain capability or
            combined set of capabilities (which must all be present).
            </summary>
            <param name="dc">The capability to check for.</param>
            <returns>True if the database supports the capability.</returns>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetOperatorBegin(Gentle.Framework.Operator,System.Boolean)">
            <summary>
            Produce the actual SQL string for the specified <see cref="T:Gentle.Framework.Operator"/>. This is the part
            of the SQL string between the column name and the parameter value.
            </summary>
            <param name="op">The operator to convert to SQL</param>
            <param name="isValueNull">This parameter indicates whether the value of the parameter is null. This
            is required because different operators must be used for null equality checls.</param>
            <returns>The SQL string for the specified operator</returns>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetOperatorEnd(Gentle.Framework.Operator)">
            <summary>
            Produce the actual SQL string for the specified <see cref="T:Gentle.Framework.Operator"/>. This is the part
            of the SQL string after the parameter value. This string is usually empty.
            </summary>
            <param name="op">The operator to convert to SQL</param>
            <returns>The SQL string for the specified operator</returns>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetQuoteCharacter">
            <summary>
            Obtain the character used to delimit string parameters.
            </summary>
            <returns>The quote character.</returns>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.GetIdentitySelect(System.String,Gentle.Framework.ObjectMap)">
            <summary>
            Get the statement for retrieving last inserted row id for auto-generated id columns
            </summary>
            <param name="sql"></param>
            <param name="om">An <see cref="T:Gentle.Framework.ObjectMap"/> instance of the object for which to retrieve the identity select</param>
            <returns></returns>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.AddParameter(System.Data.IDbCommand,System.String,System.Type)">
            <summary>
            Add an SQL parameter to the given IDbCommand object.
            </summary>
            <param name="cmd">The IDbCommand object to operate on.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The system type of the paramater.</param>
        </member>
        <member name="M:Gentle.Framework.GentleSqlFactory.AddParameter(System.Data.IDbCommand,System.String,System.Int64)">
            <summary>
            Add an SQL parameter to the given IDbCommand object.
            </summary>
            <param name="cmd">The IDbCommand object to operate on.</param>
            <param name="name">The name of the parameter.</param>
            <param name="dbType">The long value of the provider specific database type enum (e.g. DbType)</param>
        </member>
        <member name="T:Gentle.Framework.IValidationPersistent">
            <summary>
            Interface for <see cref="T:Gentle.Framework.Persistent"/> objects that want to implement validations.
            </summary>
        </member>
        <member name="T:Gentle.Framework.RangeValidatorAttribute">
            <summary>
            Validates if the given property is between the range values specifed.
            If the member value being validated matches any of the two values it will pass 
            validation (note: Gentle 1.2.5 and earlier did not consider this valid).
            If you pass in strings then these are assumed to contain dates formatted using 
            invariant culture. If either Min or Max is not specified the range is considered 
            to be open-ended and validation only occurs against the specified value. A null
            value never passes validation.
            </summary>
        </member>
        <member name="P:Gentle.Framework.RangeValidatorAttribute.Min">
            <summary>
            The minimum permitted value (inclusive). 
            </summary>
        </member>
        <member name="P:Gentle.Framework.RangeValidatorAttribute.Max">
            <summary>
            The maximum permitted value (inclusive).
            </summary>
        </member>
        <member name="M:Gentle.Framework.RangeValidatorAttribute.#ctor">
            <summary>
            The default constructor for the <see cref="T:Gentle.Framework.RangeValidatorAttribute"/> class.
            </summary>
        </member>
        <member name="M:Gentle.Framework.RangeValidatorAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Constructor for the <see cref="T:Gentle.Framework.RangeValidatorAttribute"/> class permitting you to
            specify the minimum and maximum values permitted.
            </summary>
        </member>
        <member name="M:Gentle.Framework.RangeValidatorAttribute.Validate(System.String,System.Object,System.Object)">
            <summary>
            This method is invoked to perform the actual range validation on the given property.
            </summary>
            <param name="propertyName">The name of the property being validated.</param>
            <param name="propertyValue">The property value to validate.</param>
            <param name="propertyOwner">The persistent object that holds the property being validated.</param>
            <returns>This method returns true if the validation succeeds and false otherwise.</returns>
        </member>
        <member name="T:Gentle.Framework.RegexValidatorAttribute">
            <summary>
            Determines if the given property matches a regular expression. If a value is null then
            it will always pass (note: you can use the <see cref="T:Gentle.Framework.RequiredValidatorAttribute"/> to 
            ensure that a value is not null).
            </summary>
        </member>
        <member name="P:Gentle.Framework.RegexValidatorAttribute.Expression">
            <summary>
            The regular expression to validate against.
            </summary>
        </member>
        <member name="M:Gentle.Framework.RegexValidatorAttribute.#ctor">
            <summary>
            The default constructor for the <see cref="T:Gentle.Framework.RegexValidatorAttribute"/> class.
            </summary>
        </member>
        <member name="M:Gentle.Framework.RegexValidatorAttribute.#ctor(System.String)">
            <summary>
            Constructor for the <see cref="T:Gentle.Framework.RegexValidatorAttribute"/> class permitting you
            to specify the regular expression to validate against.
            </summary>
        </member>
        <member name="M:Gentle.Framework.RegexValidatorAttribute.Validate(System.String,System.Object,System.Object)">
            <summary>
            This method is invoked to perform the actual range validation on the given property.
            </summary>
            <param name="propertyName">The name of the property being validated.</param>
            <param name="propertyValue">The property value to validate.</param>
            <param name="propertyOwner">The persistent object that holds the property being validated.</param>
            <returns>This method returns true if the validation succeeds and false otherwise.</returns>
        </member>
        <member name="T:Gentle.Framework.RequiredValidatorAttribute">
            <summary>
            Apply this attribute to members which must have a value assigned. This is mostly
            useful with strings.
            </summary>
        </member>
        <member name="P:Gentle.Framework.RequiredValidatorAttribute.AllowNull">
            <summary>
            Set to <see langword="true"/> to allow a null value to pass validation.
            </summary>
        </member>
        <member name="M:Gentle.Framework.RequiredValidatorAttribute.Validate(System.String,System.Object,System.Object)">
            <summary>
            This method is invoked to perform the actual range validation on the given property.
            </summary>
            <param name="propertyName">The name of the property being validated.</param>
            <param name="propertyValue">The property value to validate.</param>
            <param name="propertyOwner">The persistent object that holds the property being validated.</param>
            <returns>This method returns true if the validation succeeds and false otherwise.</returns>
        </member>
        <member name="T:Gentle.Framework.ValidationException">
            <summary>
            Strongly typed exception used for dealing with exceptions.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ValidationException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ValidationException.#ctor(Gentle.Common.Error,System.String)">
            <summary>
            Constructor taking an <see cref="T:Gentle.Common.Error"/> and a custom message to go with the error. 
            The framework consistently uses the <see cref="T:Gentle.Common.Error"/> enumeration to classify 
            raised exceptions.
            </summary>
            <param name="error">The Error condition leading to this exception</param>
            <param name="msg">An additional message text</param>
        </member>
        <member name="T:Gentle.Framework.ValidationMessage">
            <summary>
            This class is used to convey information on validation failures.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ValidationMessage.Id">
            <summary>
            Id of the message, used for il8n.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ValidationMessage.Text">
            <summary>
            Text of the error message, used if il8n is a bit overkill for you.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ValidationMessage.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Gentle.Framework.ValidationMessage.GetMessage(System.String,System.Object[])">
            <summary>
            Get the message string for the current culture.
            </summary>
            <param name="messageId">The message id to retrieve.</param>
            <param name="args">Optional replacement values for a templated string.</param>
            <returns>The string value of the message to return.</returns>
        </member>
        <member name="T:Gentle.Framework.ValidatorBaseAttribute">
            <summary>
            This is the base validator attribute, it provides a common interface 
            for all custom validations.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ValidatorBaseAttribute.Message">
            <summary>
            Internal validation message object.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ValidatorBaseAttribute.MessageId">
            <summary>
            Optional message id to use for validations.  Provide this if you would prefer to use 
            a resource bundle or some other means of looking up strings from an external source.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ValidatorBaseAttribute.MessageText">
            <summary>
            Message to provide the client/ user that explains what is incorrect about the value
            they have entered.
            </summary>
        </member>
        <member name="P:Gentle.Framework.ValidatorBaseAttribute.FailOnFirst">
            <summary>
            Indicate if the validation of an object should fail on the first failure or if the
            entire object should be validated.
            </summary>
            <value>Default: <see langword="false"/></value>
        </member>
        <member name="M:Gentle.Framework.ValidatorBaseAttribute.Validate(System.String,System.Object,System.Object)">
            <summary>
            Override this method to add the code that performs validation on the property.
            </summary>
            <param name="propertyName">The name of the property being validated.</param>
            <param name="propertyValue">The property value to validate.</param>
            <param name="propertyOwner">The persistent object that holds the property being validated.</param>
            <returns>This method should return true if the validation succeeds and false otherwise. The
            default implementation always returns true.</returns>
        </member>
    </members>
</doc>

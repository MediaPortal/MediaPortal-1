//css_reference "core.dll";
//css_reference "Databases.dll";
//css_reference "utils.dll";

using System;
using System.Text;
using System.IO;
using System.Net;
using System.Collections;
using System.Web;
using System.Text.RegularExpressions;
using MediaPortal.Util;
using MediaPortal.Video.Database;
using System.Windows.Forms;

internal class Grabber : IIMDBScriptGrabber
{
  void IIMDBScriptGrabber.FindFilm(string strSearch, int iLimit, ArrayList elements)
  {
    int iCount = 0;
    iLimit = 1000;
    int year = 0; // Year from search string
    int yearIMDB = 0; // Year from IMDB movie
    int yAcc = 1; // Year accuracy check - checks in searchstring for (year number) or [year number]

    // Get year from search string
    Regex rx = new Regex(@"^(.*)?[\[\(](19\d{2}|20\d{2})[\]\)]");
    Match match = rx.Match(strSearch);

      if (match.Success)
      {
        year = int.Parse(match.Groups[2].Value);
        strSearch = Regex.Replace(strSearch, @"\+[\[\(](19\d{2}|20\d{2})[\]\)]", string.Empty).Trim();
      }

    // If year is empty try workaround
    if (year == 0)
    {
      rx = new Regex(@"\+(\d\d\d\d$)");
      MatchCollection mcYear = rx.Matches(strSearch);
      if (mcYear.Count > 0)
      {
        int lastIndex = mcYear.Count - 1;
        year = Convert.ToInt32(mcYear[lastIndex].Value);
      }
    }

    // Try to find year without brackets
    if (year == 0)
    {
      string strYearIMDB = Regex.Match(strSearch, @"\+\d\d\d\d").Value.Replace("+", "");

      if (!string.IsNullOrEmpty(strYearIMDB))
      {
        strYearIMDB = "+(" + strYearIMDB + ")";
        strSearch = Regex.Replace(strSearch, @"\+\d\d\d\d", strYearIMDB);
        rx = new Regex(@"^(.*)?[\[\(](19\d{2}|20\d{2})[\]\)]");
        match = rx.Match(strSearch);
      }

        if (match.Success)
        {
          year = int.Parse(match.Groups[2].Value);
          strSearch = Regex.Replace(strSearch, @"\+[\[\(](19\d{2}|20\d{2})[\]\)]", string.Empty).Trim();
        }
      }

      // If string contains tt number use it
      if (Regex.Match(strSearch, @"tt\d{7}").Success)
      {
        strSearch = Regex.Match(strSearch, @"(?<imdbID>tt\d{7})").Groups["imdbID"].Value;
      }

      MediaPortal.GUI.Library.Log.Info("IMDB Script search for: {0}, year {1}", strSearch, year);

      try
      {
        string absoluteUri;
        string strUrl = "http://www.imdb.com/find?q=" + strSearch + "&s=tt";
        string strBody = GetPage(strUrl, "utf-8", out absoluteUri);

        string strBodyPopularPart = string.Empty;

        bool bFoundPopPart = false;

        int iStartOfMoviePopPartList = 0;

        //First try popular, if found try to find Exact matches for full list
        iStartOfMoviePopPartList = strBody.IndexOf("</a>Titles</h3>");
        if (iStartOfMoviePopPartList >= 0) // Pirppuli 6.1.2009: Popular titles found
        {
          strBodyPopularPart = strBody;
          bFoundPopPart = true;
        }
        

        int endOfTitleList = strBody.IndexOf("Suggestions For Improving Your Results");

        //Direct find ttxxxxxx / xxxxxx-->IMDB Movie number
        if ((iStartOfMoviePopPartList <= 0))// & (iStartOfMovieExactApproxList <= 0))
        {
          //Check if direct find is true (film page)
          // Title
          string regexPattern = @"<title>(?<movieTitle>.*?)[(].*?(?<movieYear>\d{4})";
          string strTitle = Regex.Match(strBody, regexPattern).Groups["movieTitle"].Value.Replace("IMDb -", string.Empty).Trim();
          // Year
          string strYear = Regex.Match(strBody, regexPattern).Groups["movieYear"].Value;
          if (strTitle != string.Empty && strYear != string.Empty)
          {
            HTMLUtil htmlUtil = new HTMLUtil();
            htmlUtil.ConvertHTMLToAnsi(strTitle, out strTitle);
            IMDB.IMDBUrl url = new IMDB.IMDBUrl(absoluteUri, strTitle, "IMDB_MP13x");
            elements.Add(url);
          }
          //Film is found-exit
          return;
        }
        //Popular and Partial matches
        if (bFoundPopPart)
        {
          iStartOfMoviePopPartList += @"</a>Titles</h3>".Length;
          int iEndOfMovieList = strBodyPopularPart.IndexOf("</table>", iStartOfMoviePopPartList);

        if (iEndOfMovieList < 0) iEndOfMovieList = strBodyPopularPart.Length;
        if (endOfTitleList < iEndOfMovieList && endOfTitleList > iStartOfMoviePopPartList)
          iEndOfMovieList = endOfTitleList;

          strBodyPopularPart = strBodyPopularPart.
            Substring(iStartOfMoviePopPartList, iEndOfMovieList - iStartOfMoviePopPartList);
          while (true)
          {
            //Regular Expressions method for parsing HTML code and grouping relevant information
            //Title, Options and AKA
            Match imdbEntry = Regex.Match(strBodyPopularPart,
                                          @"<td\sclass=""result_text"">.<a\shref=""(?<tt>/title/tt[0-9]*/)[^>]*>(?<title>.*?)</a>[\s](?<options>[(][^<]*)",
                                          RegexOptions.IgnoreCase |
                                          RegexOptions.IgnorePatternWhitespace |
                                          RegexOptions.Singleline |
                                          RegexOptions.Compiled);

            while (imdbEntry.Success)
            {
              // Pirppuli 6.1.2009: Added HTML entity decoding
              string imdbTitle = HttpUtility.HtmlDecode(imdbEntry.Groups["title"].Value).Replace("\"", "").Replace(
                "</a>", "");
              string imdbURL = imdbEntry.Groups["tt"].Value;
              //Aka names fix (Unicode chars as ASC) 5.4.2010 Deda -->HttpUtility.HtmlDecode(imdbEntry.Groups["options"].Value)
              string imdbOptions =
                Regex.Replace(HttpUtility.HtmlDecode(imdbEntry.Groups["options"].Value), @"<(.|\n)*?>", " ",
                              RegexOptions.IgnoreCase | RegexOptions.Compiled).Trim();
              if (Regex.Match(imdbOptions, "\\(\\d{4}").Success)
              {
                int bracket = imdbOptions.IndexOf(")") + 1;
                string option = imdbOptions.Substring(bracket);
                imdbOptions = imdbOptions.Substring(0, 5) + ")" + option;
              }
              //Do not show TV series or Shows and Video Games
              bool bSkipThisEntry = imdbOptions.Contains("(TV series)") |
                                    imdbOptions.Contains("(VG)") |
				    imdbOptions.Contains("(TV Episode)") |
				    imdbOptions.Contains("(Video Game)");

            //Year accuracy check
            if (!bSkipThisEntry && year != 0 && imdbOptions != string.Empty)
            {
              rx = new Regex(@"^(.*)?[\[\(](19\d{2}|20\d{2})[\]\)]");
              match = rx.Match(imdbOptions);
              if (match.Success)
              {
                yearIMDB = int.Parse(match.Groups[2].Value);

                if (year != yearIMDB && (year - yAcc) != yearIMDB && (year + yAcc) != yearIMDB)
                {
                  bSkipThisEntry = true;
                }
              }
            }

              if (bSkipThisEntry == false)
              {
                //Original Movie title (Extension "IMDB")
                IMDB.IMDBUrl url = new IMDB.IMDBUrl
                  ("http://www.imdb.com" + imdbURL, imdbTitle + " " + imdbOptions, "IMDB_MP13x");
                elements.Add(url);
                iCount++;
              }
              imdbEntry = imdbEntry.NextMatch();
              if (iCount > iLimit) break;
            }
            break;
          }
        }
      }
      catch (Exception ex)
      {
        MediaPortal.GUI.Library.Log.Error("exception for imdb lookup of {0} err:{1} stack:{2}", strSearch, ex.Message,
                                          ex.StackTrace);
      }
  }

  //Movie details
  bool IIMDBScriptGrabber.GetDetails(IMDB.IMDBUrl url, ref IMDBMovie movieDetails)
  {
    try
    {
      movieDetails.Reset();
      movieDetails.Database = "IMDB_MP13x";

      string strAbsUrl;
      string strBody = GetPage(url.URL, "utf-8", out strAbsUrl);
      if (string.IsNullOrEmpty(strBody))
        return false;

      string regexBlockPattern = string.Empty;
      string regexPattern = string.Empty;
      string block = string.Empty;

      // IMDB Number
      int iPos = strAbsUrl.IndexOf("/title/");
      if (iPos > 0)
      {
        iPos += "/title/".Length;
        movieDetails.IMDBNumber = strAbsUrl.Substring(iPos);
        int pos = movieDetails.IMDBNumber.IndexOf("/");
        if (pos > 0)
          movieDetails.IMDBNumber = movieDetails.IMDBNumber.Substring(0, pos);
      }

      // Get covers
      movieDetails.ThumbURL = SearchCover(movieDetails.IMDBNumber, strBody);

      // TMDB Title
      bool useTMDB = false; // set-> false <-for original IMDB

      regexPattern = @"<title>(?<movieTitle>.*?)[(].*?(?<movieYear>\d{4})";
      string titleIMDB = Regex.Match(strBody, regexPattern).Groups["movieTitle"].Value.Replace("IMDb -", string.Empty);
      movieDetails.Title = HttpUtility.HtmlDecode(titleIMDB).Trim();

      if (useTMDB)
      {
        string tmdbUrl = "http://api.themoviedb.org/2.1/Movie.imdbLookup/-/xml/2ed40b5d82aa804a2b1fcedb5ca8d97a/" +
                         movieDetails.IMDBNumber;
        string strAbsTmdbUrl = string.Empty;
        string strTmdbXML = GetPage(tmdbUrl, "utf-8", out strAbsTmdbUrl);
        string titleEng = Regex.Match(strTmdbXML, "<name>(?<titleEng>.*?)</name>").Groups["titleEng"].Value.
            Replace("&amp;", "&").
            Replace("&lt;", "<").
            Replace("&gt;", ">").
            Replace("&quot;", "\"").
            Replace("&apos;", "'");
        if (titleEng != string.Empty)
        {
          movieDetails.Title = HttpUtility.HtmlDecode(titleEng);
        }
      }

      // Year
      int year = int.Parse(Regex.Match(strBody, regexPattern).Groups["movieYear"].Value);
      movieDetails.Year = year;

      // Director
      regexBlockPattern =
          @"<h4[^>]*>[^D]*Director[s]?:[^<]*</h4>[^<]*(?<directors_block>.*?)</div>";
      regexPattern = @"href=""/name/nm\d{7}/""[^>]*>(?<movieDirectors>[^<]+)</a>";
      block = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline).Groups["directors_block"].Value;
      movieDetails.Director = HttpUtility.HtmlDecode(Regex.Match(block, regexPattern, RegexOptions.Singleline).Groups["movieDirectors"].Value);

      // Writers
      regexBlockPattern =
          "<h4[^>]*>[^W]*Writer[s]?:[^<]*</h4>[^<]*(?<writers_block>.*?)</div>";
      regexPattern =
          @"href=""/name/nm\d{7}/""[^>]*>(?<writer>[^<]+)</a>(?<role>)";
      block = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline).Groups["writers_block"].Value;
      MatchCollection mcWriters = Regex.Matches(block, regexPattern);
      if (mcWriters.Count != 0)
      {
        string writers = string.Empty;

        foreach (Match mwriter in mcWriters)
        {
          string strWriter = string.Empty;
          strWriter = HttpUtility.HtmlDecode(mwriter.Groups["writer"].Value);

          string strWriterRole = string.Empty;
          strWriterRole = HttpUtility.HtmlDecode(mwriter.Groups["role"].Value);
          if (strWriterRole != string.Empty)
          {
            writers = writers + strWriter + " " + strWriterRole + " / ";
          }
          else
          {
            writers = writers + strWriter + " / ";
          }
        }
        try
        {
          writers = HttpUtility.HtmlDecode(writers.Remove(writers.LastIndexOf(" / ")));
          movieDetails.WritingCredits = writers.Replace("...", "").Trim();
        }
        catch (Exception) { }
      }

      // Actors
      regexBlockPattern = @"<table class=""cast"">.*?</table>|<table class=""cast_list"">.*?</table>";
      string others = @"td class=""nm""><a href=./name.*?>(?<actor>.*?)</a><.*?<td class=""char"">(?<role>.*?)<";
      regexPattern =
            @"href=""/name/nm\d{7}/"".*?alt=""(?<actor>.*?)"".*?<td.class=""character"">.*?<div>(?<role>.*?)</div>";
      Match castBlock = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline);

      string strCastBlock = HttpUtility.HtmlDecode(castBlock.Value);

      MatchCollection mc = Regex.Matches(strCastBlock, regexPattern, RegexOptions.Singleline);

      string strActor = string.Empty;
      string strRole = string.Empty;

      if (mc.Count != 0)
      {
        foreach (Match m in mc)
        {
          strActor = string.Empty;
          strActor = m.Groups["actor"].Value;
          strActor = Utils.stripHTMLtags(strActor).Trim().Replace("\n", "");
          strActor = HttpUtility.HtmlDecode(strActor).Replace(",", ";");

          strRole = string.Empty;
          strRole = m.Groups["role"].Value;
          strRole = Utils.stripHTMLtags(strRole).Trim().Replace("\n", "");
          strRole = HttpUtility.HtmlDecode(strRole).Replace(",", ";").Replace("  ", "").Replace("(", " (");
          string regex = "(\\(.*\\))";
          strRole = Regex.Replace(strRole, regex, "").Trim();

          movieDetails.Cast += strActor;
          if (strRole != string.Empty)
            movieDetails.Cast += " as " + strRole;

          movieDetails.Cast += "\n";
        }
      }
      else
      {
        MatchCollection mcother = Regex.Matches(strCastBlock, others);

        foreach (Match m in mcother)
        {
          strActor = string.Empty;
          strActor = m.Groups["actor"].Value;
          strActor = Utils.stripHTMLtags(strActor).Trim();
          strActor = HttpUtility.HtmlDecode(strActor).Replace(",", ";").Replace("\n", "");

          strRole = string.Empty;
          strRole = m.Groups["role"].Value;
          strRole = Utils.stripHTMLtags(strRole).Trim();
          strRole = HttpUtility.HtmlDecode(strRole).Replace(",", ";").Replace("\n", "");
          string regex = "(\\(.*\\))";
          strRole = Regex.Replace(strRole, regex, "").Trim();

          movieDetails.Cast += strActor;
          if (strRole != string.Empty)
            movieDetails.Cast += " as " + strRole;

          movieDetails.Cast += "\n";
        }
      }

      // Genres
      regexBlockPattern =
          @"<h4[^>]*>Genre[s]?:[^<]*</h4>(?<genres_block>.+?)</div>";
      regexPattern = @"""\s*href=""/[Gg]enre[s]?/(?<movieGenres>.+?)""";
      block = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline).Value;
      MatchCollection mcGenre = Regex.Matches(block, regexPattern);
      string genre = string.Empty;
      foreach (Match m in mcGenre)
      {
        genre = genre + m.Groups["movieGenres"] + " / ";
      }
      try
      {
        movieDetails.Genre = HttpUtility.HtmlDecode(genre.Remove(genre.LastIndexOf(" / ")));
      }
      catch (Exception) { }

      // Studios
      regexBlockPattern =
          @"<h4\sclass=""inline"">Production\sCo:</h4>.*?href=""companycredits""";
      regexPattern = @"href=""/company[^""]+""\s+>(?<movieStudios>[^<]+)</a>";
      block = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline).Value;
      MatchCollection mcStudios = Regex.Matches(block, regexPattern, RegexOptions.Singleline);
      string studio = string.Empty;
      foreach (Match ms in mcStudios)
      {
        studio = studio + ms.Groups["movieStudios"] + " / ";
      }
      try
      {
        movieDetails.Studios = HttpUtility.HtmlDecode(studio.Remove(studio.LastIndexOf(" / ")));
      }
      catch (Exception) { }

      // Country
      regexPattern = @"href=./country/[^>]+>(?<country>[^<]+)</a>";
      string country = Regex.Match(strBody, regexPattern).Groups["country"].Value;
      movieDetails.Country = country;

      // Language
      regexPattern = @"href=./language/[^>]+>(?<language>[^<]+)</a>";
      string language = Regex.Match(strBody, regexPattern).Groups["language"].Value;
      movieDetails.Language = language;

      // MPARating
      //
      // Get rating from main movie page if exists
      regexBlockPattern = @"<div\sclass=""infobar"".*?nbsp;<a";
      block = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline).Value;
      regexPattern = @"alt=""(?<rating>.*?)""";
      string mCertUSA = Regex.Match(block, regexPattern, RegexOptions.Singleline).Groups["rating"].Value.Replace("_", "-");
      if (mCertUSA.ToLower().Contains("tv-"))
        mCertUSA = string.Empty;

      //Get all other ratings
      string mpaRating = string.Empty;
      strAbsUrl = string.Empty;
      string strBody2 = GetPage(url.URL + "parentalguide#certification", "utf-8", out strAbsUrl);
      regexBlockPattern = @"<a\shref=""/search/title\?certificates=.*?</div>";
      Match mCert = Regex.Match(HttpUtility.HtmlDecode(strBody2), regexBlockPattern, RegexOptions.Singleline);
      string tempRating = Utils.stripHTMLtags(mCert.Value).Replace(" /", " |");
      //User locale
      string land = System.Globalization.CultureInfo.CurrentCulture.EnglishName;
      land = land.Substring(land.LastIndexOf("(") + 1).Replace(")", "").Trim();
      string landcode = System.Globalization.CultureInfo.CurrentCulture.Name;
      landcode = landcode.Substring(landcode.LastIndexOf("-") + 1).Trim();
      //Try to find rating according user country
      char[] splitter = { '|' };
      string[] landRating = tempRating.Split(splitter);
      if (landRating.Length > 0)
      {
        for (int i = 0; i < landRating.Length; ++i)
        {
          mpaRating = landRating[i];

          //Country check - IMDB is not so ISO oriented
          if (mpaRating.Contains("UK:"))
            mpaRating = mpaRating.Replace("UK:", "United Kingdom:");
          //

          if (mpaRating.Contains(land) | mpaRating.Contains(landcode))
          {
            if (mpaRating.Contains("("))
              mpaRating = mpaRating.Substring(0, mpaRating.IndexOf("("));
            movieDetails.MPARating = mpaRating.Substring(mpaRating.IndexOf(":") + 1).Trim();
            break;
          }
        }
        // No user country rating, try to set default as USA (if found in cert. list and not in  main page)
        if ((mCertUSA == string.Empty || mCertUSA.ToLower().Contains("unrated") || mCertUSA.ToLower().Contains("approved")) && movieDetails.MPARating == string.Empty)
        {
          for (int i = 0; i < landRating.Length; ++i)
          {
            mpaRating = landRating[i];
            if (mpaRating.Contains("USA:") &&
               !mpaRating.ToLower().Contains("unrated") &&
               !mpaRating.ToLower().Contains("approved") &&
               !mpaRating.ToLower().Contains("tv-"))
            {
              if (mpaRating.Contains("("))
                mpaRating = mpaRating.Substring(0, mpaRating.IndexOf("("));
              movieDetails.MPARating = mpaRating.Substring(mpaRating.IndexOf(":") + 1).Trim();
              break;
            }
          }
        }
        // No user country but IMDB usa rating from main page is there
        if (movieDetails.MPARating == string.Empty)
          movieDetails.MPARating = mCertUSA;
        // No user country or IMDB USA, show NR
        if (movieDetails.MPARating == string.Empty)
          movieDetails.MPARating = "NR";
      }

      // Runtime
      regexPattern =
        "<h5>Runtime:</h5>.*?(?<movieRuntime>\\d+)\\smin\\s+|(?<movieRuntime>\\d+)\\smin";
      int runtime;
      if (int.TryParse(Regex.Match(strBody, regexPattern).Groups["movieRuntime"].Value, out runtime))
      {
        movieDetails.RunTime = runtime;
      }

      // Tagline
      regexPattern =
        @"<h5>Tagline.</h5>[^>]+>[^\r]?(?<movieTagline>[^<]+)|<h4[^>]*>Tagline[s]?:</h4>[\s\f\r]*(?<movieTagline>[^<]+)";
      string tagline = Regex.Match(strBody, regexPattern).Groups["movieTagline"].Value.Replace("\n", string.Empty); ;
      movieDetails.TagLine = HttpUtility.HtmlDecode(tagline);

      // Rating
      regexPattern = @"ratingValue"">(?<movieScore>\d+.\d+)</span>";
      string rating = Regex.Match(strBody, regexPattern).Groups["movieScore"].Value.Replace('.', ',');
      if (rating != string.Empty)
      {
        movieDetails.Rating = (float)Double.Parse(rating);

        if (movieDetails.Rating > 10.0f)
          movieDetails.Rating /= 10.0f;
      }

      // Votes
      regexPattern = @"""ratingCount"">(?<moviePopularity>.*?)<";
      string votes = Regex.Match(strBody, regexPattern).Groups["moviePopularity"].Value;
      movieDetails.Votes = votes.Replace(",", "");

      // Plot short
      regexPattern = @"itemprop=""description"">(?<moviePlotShort>[^<]+)<";
      string shortPlot = Regex.Match(strBody, regexPattern, RegexOptions.Singleline).Groups["moviePlotShort"].Value;
      movieDetails.PlotOutline = HttpUtility.HtmlDecode(Utils.stripHTMLtags(shortPlot)).Trim();

      // Plot long
      string strPlotUrl = "http://www.imdb.com/title/" + movieDetails.IMDBNumber + "/plotsummary";
      try
      {
        string absoluteUri;
        string strPlotHTML = GetPage(strPlotUrl, "utf-8", out absoluteUri);
        if (0 != strPlotHTML.Length)
        {
          int iPlotStart = strPlotHTML.IndexOf("<p class=\"plotpar\">");
          if (iPlotStart >= 0)
          {
            iPlotStart += "<p class=\"plotpar\">".Length;

            int iPlotEnd = strPlotHTML.IndexOf("<i>", iPlotStart); // ends with <i> for person who wrote it or
            if (iPlotEnd < 0) iPlotEnd = strPlotHTML.IndexOf("</p>", iPlotStart); // </p> for end of paragraph

            if (iPlotEnd >= 0)
            {
              movieDetails.Plot = strPlotHTML.Substring(iPlotStart, iPlotEnd - iPlotStart);
              movieDetails.Plot = Utils.stripHTMLtags(movieDetails.Plot);
              movieDetails.Plot = HttpUtility.HtmlDecode(movieDetails.Plot); // remove HTML entities
            }
          }
        }
        if (movieDetails.Plot == string.Empty)
          movieDetails.Plot = movieDetails.PlotOutline;
        if (movieDetails.PlotOutline == string.Empty)
          movieDetails.PlotOutline = movieDetails.Plot;
      }
      catch (Exception)
      {
      }

      //User review
      string reviewUrl = "http://www.imdb.com/title/" + movieDetails.IMDBNumber + "/usercomments?filter=best&spoiler=hide";
      strBody = GetPage(reviewUrl, "utf-8", out strAbsUrl);
      regexPattern = "<a\\shref=\"/user/.*?<p>(?<review>.*?)</p>";
      Match strReview = Regex.Match(HttpUtility.HtmlDecode(strBody), regexPattern, RegexOptions.Singleline);
      if (strReview.Success)
      {
        string review =
            Utils.stripHTMLtags(strReview.Groups["review"].Value.Replace("\n", " ").Trim());
        movieDetails.UserReview = HttpUtility.HtmlDecode(review);
      }
      return true;
    }
    catch (Exception) { }
    return false;
  }

  private string SearchCover(string imdbID, string strBody)
  {
    string absoluteUri = string.Empty;
    if (imdbID == null) return string.Empty;
    if (imdbID == string.Empty | !imdbID.StartsWith("tt")) return string.Empty;

    string cover = "";

    // Get Main Movie page and find default poster link
    Match posterPageLink = Regex.Match(strBody,
                                       @"id=""img_primary"">.*?src='/rg/title-overview/primary/images.*?href=""(?<defaultPic>.*?)""",
                                       RegexOptions.Singleline);

    // Now parse default cover picture html page to get default cover
    strBody = GetPage("http://www.imdb.com" + posterPageLink.Groups["defaultPic"].Value, "utf-8", out absoluteUri);
    Match jpgDefault = Regex.Match(strBody, @"<img[\s]id=.*?alt=.*?src=""(?<jpg>.*?jpg)");

    if (jpgDefault.Success)
    {
      cover = HttpUtility.HtmlDecode(jpgDefault.Groups["jpg"].Value);
    }
    return cover;
  }

  string IIMDBScriptGrabber.GetName()
  {
    return "IMDB V1.3.x";
  }

  string IIMDBScriptGrabber.GetLanguage()
  {
    return "EN";
  }

  private string GetPage(string strUrl, string strEncode, out string absoluteUri)
  {
    string strBody = string.Empty;
    absoluteUri = string.Empty;
    Stream receiveStream = null;
    StreamReader sr = null;
    WebResponse result = null;
    try
    {
      // Make the Webrequest
      //Log.Info("IMDB: get page:{0}", strURL);
      WebRequest req = WebRequest.Create(strUrl);
      req.Headers.Add("Accept-Language", "en-US");
      req.Timeout = 10000;

      result = req.GetResponse();
      receiveStream = result.GetResponseStream();

      // Encoding: depends on selected page
      Encoding encode = System.Text.Encoding.GetEncoding(strEncode);
      sr = new StreamReader(receiveStream, encode);
      strBody = sr.ReadToEnd();

      absoluteUri = result.ResponseUri.AbsoluteUri;
    }
    catch (Exception ex)
    {
      MediaPortal.GUI.Library.Log.Error("Error retreiving WebPage: {0} Encoding:{1} err:{2} stack:{3}", strUrl,
                                        strEncode, ex.Message, ex.StackTrace);
    }
    finally
    {
      if (sr != null)
      {
        try
        {
          sr.Close();
        }
        catch (Exception)
        {
        }
      }
      if (receiveStream != null)
      {
        try
        {
          receiveStream.Close();
        }
        catch (Exception)
        {
        }
      }
      if (result != null)
      {
        try
        {
          result.Close();
        }
        catch (Exception)
        {
        }
      }
    }
    return strBody;
  }
}

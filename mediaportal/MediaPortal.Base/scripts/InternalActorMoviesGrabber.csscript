//css_reference System.Core;

//css_reference "core.dll";
//css_reference "Databases.dll";
//css_reference "utils.dll";
//css_reference "Newtonsoft.Json.dll";

using System;
using System.Text;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Web;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

using MediaPortal.GUI.Library;
using MediaPortal.Util;
using MediaPortal.Database;
using MediaPortal.Video.Database;

using Newtonsoft.Json;

internal class InternalActorsGrabber : IIMDBInternalActorsScriptGrabber
{
  const string strGrabberVersion = "20250713.I";

  private string _strBody = string.Empty;
  private TMDBMovie tmdbMovie;
  private TMDBMovie imdbMovie;

  public const string TITLE_MASK = "{0}{1}{2}"; // {0} - Title {1} - Separator {2} - Original Title {3} - Year
  public const string TITLE_SEPARATOR = " / ";

  public const bool FULL_ACTOR_INFO = false; // true - TMDB + IMDB, false - TMDB or IMDB
  public const bool GET_ACTOR_AWARDS = true;

  #region ActorMoviesDetails

  public string GetThumbImdb(string imdbId)
  {
    Log.Debug("InternalActorsGrabber - GetThumbImdb - Version: {0}.", strGrabberVersion);

    TMDBCoverSearch tmdbSearch = new TMDBCoverSearch();
    tmdbSearch.SearchCovers(string.Empty, imdbId);

    if ((tmdbSearch.Count > 0) && !string.IsNullOrEmpty(tmdbSearch[0]))
    {
      return tmdbSearch[0];
    }

    string thumb = string.Empty;

    string uri;
    string strUrl = String.Format("https://m.imdb.com/title/{0}/", imdbId);
    string strBody = GetPage(strUrl, "utf-8", out uri);
    string regex = @"ld\+json[^}]+?image.:.(?<poster>.*?)\.jpg";
    thumb = Regex.Match(strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["poster"].Value;

    if (!string.IsNullOrEmpty(thumb))
    {
      thumb += "UX" + Convert.ToString((int)Thumbs.ThumbLargeResolution) + "_.jpg";
    }

    return thumb;
  }

  public bool GetPlotImdb(ref IMDBMovie movie)
  {
    Log.Debug("InternalActorsGrabber - GetPlotImdb - Version: {0}.", strGrabberVersion);

    // TMDB
    tmdbMovie = GetTMDBDetails(movie.IMDBNumber);
    GetCast(ref tmdbMovie);
    GetTMDBRelease(ref tmdbMovie);

    // IMDB
    imdbMovie = GetIMDBDetails(movie.IMDBNumber);

    // Plot
    string shortPlot = string.Empty;
    string fullPlot =  string.Empty;
    if (string.IsNullOrEmpty(tmdbMovie.Plot) && string.IsNullOrEmpty(imdbMovie.Plot))
    {
      // Short plot
      string strUrl = String.Format("https://m.imdb.com/title/{0}/", movie.IMDBNumber);
      string regex = @"plotText.+?plainText.:.(?<moviePlot>.+?).,.__typename";

      _strBody = string.Empty;
      shortPlot = GetPlot(strUrl, regex, ref _strBody);

      // Full plot
      strUrl = String.Format("https://m.imdb.com/title/{0}/plotsummary/", movie.IMDBNumber);
      regex = @"plotText.+?plainText.:.(?<moviePlot>.+?)""";

      _strBody = string.Empty;
      fullPlot = GetPlot(strUrl, regex, ref _strBody);
    }
    else
    {
      shortPlot = GetMiniDescription(string.IsNullOrEmpty(tmdbMovie.Plot) ? imdbMovie.Plot : tmdbMovie.Plot);
      fullPlot = string.IsNullOrEmpty(tmdbMovie.Plot) ? imdbMovie.Plot : tmdbMovie.Plot;
    }
    movie.Plot = shortPlot;
    movie.PlotOutline = fullPlot;

    // Extra Data like Director, Actors, Rating....
    GetExtraDataImdb(ref movie);

    return true;
  }

  private string GetPlot(string strUrl, string regex, ref string strBody)
  {
    Log.Debug("InternalActorsGrabber - GetPlot - Version: {0}.", strGrabberVersion);

    string absoluteUri;
    strBody = HttpUtility.HtmlDecode(GetPage(strUrl, "utf-8", out absoluteUri));

    if (!string.IsNullOrEmpty(strBody))
    {
      string strPlot = Regex.Match(strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["moviePlot"].Value;
      if (!string.IsNullOrEmpty(strPlot))
      {
        strPlot = strPlot.Replace("&amp;", "&").
                          Replace("&lt;", "<").
                          Replace("&gt;", ">").
                          Replace("&quot;", "\"").
                          Replace("&apos;", "'").
                          Replace("No overview found.", string.Empty).Trim();
        strPlot = Utils.stripHTMLtags(strPlot);
      }

      // Extra cleanup
      if (!string.IsNullOrEmpty(strPlot))
      {
        int index = strPlot.LastIndexOf(@"See full summary");
        if (index > 0)
        {
          strPlot = strPlot.Remove(index);
        }

        index = strPlot.LastIndexOf(@"See full synopsis");
        if (index > 0)
        {
          strPlot = strPlot.Remove(index);
        }
      }
      return strPlot;
    }
    return string.Empty;
  }

  private void GetExtraDataImdb(ref IMDBMovie movie)
  {
    // Update Title/Year

    // Title - TITLE_MASK {0} - Title {1} - Separator {2} - Original Title {3} - Year
    string sTitle = TITLE_MASK;
    if (!string.IsNullOrEmpty(sTitle))
    {
      if (tmdbMovie.Title.Equals(tmdbMovie.OriginalTitle, StringComparison.CurrentCultureIgnoreCase))
      {
        sTitle = sTitle.Replace("{1}", string.Empty).Replace("{2}", string.Empty).Trim();
      }
      if (string.IsNullOrEmpty(tmdbMovie.Title) || string.IsNullOrEmpty(tmdbMovie.OriginalTitle))
      {
        sTitle = sTitle.Replace("{1}", string.Empty).Trim();
      }
      if (tmdbMovie.Year < 1850)
      {
        sTitle = sTitle.Replace("({3})", string.Empty).Replace("[{3])", string.Empty).Replace("{3}", string.Empty).Trim();
      }
      sTitle = string.Format(sTitle, tmdbMovie.Title, TITLE_SEPARATOR, tmdbMovie.OriginalTitle, tmdbMovie.Year);
    }

    if (!string.IsNullOrEmpty(tmdbMovie.Title) || !string.IsNullOrEmpty(tmdbMovie.OriginalTitle))
    {
      // TMDB
      movie.Title = sTitle;
    }
    else
    {
      // IMDB
      movie.Title = imdbMovie.Title;
    }

    if (tmdbMovie.Year > 1850)
    {
      // TMDB
      movie.Year = tmdbMovie.Year;
    }
    else
    {
      // IMDB
      movie.Year = imdbMovie.Year;
    }
    // Set near future for movies without year (99% it's a future project)
    if (movie.Year < 1850)
    {
      movie.Year = DateTime.Today.Year + 5;
    }

    // TMDB + IMDB Directors and Writers
    List<TMDBPerson> MovieCrew = new List<TMDBPerson>();
    if (tmdbMovie.Crew != null)
    {
      MovieCrew.AddRange(tmdbMovie.Crew);
    }
    if (imdbMovie.Crew != null)
    {
      MovieCrew.AddRange(imdbMovie.Crew);
    }
    MovieCrew = MovieCrew.Distinct(new TMDBPersonEqualityComparer()).ToList();

    // Directors and Writers
    string sDirector = string.Empty;
    string sWriters = string.Empty;
    if (MovieCrew != null)
    {
      foreach (TMDBPerson apers in MovieCrew)
      {
        if (!string.IsNullOrEmpty(apers.Name))
        {
          if (apers.As.Contains("Direct") && string.IsNullOrEmpty(sDirector))
          {
            // Only one Director per Movie in MP
            sDirector = apers.Name; // + " (" + apers.As + ")";
          }
          else if (apers.As.Contains("Writ"))
          {
            sWriters += (!string.IsNullOrEmpty(sWriters) ? ", " : string.Empty) + apers.Name; // + " (" + apers.As + ")";
          }
        }
      }
      sDirector = sDirector.Replace("...", string.Empty).Trim();
      sWriters = sWriters.Replace("...", string.Empty).Trim();
    }

    if (!string.IsNullOrEmpty(sDirector))
    {
      movie.Director = sDirector;
    }
    if (string.IsNullOrEmpty(movie.Director))
    {
      movie.Director = Strings.Unknown;
    }

    if (!string.IsNullOrEmpty(sWriters))
    {
      movie.WritingCredits = sWriters;
    }
    if (string.IsNullOrEmpty(movie.WritingCredits))
    {
      movie.WritingCredits = Strings.Unknown;
    }

    // Genre
    if (!string.IsNullOrEmpty(tmdbMovie.Genre))
    {
      // TMDB
      movie.SingleGenre = tmdbMovie.Genre.Replace(" / ", ", ");
    }
    if (!string.IsNullOrEmpty(imdbMovie.Genre))
    {
      // IMDB
      movie.SingleGenre = imdbMovie.Genre.Replace(" / ", ", ");
    }

    // MPAA Rating
    if (!string.IsNullOrEmpty(tmdbMovie.MPARating))
    {
      // TMDB
      movie.MPARating = tmdbMovie.MPARating;
    }
    if (!string.IsNullOrEmpty(imdbMovie.MPARating))
    {
      // IMDB
      movie.MPARating = imdbMovie.MPARating;
    }
    if (string.IsNullOrEmpty(tmdbMovie.MPARating))
    {
      tmdbMovie.MPARating = "NR";
    }

    // Actors

    // TMDB Actors as Role
    string strActor = string.Empty;
    if (tmdbMovie.Cast != null)
    {
      int actorNo = 0;
      foreach (TMDBPerson apers in tmdbMovie.Cast)
      {
        if (actorNo < 4)
        {
          strActor += apers.Name + " / ";
          actorNo++;
        }
      }

      int index = strActor.LastIndexOf(" /");
      if (index > 0)
      {
        strActor = strActor.Remove(index);
      }
    }
    if (!string.IsNullOrEmpty(strActor))
    {
      movie.Cast = strActor;
    }

    // IMDB Actors
    if (string.IsNullOrEmpty(movie.Cast))
    {
      strActor = string.Empty;
      if (imdbMovie.Cast != null)
      {
        int actorNo = 0;
        foreach (TMDBPerson apers in imdbMovie.Cast)
        {
          if (actorNo < 4)
          {
            strActor += apers.Name + " / ";
            actorNo++;
          }
        }

        int index = strActor.LastIndexOf(" /");
        if (index > 0)
        {
          strActor = strActor.Remove(index);
        }
      }
      if (!string.IsNullOrEmpty(strActor))
      {
        movie.Cast = strActor;
      }
    }

    _strBody = string.Empty;
  }

  #endregion

  #region Actor/ActorDetails

  public ArrayList FindIMDBActor(string strURL)
  {
    Log.Debug("InternalActorsGrabber - FindIMDBActor - Version: {0}.", strGrabberVersion);

    ArrayList elements = new ArrayList();

    string dbActor = string.Empty;
    Regex regex = new Regex(@"q=(.+)");
    Match match = regex.Match(strURL);
    if (match.Success)
    {
      dbActor = match.Groups[1].Value;
      dbActor = HttpUtility.UrlDecode(dbActor);
    }

    try
    {
      if (!string.IsNullOrEmpty(dbActor))
      {
        ArrayList lstActors = new ArrayList();
        VideoDatabase.GetActorByName(dbActor, lstActors);
        if (lstActors != null & lstActors.Count > 0)
        {
          foreach (string actor in lstActors)
          {
            Regex regexActor = new Regex(@"\|(.+)\|(nm\d{7,8})");
            Match matchActor = regexActor.Match(actor);
            if (match.Success)
            {
              if (!string.IsNullOrWhiteSpace(match.Groups[2].Value))
              {
                IMDB.IMDBUrl newUrl = new IMDB.IMDBUrl(string.Format(@"https://www.imdb.com/name/{0}/", match.Groups[2].Value), match.Groups[1].Value + ", DB", "IMDB");
                elements.Add(newUrl);
              }
            }
          }
        }
      }
    }
    catch (Exception ex)
    {
      Log.Error("FindIMDBActor exception for DB lookup of {0} err: {1} stack: {2}", strURL, ex.Message, ex.StackTrace);
    }

    try
    {
      string absoluteUri;
      // UTF-8 have problem with special country chars, default IMDB enc is used
      string strBody = GetPage(strURL, "utf-8", out absoluteUri);
      string value = string.Empty;
      HTMLParser parser = new HTMLParser(strBody);

      if ((parser.skipToEndOf("<title>")) &&
          (parser.extractTo("</title>", ref value)) &&
          !value.ToLowerInvariant().Equals("find - imdb"))
      {
        value = new HTMLUtil().ConvertHTMLToAnsi(value);
        value = Utils.RemoveParenthesis(value).Trim();
        IMDB.IMDBUrl oneUrl = new IMDB.IMDBUrl(absoluteUri, value, "IMDB");
        elements.Add(oneUrl);
        return elements;
      }

      string regexJson = @"type=.application\/json.>(?<json>{.+?})<";
      string json = Regex.Match(strBody, regexJson, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["json"].Value;
      if (string.IsNullOrEmpty(json))
      {
        Log.Debug("FindIMDBActor IMDB = {0}, JSON not found.", strURL);
        return elements;
      }

      string regexPattern = @".id.:.(?<id>nm\d{7,8})[^}]+?displayNameText.:.(?<name>[^}]+?)"",[^}]+?Actor[^}]+?knownForTitleText.:.(?<role>[^}]+?)"",(?:[^}]+?akaName.:.(?<aka>[^}]+?)"",)?";
      MatchCollection mc = Regex.Matches(json, regexPattern);
      if (mc.Count != 0)
      {
        foreach (Match m in mc)
        {
          string url = HttpUtility.HtmlDecode(m.Groups["id"].Value.Trim());
          string name = HttpUtility.HtmlDecode(m.Groups["name"].Value.Trim());
          string role = HttpUtility.HtmlDecode(m.Groups["role"].Value.Trim());
          string aka = HttpUtility.HtmlDecode(m.Groups["aka"].Value.Trim());

          if (string.IsNullOrEmpty(url) || string.IsNullOrEmpty(name))
          {
            continue;
          }
          url = string.Format(@"https://www.imdb.com/name/{0}/", url);

          if (!string.IsNullOrEmpty(role))
          {
            name += " - " + role;
          }
          if (!string.IsNullOrEmpty(aka))
          {
            name += " - " + aka;
          }

          name = Utils.RemoveParenthesis(name).Trim();
          IMDB.IMDBUrl newUrl = new IMDB.IMDBUrl(url, name, "IMDB");
          elements.Add(newUrl);
        }
      }
    }
    catch (Exception ex)
    {
      Log.Error("FindIMDBActor exception for imdb lookup of {0} err: {1} stack: {2}", strURL, ex.Message, ex.StackTrace);
    }
    return elements;
  }

  public bool GetActorDetails(IMDB.IMDBUrl url, out IMDBActor actor)
  {
    Log.Debug("InternalActorsGrabber - GetActorDetails - Version: {0}.", strGrabberVersion);

    actor = new IMDBActor();

    try
    {
      #region Actor IMDB ID

      // IMDBActorID
      Regex rximdbid = new Regex(@"(?<imdbid>nm\d{7,8})");
      Match matchimdbid = rximdbid.Match(url.URL);
      if (matchimdbid.Success)
      {
        // Get IMDBID
        actor.IMDBActorID = matchimdbid.Groups["imdbid"].Value;
        Log.Debug("InternalActorsGrabber - GetActorDetails - IMDBID Found {0}", actor.IMDBActorID);
        url.URL = string.Format("https://m.imdb.com/name/{0}/", actor.IMDBActorID);
      }
      else
      {
        Log.Debug("InternalActorsGrabber - GetActorDetails - IMDBID Not Found {0}", url.URL);
        return false;
      }

      #endregion

      string absoluteUri;
      string html = GetPage(url.URL, "utf-8", out absoluteUri);
      string regex;

      if (string.IsNullOrEmpty(html))
      {
        return false;
      }

      IMDBActor JsonActor = GetIMDBActorDetails(actor.IMDBActorID, html);

      #region Actor Main Image

      if (string.IsNullOrEmpty(JsonActor.ThumbnailUrl))
      {
        regex = @"<meta property=.og:image.\scontent=.(?<image>.+?)\.jpg.\/>";
        string imdbImage = Regex.Match(html, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["image"].Value;
        if (!string.IsNullOrEmpty(imdbImage))
        {
          imdbImage += "UX" + Convert.ToString((int)Thumbs.ThumbLargeResolution) + "_.jpg";
          actor.ThumbnailUrl = imdbImage;
        }
      }
      else
      {
        actor.ThumbnailUrl = JsonActor.ThumbnailUrl;
      }

      #endregion

      #region Actor name

      // Actor name
      if (!string.IsNullOrEmpty(JsonActor.Name))
      {
        actor.Name = JsonActor.Name;
      }
      else
      {
        regex = @"<span[^>]+?>(?<name>[^<].+?)<\/span";
        string imdbName = Regex.Match(html, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["name"].Value;
        if (!string.IsNullOrEmpty(imdbName))
        {
          actor.Name = imdbName;
        }
      }

      if (string.IsNullOrEmpty(actor.Name))
      {
        actor.Name = url.Title;
      }

      #endregion

      HTMLParser parser = new HTMLParser(html);
      string value = string.Empty;

      #region Actor Birth date/place

      // Birth Date
      actor.DateOfBirth = string.Empty;

      if (!string.IsNullOrEmpty(JsonActor.DateOfBirth))
      {
        DateTime date = DateTime.Parse(JsonActor.DateOfBirth);
        actor.DateOfBirth = String.Format("{0:D}", date);
      }
      else if (parser.skipToEndOf(">Born</span>") && parser.extractTo("</span>", ref value))
      {
        regex = @">(?<date>[^<]+?\s\d{1,2},\s\d{4})<";
        string birthday = Regex.Match(value, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["date"].Value;
        if (!string.IsNullOrEmpty(birthday))
        {
          DateTime date = DateTime.Parse(birthday);
          actor.DateOfBirth = String.Format("{0:D}", date);
        }
      }

      if (string.IsNullOrEmpty(actor.DateOfBirth))
      {
        parser.resetPosition();
        if (parser.skipToEndOf("\"birthDate\":{") && parser.skipToEndOf("dateComponents\":") && parser.extractTo(",\"__typename\"", ref value))
        {
          value = Utils.stripHTMLtags(value).Trim();
          regex = @":(?<day>\d{1,2}),.+?:(?<month>\d{1,2}),.+?:(?<year>\d{4})";
          Match m = Regex.Match(value, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase);
          if (m.Success)
          {
            string birthday = string.Format("{0}-{1}-{2}", m.Groups["year"].Value, m.Groups["month"].Value, m.Groups["day"].Value);
            DateTime date = DateTime.Parse(birthday);
            actor.DateOfBirth = String.Format("{0:D}", date);
          }
        }
      }

      // Birth Place
      if (parser.skipToEndOf("\"birthLocation\":{\"text\":\"") && parser.extractTo("\",\"displayableProperty\"", ref value))
      {
        actor.PlaceOfBirth = HttpUtility.HtmlDecode(value);
      }

      #endregion

      parser.resetPosition();

      #region Actor Death date/place

      // Death Date
      actor.DateOfDeath = string.Empty;

      if (!string.IsNullOrEmpty(JsonActor.DateOfDeath))
      {
        DateTime date = DateTime.Parse(JsonActor.DateOfDeath);
        actor.DateOfDeath = String.Format("{0:D}", date);
      }
      else if (parser.skipToEndOf(">Died</span>") && parser.extractTo("</span>", ref value))
      {
        regex = @">(?<date>[^<]+?\s\d{1,2},\s\d{4})<";
        string deathday = Regex.Match(value, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["date"].Value;
        if (!string.IsNullOrEmpty(deathday))
        {
          DateTime date = DateTime.Parse(deathday);
          actor.DateOfDeath = String.Format("{0:D}", date);
        }
      }

      if (string.IsNullOrEmpty(actor.DateOfDeath))
      {
        parser.resetPosition();
        if (parser.skipToEndOf("\"deathDate\":{") && parser.skipToEndOf("dateComponents\":") && parser.extractTo(",\"__typename\"", ref value))
        {
          value = Utils.stripHTMLtags(value).Trim();
          regex = @":(?<day>\d{1,2}),.+?:(?<month>\d{1,2}),.+?:(?<year>\d{4})";
          Match m = Regex.Match(value, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase);
          if (m.Success)
          {
            string deathday = string.Format("{0}-{1}-{2}", m.Groups["year"].Value, m.Groups["month"].Value, m.Groups["day"].Value);
            DateTime date = DateTime.Parse(deathday);
            actor.DateOfDeath = String.Format("{0:D}", date);
          }
        }
      }

      if (!string.IsNullOrEmpty(actor.DateOfDeath))
      {
        // Death Place
        if (parser.skipToEndOf("\"deathLocation\":{\"text\":\"") && parser.extractTo("\",\"displayableProperty\"", ref value))
        {
          actor.PlaceOfDeath = HttpUtility.HtmlDecode(value);
        }
      }

      #endregion

      #region TMDB Info

      IMDBActor tmdbActor = new IMDBActor();
      if (TMDBGetActorDetails(actor.IMDBActorID, out tmdbActor))
      {
        Log.Debug("TMDB {0}: {1}", "Name", tmdbActor.Name);
        if (string.IsNullOrEmpty(actor.ThumbnailUrl) && !string.IsNullOrEmpty(tmdbActor.ThumbnailUrl))
        {
          Log.Debug("TMDB {0}: {1}", "ThumbnailUrl", tmdbActor.ThumbnailUrl);
          actor.ThumbnailUrl = tmdbActor.ThumbnailUrl;
        }

        if (string.IsNullOrEmpty(actor.DateOfBirth) && !string.IsNullOrEmpty(tmdbActor.DateOfBirth))
        {
          Log.Debug("TMDB {0}: {1}", "DateOfBirth", tmdbActor.DateOfBirth);
          actor.DateOfBirth = tmdbActor.DateOfBirth;
        }
        if (string.IsNullOrEmpty(actor.PlaceOfBirth) && !string.IsNullOrEmpty(tmdbActor.PlaceOfBirth))
        {
          Log.Debug("TMDB {0}: {1}", "PlaceOfBirth", tmdbActor.PlaceOfBirth);
          actor.PlaceOfBirth = tmdbActor.PlaceOfBirth;
        }

        if (string.IsNullOrEmpty(actor.DateOfDeath) && !string.IsNullOrEmpty(tmdbActor.DateOfDeath))
        {
          Log.Debug("TMDB {0}: {1}", "DateOfDeath", tmdbActor.DateOfDeath);
          actor.DateOfDeath = tmdbActor.DateOfDeath;
        }

        if (!string.IsNullOrEmpty(tmdbActor.MiniBiography))
        {
          Log.Debug("TMDB {0}: {1}", "MiniBiography", tmdbActor.MiniBiography);
          actor.MiniBiography = tmdbActor.MiniBiography;
        }
      }

      #endregion

      #region Zodiac and Age

      if (!string.IsNullOrEmpty(actor.DateOfDeath))
      {
        actor.DateOfDeath += GetPersonAge(actor.DateOfBirth, actor.DateOfDeath);
      }

      if (!string.IsNullOrEmpty(actor.DateOfBirth))
      {
        string zodiac = GetZodiac(actor.DateOfBirth);
        if (!string.IsNullOrEmpty(zodiac))
        {
          actor.DateOfBirth += " (" + zodiac + ")";
        }
      }

      #endregion

      parser.resetPosition();

      #region Actor biography

      // Mini Biography
      if (string.IsNullOrEmpty(tmdbActor.MiniBiography))
      {
        if (parser.skipToEndOf("href=\"/name/" + actor.IMDBActorID + "/bio?ref_=") &&
            parser.skipToEndOf("<div class=\"ipc-html-content-inner-div\">") &&
            parser.extractTo("</div>", ref value))
        {
          value = new HTMLUtil().ConvertHTMLToAnsi(value);
          value = Utils.stripHTMLtags(value).Trim();
          value = HttpUtility.HtmlDecode(value);
          actor.MiniBiography = GetMiniDescription(value);
          // Log.Debug("*** IMDB Mini Bio: {0}", value.Replace("\n", " "));
        }
      }

      actor.Biography = string.Empty;
      if (string.IsNullOrEmpty(tmdbActor.Biography) || FULL_ACTOR_INFO)
      {
        //Full Biography
        string fullBioUrl = string.Format("https://m.imdb.com/name/{0}/bio/", actor.IMDBActorID);
        html = GetPage(fullBioUrl, "utf-8", out absoluteUri);

        regex = @"bio[^}]+?plainText.:.(?<bio>[^}]+?).}";
        string bio = Regex.Match(value, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["bio"].Value;
        if (!string.IsNullOrEmpty(bio))
        {
          value = new HTMLUtil().ConvertHTMLToAnsi(bio);
          value = Utils.stripHTMLtags(value).Trim();
          value = HttpUtility.HtmlDecode(value);
          actor.Biography = value;
          // Log.Debug("*** IMDB Full Bio: {0}", value.Replace("\n", " "));
        }
      }

      if (!string.IsNullOrEmpty(tmdbActor.Biography))
      {
        if (FULL_ACTOR_INFO)
        {
          actor.Biography = tmdbActor.Biography + "\n\n" + actor.Biography;
        }
        else
        {
          actor.Biography = tmdbActor.Biography;
        }
      }

      // IMDB Awards
      string imdbAwards = GetAwardsIMDB(actor.IMDBActorID);
      if (!string.IsNullOrEmpty(imdbAwards))
      {
        actor.Biography = actor.Biography + "\n\n" + imdbAwards;
      }
      actor.Biography = actor.Biography + "\n\n";

      #endregion

      // Person is movie director or an actor/actress
      bool isActor = false;
      bool isActress = false;
      bool isDirector = false;
      bool isWriter = false;
      bool isSelf = false;

      url.URL = string.Format("https://m.imdb.com/name/{0}/fullcredits/", actor.IMDBActorID);
      html = GetPage(url.URL, "utf-8", out absoluteUri);

      if (string.IsNullOrEmpty(html))
      {
        return false;
      }

      parser.Content = html;

      #region Check person role in movie (actor, director or writer)

      if (parser.skipToEndOf("id=\"name-filmography-filter-director\""))
      {
        isDirector = true;
      }

      parser.resetPosition();

      if (parser.skipToEndOf("id=\"name-filmography-filter-writer\""))
      {
        isWriter = true;
      }

      parser.resetPosition();

      if (parser.skipToEndOf("id=\"name-filmography-filter-actress\""))
      {
        isActress = true;
      }

      parser.resetPosition();

      if (parser.skipToEndOf("id=\"name-filmography-filter-actor\""))
      {
        isActor = true;
      }

      parser.resetPosition();

      if (parser.skipToEndOf("id=\"name-filmography-filter-self\""))
      {
        isSelf = true;
      }

      #endregion

      parser = null;

      #region Get movies for every role

      // Get filmography Director
      if (isDirector)
      {
        GetActorMovies(actor, false, false, true, false, false);
      }

      // Get filmography for writers
      if (isWriter)
      {
        GetActorMovies(actor, false, false, false, true, false);
      }

      // Get filmography Actor
      if (isActor || isActress)
      {
        GetActorMovies(actor, isActor, isActress, false, false, false);
      }

      // Get filmography Actor self
      if (isSelf)
      {
        GetActorMovies(actor, false, false, false, false, true);
      }

      ClearPageCache();

      if (!isActor && !isActress && !isDirector && !isWriter && !isSelf)
      {
         Log.Error("InternalActorsGrabber - GetActorDetails - {0} | Strange person, perhaps the IMDB markup has changed.", url.URL);
      }

      #endregion

      // Add filmography
      if (actor.Count > 0)
      {
        actor.SortActorMoviesByYear();
      }

      return true;
    }
    catch (Exception ex)
    {
      Log.Error("InternalActorsGrabber - GetActorDetails - {0} exception: {1} {2} {3}", url.URL, ex.Message, ex.Source, ex.StackTrace);
    }
    return false;
  }

  // Actor Movies
  public class JsonIMDBActorMovies
  {
      public JsonIMDBActorMoviesProps props { get; set; }
  }

  public class JsonIMDBActorMoviesProps
  {
      public JsonIMDBActorMoviesPageProps pageProps { get; set; }
  }

  public class JsonIMDBActorMoviesPageProps
  {
      public JsonIMDBActorMoviesSearchResults searchResults { get; set; }
  }

  public class JsonIMDBActorMoviesSearchResults
  {
      public JsonIMDBActorMoviesTitleResults titleResults { get; set; }
  }

  public class JsonIMDBActorMoviesTitleResults
  {
      public List<JsonIMDBActorMoviesTitleListItem> titleListItems { get; set; }
      public string total { get; set; }
  }

  public class JsonIMDBActorMoviesTitleListItem
  {
      public string titleId { get; set; }
      public string originalTitleText { get; set; }
      public string titleText { get; set; }
      public JsonIMDBActorMoviesReleaseDate releaseDate { get; set; }
      public JsonIMDBActorMoviesTitleType titleType { get; set; }
      public JsonIMDBActorMoviesCreditsMetadataForName creditsMetadataForName { get; set; }
  }

  public class JsonIMDBActorMoviesReleaseDate
  {
      public string day { get; set; }
      public string month { get; set; }
      public string year { get; set; }
  }

  public class JsonIMDBActorMoviesTitleType
  {
      public string id { get; set; }
  }

  public class JsonIMDBActorMoviesCreditsMetadataForName
  {
      public List<JsonIMDBActorMoviesCrew> crews { get; set; }
      public JsonIMDBActorMoviesCast cast { get; set; }
  }

  public class JsonIMDBActorMoviesCrew
  {
      public JsonIMDBActorMoviesCategory category { get; set; }
  }

  public class JsonIMDBActorMoviesCast
  {
      public JsonIMDBActorMoviesCategory category { get; set; }
      public List<string> characters { get; set; }
  }

  public class JsonIMDBActorMoviesCategory
  {
      public string id { get; set; }
      public string text { get; set; }
  }

  private void GetActorMovies(IMDBActor imdbActor, bool actor, bool actress, bool director, bool writer, bool self)
  {
    string filter = string.Empty;
    if (actor)
    {
      filter = "actor";
    }
    if (actress)
    {
      filter = "actress";
    }
    if (director)
    {
      filter = "director";
    }
    if (writer)
    {
      filter = "writer";
    }
    if (self)
    {
      filter = "self";
    }

    string uri;
    string actorUrl = string.Format("https://m.imdb.com/search/title/?role={0}&job_categories={1}&explore=credits&title_type=feature&sort=release_date,desc", imdbActor.IMDBActorID, filter);
    string actorHtml = GetPage(actorUrl, "utf-8", out uri);
    if (string.IsNullOrEmpty(actorHtml)) return;

    string regex = @"type=.application\/json.>(?<json>{.+?})<";
    string json = Regex.Match(actorHtml, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["json"].Value;
    if (string.IsNullOrEmpty(json))
    {
      Log.Debug("GetActorMovies IMDB = {0}, JSON not found.", imdbActor.IMDBActorID);
      return;
    }

    try
    {
      JsonIMDBActorMovies Data = JsonConvert.DeserializeObject<JsonIMDBActorMovies>(json);
      if (Data == null)
      {
        Log.Debug("GetActorMovies IMDB = {0}, JSON changed!?.", imdbActor.IMDBActorID);
        // Log.Debug("{0}", json);
        return;
      }
      if (Data.props == null || Data.props.pageProps == null || Data.props.pageProps.searchResults == null || Data.props.pageProps.searchResults.titleResults == null)
      {
        Log.Debug("GetActorMovies - Data for IMDB = {0}, JSON changed!?.", imdbActor.IMDBActorID);
        // Log.Debug("{0}", json);
        return;
      }

      List<JsonIMDBActorMoviesTitleListItem> Movies = Data.props.pageProps.searchResults.titleResults.titleListItems;
      if (Movies == null)
      {
        Log.Debug("GetActorMovies - Items for IMDB = {0}, JSON changed!?.", imdbActor.IMDBActorID);
        // Log.Debug("{0}", json);
        return;
      }
      if (Movies.Count == 0)
      {
        return;
      }

      foreach (JsonIMDBActorMoviesTitleListItem item in Movies)
      {
        string imdbID = !string.IsNullOrEmpty(item.titleId) ? item.titleId : string.Empty;
        string title = !string.IsNullOrEmpty(item.titleText) ? item.titleText : string.Empty;
        if (string.IsNullOrEmpty(title))
        {
          title = !string.IsNullOrEmpty(item.originalTitleText) ? item.originalTitleText : string.Empty;
        }
        string strYear = item.releaseDate != null ? item.releaseDate.year : string.Empty;
        string role = string.Empty;
        if (item.creditsMetadataForName != null)
        {
          foreach (JsonIMDBActorMoviesCrew crew in item.creditsMetadataForName.crews)
          {
            if (crew.category.id == "director")
            {
              role = role + (!string.IsNullOrEmpty(role) ? ", " : string.Empty) + GUILocalizeDirector().Replace(":", string.Empty);
            }
            else if (crew.category.id == "writer")
            {
              role = role + (!string.IsNullOrEmpty(role) ? ", " : string.Empty) + GUILocalizeWriter().Replace(":", string.Empty);
            }
            else if (!string.IsNullOrEmpty(crew.category.text))
            {
              role = role + (!string.IsNullOrEmpty(role) ? ", " : string.Empty) + crew.category.text;
            }
          }

          if (item.creditsMetadataForName.cast != null && item.creditsMetadataForName.cast.characters != null)
          {
            foreach (string character in item.creditsMetadataForName.cast.characters)
            {
              if (!string.IsNullOrEmpty(character))
              {
                role = role + (!string.IsNullOrEmpty(role) ? ", " : string.Empty) + character;
              }
            }
          }
        }
        // Log.Debug("GetActorMovies: Found for {0}: {1} | {2} ({3}) | {4}", imdbActor.IMDBActorID, imdbID, title, strYear, role);

        if (!string.IsNullOrEmpty(title))
        {
          // Year
          int year = 0;
          // Set near future for movies without year (99% it's a future project)
          if (string.IsNullOrEmpty(strYear) || !Int32.TryParse(strYear, out year))
          {
            year = DateTime.Today.Year + 5;
          }

          // Actor
          IMDBActor.IMDBActorMovie actorMovie = new IMDBActor.IMDBActorMovie();

          actorMovie.MovieTitle = title;
          actorMovie.Role = role;
          actorMovie.Year = year;
          actorMovie.MovieImdbID = imdbID;

          // Check if director/writer/self movie exists in actors movies, append role
          // to already fetched actor movie role(no duplicate movie entries)
          bool skip = false;

          if (writer || director || self)
          {
            for (int j = 0; j < imdbActor.Count; j++)
            {
              if (imdbActor[j].MovieImdbID == imdbID)
              {
                if (!string.IsNullOrEmpty(imdbActor[j].Role))
                {
                  imdbActor[j].Role = role + ", " + imdbActor[j].Role;
                }
                else
                {
                  imdbActor[j].Role = role;
                }

                skip = true;
                break;
              }
            }
          }

          if (!skip)
          {
            imdbActor.Add(actorMovie);
            Log.Debug("GetActorMovies: Added for {0}: {1} | {2} ({3}) | {4}", imdbActor.IMDBActorID, imdbID, title, year, role);
          }
        }
      }
    }
    catch (Exception ex)
    {
      Log.Debug("GetActorMovies IMDB = {0}, Exception {1}, JSON changed!?.", imdbActor.IMDBActorID, ex.Message);
    }
  }

  /// <summary>
  /// Removes HTML tags, cleans \n (to space) and \r (to empty string), decode string and remove last slash char
  /// </summary>
  /// <param name="stringToClean"></param>
  /// <returns></returns>
  private string CleanCrlf(string stringToClean)
  {
    string cleanString = string.Empty;

    cleanString = Utils.stripHTMLtags(stringToClean).Trim();
    cleanString = HttpUtility.HtmlDecode(cleanString.Replace("\n", " ").Replace("\r", string.Empty).Trim());
    cleanString = cleanString.Replace("&nbsp;", " ").Trim();
    cleanString = cleanString.Replace("  /", string.Empty).Trim();

    if (cleanString != null && cleanString.EndsWith("/"))
    {
      cleanString = cleanString.Remove(cleanString.LastIndexOf("/"));
    }

    return cleanString;
  }

  private string RemoveParenthesis(string name)
  {
    while (name.IndexOf("(") != -1)
    {
      int start = name.IndexOf("(");
      int end = name.IndexOf(")");
      if (end != -1)
      {
        name = name.Substring(0, start) + name.Substring(end + 1);
      }
      else
      {
        break;
      }
    }

    return name;
  }

  #endregion

  #region IMDBMovieActorsList

  private string GetIMDBIDbyTMDBIDforPerson(string tmdbID)
  {
    if (string.IsNullOrEmpty(tmdbID))
    {
      return string.Empty;
    }

    try
    {
      string URL = string.Format(API_DetailsPerson, tmdbID, API_KEY);
      if (!string.IsNullOrEmpty(API_LANG))
      {
        URL += "&language=" + API_LANG.ToLower();
      }

      string uri;
      string json = GetPage(URL, "utf-8", out uri);
      if (string.IsNullOrEmpty(json))
      {
        return string.Empty;
      }

      ActorDetails Actor = JsonConvert.DeserializeObject<ActorDetails>(json);
      if (Actor != null && !string.IsNullOrEmpty(Actor.name))
      {
        return Actor.imdb_id;
      }
    }
    catch (Exception ex)
    {
      Log.Debug("TMDB Script GetIMDBIDbyTMDBIDforPerson error: {0}", ex.Message);
    }
    return string.Empty;
  }

  public ArrayList GetTMDBMovieActorsList(string imdbMovieID, bool shortActorsList)
  {
    Log.Debug("InternalActorsGrabber - GetTMDBMovieActorsList - Version: {0}.", strGrabberVersion);

    ArrayList actorList = new ArrayList();
    TMDBMovie tMovie = new TMDBMovie();
    tMovie.IMDBNumber = imdbMovieID; 
    GetCast(ref tMovie);

    // Directors and Writers
    string sDirector = string.Empty;
    string sWriters = string.Empty;
    if (tMovie.Crew != null)
    {
      foreach (TMDBPerson apers in tMovie.Crew)
      {
        if (!string.IsNullOrEmpty(apers.Name))
        {
          if (apers.As.Contains("Direct"))
          {
            sDirector = GetIMDBIDbyTMDBIDforPerson(apers.Id);
            if (!string.IsNullOrEmpty(sDirector))
            {
              // Add prefix that it's director, will be removed on fetching details
              actorList.Add("*d" + apers.Name + "|" + sDirector + "|" + GUILocalizeDirector().Replace(":", string.Empty));
            }
            System.Threading.Thread.Sleep(333); // TMDB Rate Limit 40 per 10sec
          }
          else if (apers.As.Contains("Writ"))
          {
            sWriters = GetIMDBIDbyTMDBIDforPerson(apers.Id);
            if (!string.IsNullOrEmpty(sWriters))
            {
              actorList.Add(apers.Name + "|" + sWriters + "|" + GUILocalizeWriter().Replace(":", string.Empty));
            }
            System.Threading.Thread.Sleep(333); // TMDB Rate Limit 40 per 10sec
          }
        }
      }
    }

    // Actors as Role
    string strActor = string.Empty;
    if (tMovie.Cast != null)
    {
      int actorsCount = 0;
      foreach (TMDBPerson apers in tMovie.Cast)
      {
        strActor = GetIMDBIDbyTMDBIDforPerson(apers.Id);
        if (!string.IsNullOrEmpty(strActor))
        {
          actorList.Add(apers.Name + "|" + strActor + "|" + apers.As);
          actorsCount++;
        }

        if (shortActorsList && actorsCount >= 15)
        {
          break;
        }
        System.Threading.Thread.Sleep(333); // TMDB Rate Limit 40 per 10sec
      }
    }

    Log.Debug("InternalActorsGrabber - GetTMDBMovieActorsList - Actors found: {0}.", actorList.Count);
    return actorList;
  }

  public ArrayList GetIMDBMovieActorsList(string imdbMovieID, bool shortActorsList)
  {
    Log.Debug("InternalActorsGrabber - GetIMDBMovieActorsList - Version: {0}.", strGrabberVersion);

    ArrayList actorList = new ArrayList();

    string absUri = string.Empty;
    string movieURL = string.Format("https://www.imdb.com/title/{0}/reference/", imdbMovieID);
    string strBodyActors = GetPage(movieURL, "utf-8", out absUri);
    if (string.IsNullOrEmpty(strBodyActors))
    {
      Log.Debug("GetIMDBMovieActorsList IMDB = {0}, Empty page, fallback to TMDB.", imdbMovieID);
      return GetTMDBMovieActorsList (imdbMovieID, shortActorsList);
    }

    string regex = @"type=.application\/(ld\+)?json.>(?<json>{.+?})<";
    string json = Regex.Match(strBodyActors, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["json"].Value;
    if (string.IsNullOrEmpty(json))
    {
      Log.Debug("GetIMDBMovieActorsList IMDB = {0}, JSON not found. Fallback to TMDB", imdbMovieID);
      return GetTMDBMovieActorsList (imdbMovieID, shortActorsList);
    }

    try
    {
      JsonIMDBCasts Casts = JsonConvert.DeserializeObject<JsonIMDBCasts>(json);
      if (Casts == null || Casts.props == null || Casts.props.pageProps == null || Casts.props.pageProps.mainColumnData == null)
      {
        Log.Debug("GetIMDBMovieActorsList IMDB = {0}, JSON changed!?.", imdbMovieID);
        return actorList;
      }

      JsonIMDBCastMainColumnData Data = Casts.props.pageProps.mainColumnData;
      if (Data.titleText != null && Data.titleText.text != null)
      {
        Log.Debug("GetIMDBMovieActorsList for IMDB {0}: {1}", "Title", Data.titleText.text);
      }

      foreach (JsonIMDBCastCreditCategory categories in Data.creditCategories)
      {
        foreach (JsonIMDBCastEdge edge in categories.credits.edges)
        {
          if (categories.category.id == "director")
          {
            // Add prefix that it's director, will be removed on fetching details
            actorList.Add("*d" + edge.node.name.nameText.text + "|" + edge.node.name.id + "|" + GUILocalizeDirector().Replace(":", string.Empty));
          }
          if (categories.category.id == "writer")
          {
            actorList.Add(edge.node.name.nameText.text + "|" + edge.node.name.id + "|" + GUILocalizeWriter().Replace(":", string.Empty));
          }
        }
      }

      int actorsCount = 0;
      foreach (JsonIMDBCastCreditCategory categories in Data.creditCategories)
      {
        foreach (JsonIMDBCastEdge edge in categories.credits.edges)
        {
          if (categories.category.id == "cast")
          {
            actorList.Add(edge.node.name.nameText.text + "|" + edge.node.name.id + "|" + edge.node.characters[0].name);

            actorsCount++;
            if (shortActorsList && actorsCount >= 15)
            {
              break;
            }
          }
        }
      }
    }
    catch (Exception ex)
    {
      Log.Debug("GetIMDBMovieActorsList IMDB = {0}, Exception {1}, JSON changed!?.", imdbMovieID, ex.Message);
    }

    if (actorList.Count == 0)
    {
      Log.Debug("GetIMDBMovieActorsList IMDB = {0}, Actors not found, fallback to TMDB.", imdbMovieID);
      return GetTMDBMovieActorsList (imdbMovieID, shortActorsList);
    }
    Log.Debug("InternalActorsGrabber - GetIMDBMovieActorsList - Actors found: {0}.", actorList.Count);
    return actorList;
  }

  #endregion

  #region IMDB Json

  public class JsonIMDBBase
  {
    [JsonProperty("@type")]
    public string type { get; set; }
  }

  public class JsonIMDBText
  {
    public string text { get; set; }
  }

  public class JsonIMDBPlainText
  {
    public string plainText { get; set; }
  }

  public class JsonIMDBReleaseYear
  {
    public int year { get; set; }
  }

  public class JsonIMDBPlot
  {
    public JsonIMDBPlainText plotText { get; set; }
  }

  public class JsonIMDBPrimaryImage
  {
    public string url { get; set; }
    public int height { get; set; }
    public int width { get; set; }
    public JsonIMDBPlainText caption { get; set; }
  }
  public class JsonIMDBPosterData
  {
    public string constId { get; set; }
    public JsonIMDBPosterImage image { get; set; }
    public string type { get; set; }
  }

  public class JsonIMDBPosterImage
  {
    public string url { get; set; }
    public int maxHeight { get; set; }
    public int maxWidth { get; set; }
    public string caption { get; set; }
  }

  // Movie
  public class JsonIMDBPerson : JsonIMDBBase
  {
    public string url { get; set; }
    public string name { get; set; }
  }

  public class JsonIMDBActor : JsonIMDBPerson
  {
      public string image { get; set; }
      public string description { get; set; }
      public string birthDate { get; set; }
      public string deathDate { get; set; }
  }    

  public class JsonIMDBAggregateRating : JsonIMDBBase
  {
    public int ratingCount { get; set; }
    public int bestRating { get; set; }
    public int worstRating { get; set; }
    public double ratingValue { get; set; }
  }

  public class JsonIMDBMovie : JsonIMDBBase
  {
    [JsonProperty("@context")]
    public string context { get; set; }

    public string url { get; set; }
    public string name { get; set; }
    public string alternateName { get; set; }
    public string image { get; set; }
    public string description { get; set; }
    public JsonIMDBAggregateRating aggregateRating { get; set; }
    public string contentRating { get; set; }
    public List<string> genre { get; set; }
    public string datePublished { get; set; }
    public string keywords { get; set; }
    public List<JsonIMDBPerson> actor { get; set; }
    public List<JsonIMDBPerson> director { get; set; }
    public List<JsonIMDBPerson> creator { get; set; }
    public string duration { get; set; }
  }

  // IMDB Awards
  public class JsonIMDBAwards
  {
    public JsonIMDBAwardsProps props { get; set; }
    public string page { get; set; }
  }

  public class JsonIMDBAwardsProps
  {
    public JsonIMDBAwardsPageProps pageProps { get; set; }
  }

  public class JsonIMDBAwardsPageProps
  {
    public JsonIMDBAwardsContentData contentData { get; set; }
  }

  public class JsonIMDBAwardsContentData
  {
    public string parentDisplayText { get; set; }
    public JsonIMDBEntityMetadata entityMetadata { get; set; }
    public JsonIMDBPosterData posterData { get; set; }
    public List<JsonIMDBAwardsCategory> categories { get; set; }
    public int nominationsCount { get; set; }
    public int winsCount { get; set; }
  }

  public class JsonIMDBEntityMetadata
  {
    public string id { get; set; }
    public JsonIMDBText titleText { get; set; }
    public JsonIMDBText originalTitleText { get; set; }
    public JsonIMDBReleaseYear releaseYear { get; set; }
    public JsonIMDBPlot plot { get; set; }
    public JsonIMDBPrimaryImage primaryImage { get; set; }
  }

  public class JsonIMDBAwardsCategory
  {
    public string id { get; set; }
    public string name { get; set; }
    public JsonIMDBAwardsSection section { get; set; }
  }

  public class JsonIMDBAwardsSection
  {
    public int listItemType { get; set; }
    public List<JsonIMDBAwardsSectionItem> items { get; set; }
    public int total { get; set; }
    public string endCursor { get; set; }
  }

  public class JsonIMDBAwardsSectionItem
  {
    public string id { get; set; }
    public List<JsonIMDBAwardsListContent> listContent { get; set; }
    public string rowTitle { get; set; }
    public string rowSubTitle { get; set; }
    public string rowLink { get; set; }
    public List<JsonIMDBAwardsSubListContent> subListContent { get; set; }
  }

  public class JsonIMDBAwardsListContent
  {
    public string className { get; set; }
    public string text { get; set; }
  }

  public class JsonIMDBAwardsSubListContent
  {
    public string text { get; set; }
    public string subText { get; set; }
    public string href { get; set; }
  }

  // IMDB Casts
  public class JsonIMDBCasts
  {
    public JsonIMDBCastProps props { get; set; }
  }

  public class JsonIMDBCastProps
  {
    public JsonIMDBCastPageProps pageProps { get; set; }
  }

  public class JsonIMDBCastPageProps
  {
    public string tconst { get; set; }
    public JsonIMDBCastMainColumnData mainColumnData { get; set; }
  }
  
  public class JsonIMDBCastMainColumnData
  {
    public string id { get; set; }
    public JsonIMDBCastText titleText { get; set; }
    public JsonIMDBCastText originalTitleText { get; set; }
    public JsonIMDBCastPlot plot { get; set; }
    public JsonIMDBCastReleaseDate releaseDate { get; set; }
    public List<JsonIMDBCastCreditCategory> creditCategories { get; set; }
    public JsonIMDBCastTaglines taglines { get; set; }
  }

  public class JsonIMDBCastText
  {
    public string text { get; set; }
  }
  
  public class JsonIMDBCastPlotText
  {
    public string plainText { get; set; }
  }

  public class JsonIMDBCastPlot
  {
    public JsonIMDBCastPlotText plotText { get; set; }
  }

  public class JsonIMDBCastReleaseDate
  {
    public int day { get; set; }
    public int month { get; set; }
    public int year { get; set; }
    public JsonIMDBCastText country { get; set; }
  }
  
  public class JsonIMDBCastTaglines
  {
    public List<JsonIMDBCastEdge> edges { get; set; }
    public int total { get; set; }
  }

 
  public class JsonIMDBCastCreditCategory
  {
    public JsonIMDBCastCategory category { get; set; }
    public JsonIMDBCastCredits credits { get; set; }
  }

  public class JsonIMDBCastCategory
  {
    public string id { get; set; }
  }


  public class JsonIMDBCastCredits
  {
    public int total { get; set; }
    public List<JsonIMDBCastEdge> edges { get; set; }
  }

  public class JsonIMDBCastEdge
  {
    public JsonIMDBCastNode node { get; set; }
  }

  public class JsonIMDBCastNode
  {
    public JsonIMDBCastName name { get; set; }
    public List<JsonIMDBCastCharacter> characters { get; set; }
    public string text { get; set; }
  }

  public class JsonIMDBCastName
  {
    public string id { get; set; }
    public JsonIMDBCastText nameText { get; set; }
    public JsonIMDBCastPrimaryImage primaryImage { get; set; }
  }

  public class JsonIMDBCastPrimaryImage
  {
    public string url { get; set; }
  }

  public class JsonIMDBCastCharacter
  {
    public string name { get; set; }
  }

  public IMDBActor GetIMDBActorDetails(string imdbID, string page)
  {
    Log.Debug("InternalActorsGrabber - GetIMDBActorDetails - Version: {0}.", strGrabberVersion);

    IMDBActor oReturn = new IMDBActor();

    if (string.IsNullOrEmpty(page))
    {
      return oReturn;
    }

    string regex = @"type=.application\/(ld\+)?json.>(?<json>{.+?})<";
    string json = Regex.Match(page, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["json"].Value;
    if (string.IsNullOrEmpty(json))
    {
      Log.Debug("GetIMDBActorDetails IMDB = {0}, JSON not found.", imdbID);
      return oReturn;
    }

    try
    {
      JsonIMDBActor Actor = JsonConvert.DeserializeObject<JsonIMDBActor>(json);
      if (Actor == null)
      {
        Log.Debug("GetIMDBActorDetails IMDB = {0}, JSON changed!?.", imdbID);
        return oReturn;
      }

      if (!string.IsNullOrEmpty(Actor.name))
      {
        Log.Debug("IMDB {0}: {1}", "Name", Actor.name);
      }

      oReturn.Name = Actor.name;
      oReturn.IMDBActorID = imdbID;
      oReturn.MiniBiography = Actor.description;
      oReturn.ThumbnailUrl = string.IsNullOrEmpty(Actor.image) ? string.Empty : Actor.image.Replace("_V1_","_V1_UX" + Convert.ToString((int)Thumbs.ThumbLargeResolution));
      oReturn.DateOfBirth = Actor.birthDate;
      oReturn.DateOfDeath = Actor.deathDate;
    }
    catch (Exception ex)
    {
      Log.Debug("GetIMDBActorDetails IMDB = {0}, Exception {1}, JSON changed!?.", imdbID, ex.Message);
    }

    return oReturn;
  }

  public TMDBMovie GetIMDBDetails(string imdbID)
  {
    Log.Debug("InternalActorsGrabber - GetIMDBDetails - Version: {0}.", strGrabberVersion);

    TMDBMovie oReturn = new TMDBMovie();

    if (string.IsNullOrEmpty(_strBody))
    {
      string uri;
      string strUrl = String.Format("https://m.imdb.com/title/{0}/", imdbID);
      _strBody = GetPage(strUrl, "utf-8", out uri);
    }

    string regex = @"type=.application\/(ld\+)?json.>(?<json>{.+?})<";
    string json = Regex.Match(_strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["json"].Value;
    if (string.IsNullOrEmpty(json))
    {
      Log.Debug("GetIMDBDetails IMDB = {0}, JSON not found.", imdbID);
      return oReturn;
    }

    try
    {
      JsonIMDBMovie Movie = JsonConvert.DeserializeObject<JsonIMDBMovie>(json);
      if (Movie == null)
      {
        Log.Debug("GetIMDBDetails IMDB = {0}, JSON changed!?.", imdbID);
        return oReturn;
      }

      if (!string.IsNullOrEmpty(Movie.name))
      {
        Log.Debug("IMDB {0}: {1}", "Title", Movie.name);
      }
      oReturn.Title = Movie.name;
      oReturn.IMDBNumber = imdbID;
      oReturn.Plot = Movie.description;
      oReturn.ThumbURL = string.IsNullOrEmpty(Movie.image) ? string.Empty : Movie.image.Replace("_V1_","_V1_UX" + Convert.ToString((int)Thumbs.ThumbLargeResolution));

      if (!string.IsNullOrEmpty(Movie.duration))
      {
        regex = @"PT(?:(?<hour>\d*)H)?(?<minutes>\d+?)M";
        string hour = Regex.Match(Movie.duration, regex).Groups["hour"].Value;
        string minutes = Regex.Match(Movie.duration, regex).Groups["minutes"].Value;
        if (string.IsNullOrEmpty(hour))
        {
          hour = "0";
        }
        if (string.IsNullOrEmpty(minutes))
        {
          minutes = "0";
        }
        oReturn.RunTime = Int32.Parse(hour) * 60 + Int32.Parse(minutes);
      }

      oReturn.Genre = string.Empty;
      if (Movie.genre != null && Movie.genre.Count > 0)
      {
        foreach (string g in Movie.genre)
        {
          oReturn.Genre += (!string.IsNullOrEmpty(oReturn.Genre) ? " / " : string.Empty) + g;
        }
      }

      List<TMDBPerson> tReturn = new List<TMDBPerson>();
      string sCast = string.Empty;

      if (Movie.actor != null && Movie.actor.Count > 0)
      {
        foreach (JsonIMDBPerson cast in Movie.actor)
        {
          if (cast.type == "Person")
          {
            TMDBPerson aPerson = new TMDBPerson();
            aPerson.Id = cast.url;
            aPerson.Name = cast.name;
            tReturn.Add(aPerson);
          }
        }
      }

      if (Movie.creator != null && Movie.creator.Count > 0)
      {
        foreach (JsonIMDBPerson creator in Movie.creator)
        {
          if (creator.type == "Person")
          {
            TMDBPerson aPerson = new TMDBPerson();
            aPerson.Id = creator.url;
            aPerson.Name = creator.name;
            aPerson.As = "Writer";
            tReturn.Add(aPerson);
          }
        }
      }

      if (Movie.director  != null)
      {
        foreach (JsonIMDBPerson director in Movie.director)
        {
          if (director.type == "Person")
          {
            TMDBPerson aPerson = new TMDBPerson();
            aPerson.Id = director.url;
            aPerson.Name = director.name;
            aPerson.As = "Director ";
            tReturn.Add(aPerson);
          }
        }
      }

      if (tReturn.Count > 0)
      {
        oReturn.Cast = tReturn.ToArray();
      }
    }
    catch (Exception ex)
    {
      Log.Debug("GetIMDBDetails IMDB = {0}, Exception {1}, JSON changed!?.", imdbID, ex.Message);
    }

    return oReturn;
  }

  #endregion

  #region IMDBActorAwards

  private string GetAwardsIMDB(string IMDBID)
  {
    if (string.IsNullOrEmpty(IMDBID))
    {
      return string.Empty;
    }
    if (!GET_ACTOR_AWARDS)
    {
      return string.Empty;
    }

    try
    {
      string absoluteUri;
      string _awardsURL = string.Format("https://www.imdb.com/name/{0}/awards/", IMDBID);
      string _awardsPage = GetPage(_awardsURL, "utf-8", out absoluteUri);
      if (string.IsNullOrEmpty(_awardsPage))
      {
        return string.Empty;
      }

      string regex = @"type=.application\/json.>(?<json>{.+?})<";
      string json = Regex.Match(_awardsPage, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["json"].Value;
      if (string.IsNullOrEmpty(json))
      {
        Log.Debug("{0} GetIMDBAwards IMDB = {1}, JSON not found.", "GetActorDetails", IMDBID);
      }

      try
      {
        JsonIMDBAwards Awards = JsonConvert.DeserializeObject<JsonIMDBAwards>(json);
        if (Awards == null)
        {
          Log.Debug("{0} GetIMDBAwards IMDB = {1}, JSON changed!?.", "GetActorDetails", IMDBID);
        }

        if (Awards.props != null && Awards.props.pageProps != null &&
          (Awards.props.pageProps.contentData == null || Awards.props.pageProps.contentData.nominationsCount == 0))
        {
          Log.Debug("{0} GetIMDBAwards No Awards for IMDB = {1}", "GetActorDetails", IMDBID);
        }

        string _awardsList = string.Empty;
        if (!string.IsNullOrEmpty(Awards.props.pageProps.contentData.entityMetadata.id))
        {
          string AwardsMASK = string.Empty;
          if (Awards.props.pageProps.contentData.winsCount > 0 && Awards.props.pageProps.contentData.nominationsCount > 0)
          {
            AwardsMASK = "{0} WINS & {1} NOMINATIONS";
          }
          else if (Awards.props.pageProps.contentData.winsCount > 0)
          {
            AwardsMASK = "{0} WINS";
          }
          else if (Awards.props.pageProps.contentData.nominationsCount > 0)
          {
            AwardsMASK = "{1} NOMINATIONS";
          }
          string awardMainTitle = string.Format(AwardsMASK, Awards.props.pageProps.contentData.winsCount,
                                                            Awards.props.pageProps.contentData.nominationsCount);
          if (!string.IsNullOrEmpty(awardMainTitle))
          {
            _awardsList = "::: " + awardMainTitle + " :::\n\n";
          }

          foreach (var category in Awards.props.pageProps.contentData.categories)
          {
            var awards = category.section.items.Where(x => x.rowTitle.Contains("Winner"));
            string awardMainName = string.Empty;
            if (awards.Count() > 0)
            {
              awardMainName = category.name;

              _awardsList += "* " + awardMainName + "\n";
              _awardsList += "Won:\n";

              foreach (var award in awards)
              {
                string awardLineName = Regex.Match(award.rowTitle, @"(?<year>\d{4})").Groups["year"].Value + " " + award.rowSubTitle;
                string awardLineWho = string.Join(", ", award.subListContent.Select(x => x.text).ToList());
                string awardLineWhat = string.Join(", ", award.listContent.Select(x => x.text).ToList());

                _awardsList += "- " + awardLineName + (string.IsNullOrEmpty(awardLineWho) ? string.Empty : " - " + awardLineWho) + (string.IsNullOrEmpty(awardLineWhat) ? string.Empty : " - " + awardLineWhat) + "\n";
                Log.Debug("{4} Award (W): {0} - {1} {2} {3}", awardMainName, awardLineName, awardLineWho, awardLineWhat, "GetActorDetails");
              }
            }

            awards = category.section.items.Where(x => x.rowTitle.Contains("Nominee"));
            if (awards.Count() > 0)
            {
              if (string.IsNullOrEmpty(awardMainName))
              {
                awardMainName = category.name;
                _awardsList += "* " + awardMainName + "\n";
              }
              _awardsList += "Nominated:\n";

              foreach (var award in awards)
              {
                string awardLineName = Regex.Match(award.rowTitle, @"(?<year>\d{4})").Groups["year"].Value + " " + award.rowSubTitle;
                string awardLineWho = string.Join(", ", award.subListContent.Select(x => x.text).ToList());
                string awardLineWhat = string.Join(", ", award.listContent.Select(x => x.text).ToList());

                _awardsList += "- " + awardLineName + (string.IsNullOrEmpty(awardLineWho) ? string.Empty : " - " + awardLineWho) + (string.IsNullOrEmpty(awardLineWhat) ? string.Empty : " - " + awardLineWhat) + "\n";
                Log.Debug("{4} Award (N): {0} - {1} {2} {3}", awardMainName, awardLineName, awardLineWho, awardLineWhat, "GetActorDetails");
              }
            }
            if (!string.IsNullOrEmpty(awardMainName))
            {
              _awardsList += "\n";
            }
          }
        }

        if (!string.IsNullOrEmpty(_awardsList))
        {
          return "Awards:\n" + _awardsList; // MP1-4846
        }
      }
      catch (Exception ex)
      {
        Log.Debug("{0} GetIMDBAwards IMDB = {1}, Exception {2}, JSON changed!?.", "GetActorDetails", IMDBID, ex.Message);
      }

    }
    catch (Exception ex)
    {
      Log.Error("{0} GetIMDBAwards error: {1}", "GetActorDetails", ex.Message);
    }
    return string.Empty;
  }

  #endregion

  #region TMDB

  private const string API_KEY = "e224fe4f3fec5f7b5570641f7cd3df3a"; //Inset API Key
  private static string API_LANG = CultureInfo.CurrentCulture.TwoLetterISOLanguageName.ToUpper(); 
  private static string API_THUMB = (((int)Thumbs.Quality < 2) ? "w342" : ((int)Thumbs.Quality < 4) ? "w500" : "w780"); 

  private const string API_ImageUrl = "https://image.tmdb.org/t/p/";
  private static string API_PosterUrl = API_ImageUrl + API_THUMB;
  private const string API_FanartUrl = API_ImageUrl + "original";

  private const string API_BaseUrl = "https://api.themoviedb.org/3/";

  public const string API_SearchPerson = API_BaseUrl + "find/{0}?api_key={1}&external_source=imdb_id";
  public const string API_DetailsPerson = API_BaseUrl + "person/{0}?api_key={1}";
  public const string API_MovieInfo = API_BaseUrl + "movie/{0}?api_key={1}";
  public const string API_Casts = API_BaseUrl + "movie/{0}/casts?api_key={1}";
  public const string API_ReleaseInfo = API_BaseUrl + "movie/{0}/releases?api_key={1}";

  private static Dictionary<string, string> Alphabet = new Dictionary<string, string>()
  {
    { "RU", @"^([АаБбВвГгДдЕеЁёЖжЗзИиЙйКкЛлМмНнОоПпРрСсТтУуФфХхЦцЧчШшЩщЪъЫыЬьЭэЮюЯя\s\.-]+)$"},
    { "UA", @"^([АаБбВвГгҐґДдЕеЄєЖжЗзИиІіЇїЙйКкЛлМмНнОоПпРрСсТтУуФфХхЦцЧчШшЩщЬьЮюЯя\s\.-]+)$"},
	{ "DE", @"^([AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZzÄäÖöÜüẞß\s\.-]+)$"}
  };

  private static bool CanTranslate()
  {
    return !string.IsNullOrEmpty(Alphabet.Where(x => x.Key == API_LANG).Select(x => x.Value).FirstOrDefault());
  }

  public TMDBMovie GetTMDBDetails(string imdbID)
  {
    Log.Debug("InternalActorsGrabber - GetTMDBDetails - Version: {0}.", strGrabberVersion);

    TMDBMovie oReturn = new TMDBMovie();

    if (string.IsNullOrEmpty(imdbID))
    {
      return oReturn;
    }

    string URL = string.Format(API_MovieInfo, imdbID, API_KEY);
    if (!string.IsNullOrEmpty(API_LANG))
    {
      URL += "&language=" + API_LANG.ToLower();
    }

    string uri = string.Empty;
    string json = GetPage(URL, "utf-8", out uri);
    if (string.IsNullOrEmpty(json))
    {
      return oReturn;
    }

    // Log.Debug("InternalActorMoviesGrabber - GetTMDBDetails url = {0}, sResponseDetails = {1}", HideAPIKey(URL), json);
    try
    {
      MovieDatails Movie = JsonConvert.DeserializeObject<MovieDatails>(json);
      if (Movie == null || Movie.id <= 0)
      {
        return oReturn;
      }

      oReturn.ID = Movie.id;
      oReturn.Title = Movie.title;
      oReturn.OriginalTitle = Movie.original_title;
      oReturn.IMDBNumber = Movie.imdb_id;
      oReturn.Plot = Movie.overview;
      oReturn.TagLine = Movie.tagline;
      oReturn.RunTime = Movie.runtime;
      oReturn.Rating = (float)Movie.vote_average;
      oReturn.Votes = Movie.vote_count;

      oReturn.Genre = string.Empty;
      if (Movie.genres != null && Movie.genres.Count > 0)
      {
        foreach (Genre genre in Movie.genres)
        {
          oReturn.Genre += (!string.IsNullOrEmpty(oReturn.Genre) ? " / " : string.Empty) + genre.name;
        }
      }

      oReturn.Language = string.Empty;
      if (Movie.spoken_languages != null && Movie.spoken_languages.Count > 0)
      {
        foreach (SpokenLanguage language in Movie.spoken_languages)
        {
          oReturn.Language += (!string.IsNullOrEmpty(oReturn.Language) ? ", " : string.Empty) + language.name;
        }
      }
      else
      {
        if (!string.IsNullOrEmpty(Movie.original_language))
        {
          oReturn.Language = Movie.original_language;
        }
      }

      oReturn.Country = string.Empty;
      if (Movie.production_countries != null && Movie.production_countries.Count > 0)
      {
        foreach (ProductionCountry country in Movie.production_countries)
        {
          oReturn.Country += (!string.IsNullOrEmpty(oReturn.Country) ? ", " : string.Empty) + country.name;
        }
      }

      oReturn.Studios = string.Empty;
      if (Movie.production_companies != null && Movie.production_companies.Count > 0)
      {
        foreach (ProductionCompany studio in Movie.production_companies)
        {
          oReturn.Studios += (!string.IsNullOrEmpty(oReturn.Studios) ? " / " : string.Empty) + studio.name;
        }
      }

      string sYear = !string.IsNullOrWhiteSpace(Movie.release_date) && Movie.release_date.Length >= 4 ? Movie.release_date.Substring(0, 4) : string.Empty;
      if (!string.IsNullOrEmpty(sYear))
      {
        int iYear;
        int.TryParse(sYear, out iYear);
        oReturn.Year = iYear;
      }

      if (string.IsNullOrEmpty(oReturn.Title))
      {
        oReturn.Title = oReturn.OriginalTitle;
      }

      oReturn.ThumbURL = Movie.poster_path;
      if (!string.IsNullOrEmpty(oReturn.ThumbURL))
      {
        oReturn.ThumbURL = API_PosterUrl + oReturn.ThumbURL;
      }
      else
      {
        oReturn.ThumbURL = string.Empty;
      }

      oReturn.FanartURL = Movie.backdrop_path;
      if (!string.IsNullOrEmpty(oReturn.FanartURL))
      {
        oReturn.FanartURL = API_FanartUrl + oReturn.FanartURL;
      }
      else
      {
        oReturn.FanartURL = string.Empty;
      }
    }
    catch (Exception ex)
    { 
      Log.Debug("GetTMDBDetails: {0}", ex.Message);
    }

    return oReturn;
  }

  public string TMDBPersonName(string imdbID)
  {
    IMDBActor tmdbActor = new IMDBActor();
    if (TMDBGetActorDetails(imdbID, out tmdbActor))
    {
      return tmdbActor.Name;
    }
    return string.Empty;
  }

  public bool TMDBGetActorDetails(string imdbID, out IMDBActor actor)
  {
    Log.Debug("InternalActorsGrabber - TMDBGetActorDetails - Version: {0}.", strGrabberVersion);

    actor = new IMDBActor();
    if (string.IsNullOrEmpty(imdbID))
    {
      return false;
    }

    string URL = string.Format(API_SearchPerson, imdbID, API_KEY);
    if (!string.IsNullOrEmpty(API_LANG))
    {
      URL += "&language=" + API_LANG.ToLower();
    }

    string uri = string.Empty;
    string json = GetPage(URL, "utf-8", out uri);
    if (string.IsNullOrEmpty(json))
    {
      return false;
    }

    try
    {
      FindObject Person = JsonConvert.DeserializeObject<FindObject>(json);
      if (Person != null & Person.person_results != null && Person.person_results.Count == 1)
      {
        URL = string.Format(API_DetailsPerson, Person.person_results[0].id, API_KEY);
        if (!string.IsNullOrEmpty(API_LANG))
        {
          URL += "&language=" + API_LANG.ToLower();
        }

        json = GetPage(URL, "utf-8", out uri);
        if (string.IsNullOrEmpty(json))
        {
          return false;
        }

        ActorDetails Actor = JsonConvert.DeserializeObject<ActorDetails>(json);
        if (Actor != null && !string.IsNullOrEmpty(Actor.name))
        {
          actor.Name = Actor.name;

          string regstr = Alphabet.Where(x => x.Key == API_LANG).Select(x => x.Value).FirstOrDefault();
          string translate_name = string.Empty;
          if (!string.IsNullOrEmpty(regstr))
          {
            Regex regex = new Regex(regstr);
            translate_name = Actor.also_known_as.AsEnumerable().Where(x => !string.IsNullOrEmpty(x) && regex.IsMatch(x)).FirstOrDefault();
          }  
          if (!string.IsNullOrEmpty(translate_name))
          {
            Log.Debug("IMDB: {0} TMDB: {1} - {2} - {3}", imdbID, Actor.id, Actor.name, translate_name);
            actor.Name = translate_name;
            UpdatePersonName(imdbID, translate_name);
          }

          if (!string.IsNullOrEmpty(Actor.profile_path))
          {
            actor.ThumbnailUrl = API_PosterUrl + Actor.profile_path;
          }
          else
          {
            actor.ThumbnailUrl = string.Empty;
          }

          if (!string.IsNullOrEmpty(Actor.birthday))
          {
            DateTime date = DateTime.Parse(Actor.birthday);
            actor.DateOfBirth = String.Format("{0:D}", date);
          }
          actor.PlaceOfBirth = Actor.place_of_birth;

          if (!string.IsNullOrEmpty(Actor.deathday))
          {
            DateTime date = DateTime.Parse(Actor.deathday);
            actor.DateOfDeath = String.Format("{0:D}", date);
          }

          actor.MiniBiography = GetMiniDescription(Actor.biography);
          actor.Biography = Actor.biography;

          return true;
        }
      }
    }
    catch (Exception ex)
    {
      Log.Debug("TMDB Script GetActorDetails error: {0}", ex.Message);
    }
    return false;
  }

  public void GetCast(ref TMDBMovie movie)
  {
    if (string.IsNullOrEmpty(movie.IMDBNumber))
    {
      return;
    }

    Log.Debug("TMDB Get Cast for {0}: {1}", movie.IMDBNumber, movie.Title);

    string URL = string.Format(API_Casts, movie.IMDBNumber, API_KEY);
    if (!string.IsNullOrEmpty(API_LANG))
    {
      URL += "&language=" + API_LANG.ToLower();
    }

    string uri = string.Empty;
    string json = GetPage(URL, "utf-8", out uri);
    if (string.IsNullOrEmpty(json))
    {
      return;
    }

    SearchCast casts = JsonConvert.DeserializeObject<SearchCast>(json);
    if (casts == null)
    {
      return;
    }

    try
    {
      List<TMDBPerson> tReturn = new List<TMDBPerson>();
      string sCast = string.Empty;

      if (casts.cast != null && casts.cast.Count > 0)
      {
        foreach (Cast cast in casts.cast)
        {
          TMDBPerson aPerson = new TMDBPerson();
          aPerson.Id = cast.id.ToString();
          aPerson.Name = cast.name;
          aPerson.As = cast.character;
          tReturn.Add(aPerson);
        }
        movie.Cast = tReturn.ToArray();
      }
    }
    catch { }

    try
    {
      List<TMDBPerson> tReturn = new List<TMDBPerson>();
      string sCrew = string.Empty;

      if (casts.crew != null && casts.crew.Count > 0)
      {
        foreach (Crew crew in casts.crew)
        {
          TMDBPerson aPerson = new TMDBPerson();
          aPerson.Id = crew.id.ToString();
          aPerson.Name = crew.name;
          aPerson.As = crew.department; // crew.job;
          tReturn.Add(aPerson);
        }
        movie.Crew = tReturn.ToArray();
      }
    }
    catch { }
  }

  public void GetTMDBRelease(ref TMDBMovie movie)
  {
    if (string.IsNullOrEmpty(movie.IMDBNumber))
    {
      return;
    }

    string URL = string.Format(API_ReleaseInfo, movie.IMDBNumber, API_KEY);
    if (!string.IsNullOrEmpty(API_LANG))
    {
      URL += "&language=" + API_LANG.ToLower();
    }

    string uri = string.Empty;
    string json = GetPage(URL, "utf-8", out uri);
    if (string.IsNullOrEmpty(json))
    {
      return;
    }

    try
    {
      SearchRelease releases = JsonConvert.DeserializeObject<SearchRelease>(json);
      if (releases == null || releases.countries == null || releases.countries.Count <= 0)
      {
        return;
      }

      string sCertification = string.Empty;
      sCertification = GetMPAA(releases.countries, API_LANG);
      if (!string.IsNullOrEmpty(sCertification))
      {
        Log.Debug("{0} MPAA {1}: {2}", "TMDB", API_LANG, sCertification);
      }
      else
      {
        sCertification = GetMPAA(releases.countries, "US");
        if (!string.IsNullOrEmpty(sCertification))
        {
          Log.Debug("{0} MPAA US: {1}", "TMDB", sCertification);
        }
        else
        {
          sCertification = GetMPAA(releases.countries, "UK");
          if (!string.IsNullOrEmpty(sCertification))
          {
            Log.Debug("{0} MPAA UK: {1}", "TMDB", sCertification);
          }
        }
      }
      movie.MPARating = sCertification.Replace("+", string.Empty);
    }
    catch { }
  }

  private static string GetMPAA(List<Country> countrys, string code)
  {
    if (countrys == null || countrys.Count <= 0)
    {
      return string.Empty;
    }
    if (string.IsNullOrEmpty(code))
    {
      return string.Empty;
    }

    foreach (Country country in countrys)
    {
      if (country.iso_3166_1 == code)
      {
        if (!string.IsNullOrEmpty(country.certification))
        {
          return country.certification;
        }
      }
    }
    return string.Empty;
  }

  public struct TMDBMovie
  {
    public int ID;
    public string Title;
    public string OriginalTitle;
    public string IMDBNumber;
    public int Year;
    public int RunTime;
    public string ThumbURL;
    public string Director;
    public string WritingCredits;
    public string Genre;
    public string Studios;
    public string Country;
    public string Language;
    public string MPARating;
    public string TagLine;
    public string Collection;
    public string CollectionCover;
    public string CollectionBackdrop;
    public string UserGroups;
    public string Plot;
    public string PlotOutline;
    public string FanartURL;
    public float Rating;
    public int Votes;
    public TMDBPerson[] Cast;
    public TMDBPerson[] Crew;

  }

  public struct TMDBPerson
  {
    public string Id;
    public string Name;
    public string As;
  }

  public class MovieDatails
  {
    public bool adult { get; set; }
    public string backdrop_path { get; set; }
    public Collection belongs_to_collection { get; set; }
    public string budget { get; set; }
    public List<Genre> genres { get; set; }
    public string homepage { get; set; }
    public int id { get; set; }
    public string imdb_id { get; set; }
    public string original_language { get; set; }
    public string original_title { get; set; }
    public string overview { get; set; }
    public double popularity { get; set; }
    public string poster_path { get; set; }
    public List<ProductionCompany> production_companies { get; set; }
    public List<ProductionCountry> production_countries { get; set; }
    public string release_date { get; set; }
    public string revenue { get; set; }
    public int runtime { get; set; }
    public List<SpokenLanguage> spoken_languages { get; set; }
    public string status { get; set; }
    public string tagline { get; set; }
    public string title { get; set; }
    public bool video { get; set; }
    public double vote_average { get; set; }
    public int vote_count { get; set; }
  }

  public class ActorDetails
  {
    public int id { get; set; }
    public string name { get; set; }
    public string birthday { get; set; }
    public string place_of_birth { get; set; }
    public string deathday { get; set; }
    public int gender { get; set; }
    public string biography { get; set; }
    public string known_for_department { get; set; }
    public double popularity { get; set; }
    public string profile_path { get; set; }
    public string imdb_id { get; set; }
    public List<string> also_known_as { get; set; }
  }

  public class PersonFind
  {
    public int gender { get; set; }
    public string name { get; set; }
    public int id { get; set; }
    public string profile_path { get; set; }
  }

  public class FindObject
  {
    public List<PersonFind> person_results { get; set; }
  }

  public class Cast
  {
    public int cast_id { get; set; }
    public string character { get; set; }
    public string credit_id { get; set; }
    public int gender { get; set; }
    public int id { get; set; }
    public string name { get; set; }
    public int order { get; set; }
    public string profile_path { get; set; }
  }

  public class Crew
  {
    public string credit_id { get; set; }
    public string department { get; set; }
    public int gender { get; set; }
    public int id { get; set; }
    public string job { get; set; }
    public string name { get; set; }
    public string profile_path { get; set; }
  }

  public class SearchCast
  {
    public int id { get; set; }
    public List<Cast> cast { get; set; }
    public List<Crew> crew { get; set; }
  }

  public class Collection
  {
    public int id { get; set; }
    public string name { get; set; }
    public string overview { get; set; }
    public string poster_path { get; set; }
    public string backdrop_path { get; set; }
  }

  public class Genre
  {
    public int id { get; set; }
    public string name { get; set; }
  }

  public class ProductionCompany
  {
    public string name { get; set; }
    public int id { get; set; }
  }

  public class ProductionCountry
  {
    public string iso_3166_1 { get; set; }
    public string name { get; set; }
  }

  public class SpokenLanguage
  {
    public string iso_639_1 { get; set; }
    public string name { get; set; }
  }

  public class SearchRelease
  {
    public int id { get; set; }
    public List<Country> countries { get; set; }
  }

  public class Country
  {
    public string certification { get; set; }
    public string iso_3166_1 { get; set; }
    public bool primary { get; set; }
    public string release_date { get; set; }
  }

  class TMDBPersonEqualityComparer : IEqualityComparer<TMDBPerson>
  {
      public bool Equals(TMDBPerson x, TMDBPerson y)
      {
          // Two items are equal if their keys are equal.
          return x.Name == y.Name;
      }
      
      public int GetHashCode(TMDBPerson obj)
      {
          return obj.Name.GetHashCode();
      }
  }

  #endregion

  #region Translate Person

  private static void UpdatePersonName(string imdbid, string name)
  {
    if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(imdbid))
    {
      return;
    }

    DatabaseUtility.RemoveInvalidChars(ref name);
    DatabaseUtility.RemoveInvalidChars(ref imdbid);

    string strSQL = string.Format("UPDATE actors SET strActor = '{0}' WHERE IMDBActorId = '{1}'", name, imdbid);

    bool error = false;
    string errorMessage = string.Empty;
    VideoDatabase.ExecuteSql(strSQL, out error, out errorMessage);
  }

  #endregion

  #region Zodiac

  private static Dictionary<string, string> Zodiac = new Dictionary<string, string>()
  {
    { "EN", "Capricorn|Aquarius|Pisces|Aries|Taurus|Gemini|Cancer|Leo|Virgo|Libra|Scorpio|Sagittarius" },
	{ "RU", "Козерог|Водолей|Рыбы|Овен|Телец|Близнецы|Рак|Лев|Дева|Весы|Скорпион|Стрелец" },
	{ "UA", "Козеріг|Водолій|Риби|Овен|Телець|Близнюки|Рак|Лев|Діва|Терези|Скорпіон|Стрілець"},
	{ "DE", "Steinbock|Wassermann|Fische|Widder|Stier|Zwillinge|Krebs|Löwe|Jungfrau|Waage|Skorpion|Schütze" }
  };

  private static string GetZodiac(string sDate)
  {
    if (string.IsNullOrEmpty(sDate))
    {
      return string.Empty;
    }

    DateTime dt;
    if (!DateTime.TryParse(sDate, out dt))
    {
      return string.Empty;
    }
	  
    return GetZodiac(dt);
  }

  private static string GetZodiac(DateTime dt)
  {
    if (dt == DateTime.MinValue)
    {
      return string.Empty;
    }

	string zodiac = Zodiac.Where(x => x.Key == API_LANG).Select(x => x.Value).FirstOrDefault();
	if (string.IsNullOrEmpty(zodiac))
	{
      zodiac = Zodiac.Where(x => x.Key == "EN").Select(x => x.Value).FirstOrDefault();
	}
	if (string.IsNullOrEmpty(zodiac))
	{
	  return string.Empty;
	}

    int month = dt.Month;
    int day = dt.Day;
	string[] zodiac_sign = zodiac.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
    switch (month)
    {
      case 1:
        if (day <= 19) return zodiac_sign[0]; else return zodiac_sign[1];
      case 2:
        if (day <= 18) return zodiac_sign[1]; else return zodiac_sign[2];
      case 3:
        if (day <= 20) return zodiac_sign[2]; else return zodiac_sign[3];
      case 4:
        if (day <= 19) return zodiac_sign[3]; else return zodiac_sign[4];
      case 5:
        if (day <= 20) return zodiac_sign[4]; else return zodiac_sign[5];
      case 6:
        if (day <= 20) return zodiac_sign[5]; else return zodiac_sign[6];
      case 7:
        if (day <= 22) return zodiac_sign[6]; else return zodiac_sign[7];
      case 8:
        if (day <= 22) return zodiac_sign[7]; else return zodiac_sign[8];
      case 9:
        if (day <= 22) return zodiac_sign[8]; else return zodiac_sign[9];
      case 10:
        if (day <= 22) return zodiac_sign[9]; else return zodiac_sign[10];
      case 11:
        if (day <= 21) return zodiac_sign[10]; else return zodiac_sign[11];
      case 12:
        if (day <= 21) return zodiac_sign[11]; else return zodiac_sign[0];
    }

    return string.Empty;
  }

  #endregion
  
  private static string GetPersonAge(string birthday, string deathday)
  {
    if (string.IsNullOrEmpty(birthday) || string.IsNullOrEmpty(deathday))
    {
      return string.Empty;
    }

    try 
    {
      DateTime date = DateTime.Parse(deathday);
      if (!string.IsNullOrEmpty(birthday))
      {
        DateTime bday = DateTime.Parse(birthday);
        int age = date.Year - bday.Year;
        if (bday > date.AddYears(-age)) 
        {
          age--;
        }
        if (age > 0)
        {
          return " (" + age.ToString() + ")";
        }
      }
    }
    catch (Exception e) 
    {
      Log.Error("InternalActorsScriptGrabber GetPersonAge: Exception: {0} - {1} - {2}", birthday, deathday, e.Message);
      Log.Error(e);
    }
    return string.Empty;
  }

  private ArrayList Parse(string input, string pattern) 
  {
    ArrayList keyedMatches  = new ArrayList();
    try 
    {
      Regex regEx             = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);
      MatchCollection matches = regEx.Matches(input);
      
      // write matches and groups to variables
      foreach (Match currMatch in matches) 
      {
        // store the groups in the match
        if (currMatch.Groups.Count > 1) 
        {
          Hashtable groupings = new Hashtable( );
          for (int i = 1; i < currMatch.Groups.Count; i++)
              groupings.Add(regEx.GroupNameFromNumber(i), currMatch.Groups[i].Value.Trim());
          keyedMatches.Add(groupings);
        }
      }
    }
    catch (Exception e) 
    {
      Log.Error("InternalActorsScriptGrabber Parse: Regex expression failed! Exception: {0}", e.Message);
      Log.Error(e);
    }
    return keyedMatches;
  }

  private static string GUILocalizeDirector()
  {
    string Director = string.Empty;
    try
    {
      Director = GUILocalizeStrings.Get(199);
    }
    catch { }
    if (string.IsNullOrEmpty(Director))
    {
      return "Director:";
    }
    return Director;
  }

  private static string GUILocalizeWriter()
  {
    string Writer = string.Empty;
    try
    {
      Writer = GUILocalizeStrings.Get(200);
    }
    catch { }
    if (string.IsNullOrEmpty(Writer))
    {
      return "Writer:";
    }
    return Writer;
  }

  private static string GetMiniDescription(string text)
  {
    string description = string.Empty;
    if (string.IsNullOrEmpty(text))
    {
      return description;
    }

    text = text.Replace("\n\n","\n");
    using (StringReader reader = new StringReader(text))
    {
      int i = 0;
      string line;
      while ((line = reader.ReadLine()) != null)
      {
        i++;
        var punctuation = line.Where(Char.IsPunctuation).Distinct().ToArray();
        var words = line.Split().Select(x => x.Trim(punctuation));		
        description += string.IsNullOrEmpty(description) ? line : "\n" + line;
        if (words == null || words.Count() > 3 || i >= 2)
        {
          break;
        }
      }
    }

    return description;
  }

  private static string HideAPIKey(string url)
  {
    return url.Replace(API_KEY, "<APIKEY>");
  }

  private static Hashtable IMDBPageCache;

  private static void ClearPageCache()
  {
    IMDBPageCache = new Hashtable();
  }

  private static async Task<Tuple<string, string>> DownloadWebPage(string URL)
  {
    try
    {      
      using (HttpClientHandler handler = new HttpClientHandler() { DefaultProxyCredentials = CredentialCache.DefaultCredentials })
      {
        // Setup the HttpClient
        using (HttpClient httpClient = new HttpClient())
        {
          // Timeout
          httpClient.Timeout = TimeSpan.FromSeconds(20);

          // Set Headers
          httpClient.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36");
          httpClient.DefaultRequestHeaders.Add("Accept-Language", "en-US,en;q=0.5");

          // Get the webpage asynchronously
          HttpResponseMessage response = await httpClient.GetAsync(URL);

          // If we get a 200 response, then return it
          if (response.IsSuccessStatusCode)
          {
            // Get the webpage as string
            string strBody = await response.Content.ReadAsStringAsync();
            string absoluteUri = response.RequestMessage.RequestUri.AbsoluteUri;
            return new Tuple<string, string>(absoluteUri, strBody);
          }
        }
      }
    }
    catch (Exception ex)
    {
      Log.Error("InternalActorsScriptGrabber - DownloadWebPage: Error retrieving WebPage: {0} err:{1}", HideAPIKey(URL), ex.Message);
    }                       
    return new Tuple<string, string>(string.Empty, string.Empty);
  }

  private string GetPage(string strUrl, string strEncode, out string absoluteUri, bool cache = false)
  {
    Log.Debug("InternalActorsScriptGrabber - GetPage: {0}", HideAPIKey(strUrl));

    string strBody = string.Empty;
    absoluteUri = string.Empty;

    if (cache)
    {
      if (IMDBPageCache == null)
      {
        IMDBPageCache = new Hashtable();
      }

      if (IMDBPageCache.Contains(strUrl))
      {
        Log.Debug("InternalActorsScriptGrabber - GetPage from Cache: {0}", HideAPIKey(strUrl));
        return (string)IMDBPageCache[strUrl];
      }
    }

    try
    {
      Tuple<string, string> result = Task.Run(() => DownloadWebPage(strUrl)).Result;
      absoluteUri = result.Item1;
      strBody = result.Item2;
    }
    catch (Exception ex)
    {
      Log.Error("InternalActorsScriptGrabber - GetPage: Exception for WebPage: {0} err:{1}", HideAPIKey(strUrl), ex.Message);
    }

    strBody = strBody.Trim();
    if (string.IsNullOrEmpty(strBody))
    {
      Log.Debug("InternalActorsScriptGrabber - GetPage empty response for: {0}", HideAPIKey(strUrl));
    }

    if (cache && !string.IsNullOrEmpty(strBody))
    {
      Log.Debug("InternalActorsScriptGrabber - GetPage put Page to Cache: {0}", HideAPIKey(strUrl));
      IMDBPageCache.Add(strUrl, strBody);
    }
    return strBody;
  }
}
